{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.jpg","path":"img/header_img/404.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archives-widget.png","path":"img/header_img/archives-widget.png","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8b9e17605b69cf3d2b0cbf8ddc5c7357d538ccd9","modified":1568785237921},{"_id":"source/CNAME","hash":"ef2ed9ada992046b41263dd23173b2dd5a898edc","modified":1568785237922},{"_id":"themes/huweihuang/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1568785238056},{"_id":"themes/huweihuang/_config.yml","hash":"93c0edabaf1d97a8f429dbd9ff9d97286edb3b56","modified":1568785238056},{"_id":"source/_posts/Axios学习01-实现异步通信.md","hash":"9facd65f79eead30d8e715857dce0f9b8f77548e","modified":1568785237924},{"_id":"source/_posts/Axios学习02-跨域通信.md","hash":"19050cf1038d715d3f85453c9cb5a4a1d6826389","modified":1568785237929},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识.md","hash":"9a485b0f194bc33d122b239e5bf3a8e186a8bb00","modified":1568785237935},{"_id":"source/_posts/Vue学习01-安装及使用.md","hash":"03124e431be4a4b9680e29299ab4213479b32aba","modified":1568785237944},{"_id":"source/_posts/Vue学习02-Vue语法.md","hash":"a77aad9e72fe4f0700e2fad6856d2f1024bbbb46","modified":1568785237948},{"_id":"source/_posts/Vue学习03-生命周期函数.md","hash":"19af5f2d5f8c08b74485c37676d1f75fad4ecb81","modified":1568785237956},{"_id":"source/_posts/Vue学习04-Vue布局.md","hash":"165c5ea603df2d0ce4f0e7babebaeedb2dc80344","modified":1568785237967},{"_id":"source/_posts/博客模板备注.md","hash":"dc5a92874613beb7ff5fce15b2fb5c23d13f7a00","modified":1568785237969},{"_id":"source/archive/index.md","hash":"87e995582a1fedab64a901410a1a9d7390f75b94","modified":1568785237973},{"_id":"source/about/index.md","hash":"ef803102954999d167060b0feab762fdbfa7f65b","modified":1568785237971},{"_id":"source/img/icon_wechat.png","hash":"5c57dd7998f612ba98a6f9aadd000cd20b116709","modified":1568785238041},{"_id":"source/tags/index.md","hash":"9a417cb743a80a4ea6e78e833c13d5faeba2508c","modified":1568785238048},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1568785238058},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1568785238062},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1568785238063},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1568785238064},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1568785238065},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1568785238079},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1568785238081},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1568785238084},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1568785238083},{"_id":"themes/huweihuang/layout/404.ejs","hash":"2e8d719fab50014b7963d3c2f4ee34c23e749d7b","modified":1568785238085},{"_id":"themes/huweihuang/layout/about.ejs","hash":"95d75969d81818e97f4738cf5e4ee14d1f8ca4a9","modified":1568785238499},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"197a1ee1b499bf87c9e77a484ca1f6cc58313e1d","modified":1568785238499},{"_id":"themes/huweihuang/layout/index.ejs","hash":"1bb0e537503c24499eee4ea17fe3e4f46bac1309","modified":1568785238500},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1568785238662},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"389fc11a45676f94b77ebd2cb0d658a0358979c8","modified":1568785238663},{"_id":"themes/huweihuang/layout/page.ejs","hash":"f77a9eb0e09931eac85e8244027eb5678c7b0705","modified":1568785238664},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1568785238666},{"_id":"themes/huweihuang/layout/post.ejs","hash":"a9f8d1a310839492cfdd0c7cae64e60a2ef1b935","modified":1568785238665},{"_id":"source/_posts/Axios学习01-实现异步通信/axios.png","hash":"08a179709de116296653aeb7419b890a7e794789","modified":1568785237928},{"_id":"source/_posts/Axios学习02-跨域通信/Access.png","hash":"ee6ad9645e83e3f3a19b8b11387dd88b4c52e331","modified":1568785237934},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvm.png","hash":"74129ce7f40761f454d1c314b05d8d661013cc9c","modified":1568785237939},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvc.png","hash":"4c58d1b5ec609a382912c39b6f2d20d373618af9","modified":1568785237937},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/web.png","hash":"c12b67e0532ebd834b122cdf2a5d8a61c972bb9a","modified":1568785237943},{"_id":"source/_posts/Vue学习01-安装及使用/dataDriver.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1568785237947},{"_id":"source/_posts/Vue学习02-Vue语法/v-for.png","hash":"8bac58c2499e4f9b3827ea3249ee7cf5e97fefc3","modified":1568785237950},{"_id":"source/_posts/Vue学习02-Vue语法/v-on.png","hash":"e56ae8105594dbf89fd9526068b17dd15192c46b","modified":1568785237952},{"_id":"source/_posts/Vue学习02-Vue语法/v-on1.png","hash":"81ecb8e99e1b6f5f7b3ff9fe97851e407a90acfd","modified":1568785237953},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvmVue.png","hash":"52c8a6529e7ed652041a6d71f1824db3991ea574","modified":1568785237941},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"5a8784f9be89d329dc30a9de537dad92ea97a055","modified":1568785238087},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"07e23da21331914b971bb0317f545ea677484180","modified":1568785238088},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1568785238096},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"10d5e0966895f86373b0652e9ad2df69d742bfe4","modified":1568785238094},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1568785238097},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1568785238489},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"aa41fc56f2fa03559aa266fc062772e9e3bbebbf","modified":1568785238490},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1568785238491},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1568785238492},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1568785238493},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"66e9c11fb694143748a74a7e40329c60744924ec","modified":1568785238498},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1568785238497},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1568785238494},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1568785238773},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1568785238797},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1568785238799},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1568785238800},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1568785238742},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1568785238744},{"_id":"themes/huweihuang/source/css/donate.css","hash":"948c148076e7e0e0f78225f753813012938f5022","modified":1568785238763},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1568785238764},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1568785238764},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1568785238768},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1568785238769},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"e197d57dc5312b20974193b6991c779e266fadca","modified":1568785238770},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1568785238771},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1568785238804},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1568785238805},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1568785238931},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1568785238941},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1568785238942},{"_id":"themes/huweihuang/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1568785238944},{"_id":"themes/huweihuang/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1568785238945},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1568785238745},{"_id":"source/img/avatar/ironman.png","hash":"ce297968bf6cd2fa354e6caaf186703c41bfc030","modified":1568785237989},{"_id":"source/img/header_img/404.jpg","hash":"fac23de8db282820e005319e5faf1902665cc8d6","modified":1568785237994},{"_id":"source/img/header_img/archives-widget.png","hash":"54cc1545fb96d24de7ba156da34c78bdb015117c","modified":1568785238020},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1568785238775},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1568785238803},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1568785238940},{"_id":"source/img/header_img/about.jpg","hash":"f1075a75f02c583da9daf12711f9f7028a024bfb","modified":1568785238008},{"_id":"source/img/header_img/archive.jpg","hash":"f3bbc81fdecb0ccc8726315caaa54a71c3310b3a","modified":1568785238014},{"_id":"source/img/header_img/tag.jpg","hash":"34f5904a96863a99d59198f72bd4428e6d441182","modified":1568785238032},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1568785238760},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1568785238766},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1568785238767},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1568785238762},{"_id":"source/img/article_header/article_bg.jpg","hash":"d786eabfe707a4b3cd64cf3aab7aa77ed4d9dc16","modified":1568785237979},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1568785238937},{"_id":"source/img/header_img/home.jpg","hash":"b1b3a95b336cd2ed2b95436bcf5a5fd8e8911237","modified":1568785238027},{"_id":"source/img/article_header/article_header.png","hash":"c49ef95baf81bbe8505a1dc362e41fb3df793ae9","modified":1568785237984},{"_id":"source/_posts/Vue学习03-生命周期函数/vueLifeLoop.jpg","hash":"1db02cc9577db72c01bcfb25ad62ec2f19ae9bd0","modified":1568785237965}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2019-09-18T05:40:37.921Z","updated":"2019-09-18T05:40:37.921Z","path":"404.html","title":"","comments":1,"_id":"ck0ouks7q0000yov0hs6q2hwt","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2017-09-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2017-09-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2019-09-18T05:40:37.973Z","path":"archive/index.html","_id":"ck0ouksc20002yov0vmerqdp0","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"You only get a wand when you enter Hogwarts School of Witchcraft and Wizardry. That's when you start learning magic.","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n> Hakuna Matata!!!\n\n### 关于我\n\n> 两只猫的铲屎官！\n\n### 兴趣方向\n\n> 目前主要兴趣为Java技术栈\n> 喜欢在how2j/SegmentsFault/Github浏览学习博客与项目\n> 遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感\n> 偶尔会上LeetCode/牛客网刷题\n\n### 参与社区\n\n > Github:https://github.com/倪子铭\n >\n > 豆瓣:https://www.douban.com/people/80901919/\n\n### 联系我\n\n>Email: zimingnee@163.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"You only get a wand when you enter Hogwarts School of Witchcraft and Wizardry. That's when you start learning magic.\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n> Hakuna Matata!!!\n\n### 关于我\n\n> 两只猫的铲屎官！\n\n### 兴趣方向\n\n> 目前主要兴趣为Java技术栈\n> 喜欢在how2j/SegmentsFault/Github浏览学习博客与项目\n> 遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感\n> 偶尔会上LeetCode/牛客网刷题\n\n### 参与社区\n\n > Github:https://github.com/倪子铭\n >\n > 豆瓣:https://www.douban.com/people/80901919/\n\n### 联系我\n\n>Email: zimingnee@163.com\n\n","updated":"2019-09-18T05:40:37.971Z","path":"about/index.html","comments":1,"_id":"ck0oukscc0004yov077syok46","content":"<h3 id=\"一句话\">一句话</h3>\n<blockquote>\n<p>Hakuna Matata!!!</p>\n</blockquote>\n<h3 id=\"关于我\">关于我</h3>\n<blockquote>\n<p>两只猫的铲屎官！</p>\n</blockquote>\n<h3 id=\"兴趣方向\">兴趣方向</h3>\n<blockquote>\n<p>目前主要兴趣为Java技术栈<br>\n喜欢在how2j/SegmentsFault/Github浏览学习博客与项目<br>\n遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感<br>\n偶尔会上LeetCode/牛客网刷题</p>\n</blockquote>\n<h3 id=\"参与社区\">参与社区</h3>\n<blockquote>\n<p>Github:<a href=\"https://github.com/%E5%80%AA%E5%AD%90%E9%93%AD\">https://github.com/倪子铭</a></p>\n<p>豆瓣:<a href=\"https://www.douban.com/people/80901919/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/people/80901919/</a></p>\n</blockquote>\n<h3 id=\"联系我\">联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:zimingnee@163.com\" target=\"_blank\" rel=\"noopener\">zimingnee@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>Hakuna Matata!!!</p>\n</blockquote>\n<h3>关于我</h3>\n<blockquote>\n<p>两只猫的铲屎官！</p>\n</blockquote>\n<h3>兴趣方向</h3>\n<blockquote>\n<p>目前主要兴趣为Java技术栈<br>\n喜欢在how2j/SegmentsFault/Github浏览学习博客与项目<br>\n遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感<br>\n偶尔会上LeetCode/牛客网刷题</p>\n</blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>Github:<a href=\"https://github.com/%E5%80%AA%E5%AD%90%E9%93%AD\">https://github.com/倪子铭</a></p>\n<p>豆瓣:<a href=\"https://www.douban.com/people/80901919/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/people/80901919/</a></p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:zimingnee@163.com\" target=\"_blank\" rel=\"noopener\">zimingnee@163.com</a></p>\n</blockquote>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2019-09-18T05:40:38.048Z","updated":"2019-09-18T05:40:38.048Z","path":"tags/index.html","comments":1,"_id":"ck0oukscs0007yov0b7fv7qr9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Axios学习01-实现异步通信","catalog":true,"date":"2019-08-18T02:22:38.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n- 从浏览器中创建 XMLHttpRequests\n- 从 node.js 创建 http 请求\n- 支持 Promise API\n    相当于guawa 链式编程 chain programing\n- 拦截请求和响应\n- 转换请求数据和响应数据\n- 取消请求\n- 自动转换 JSON 数据\n- 客户端支持防御 XSRF（跨站请求伪造）\nGitHub：https://github.com/axios/axios\n\n### 为什么要使用 Axios\n由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js\n 并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，\n 不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架\n\n### 第一个 Axios 应用程序\n咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：\n\n~~~ vue\n<div id=\"app\">\n    <div>名称: {{info.name}}</div>\n    <div>地址: {{info.address.country}} - {{info.address.city}} - {{info.address.street}}</div>\n    <div>链接: <a v-bind:href=\"info.url\" target=\"_blank\">{{info.name}}</a></div>\n    <!--友情链接: <a v-for=\"link in lnfo.links\">link.name</a>-->\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script>\n  var vm = new Vue({\n    el:\"#app\",\n    data(){\n      return{\n        info:{\n          name: null,\n          address:{\n            country: null,\n            city: null,\n            street: null\n          },\n          url:null,\n          links:[\n            {\n              name: null,\n              url: null\n            }\n          ]\n        }\n      }\n    },\n    mounted(){\n      axios\n        .get('src/assets/Demo.json')\n        .then(response => (this.info = response.data));\n    }\n  })\n</script>\n~~~\n结果输出\n![](axios.png)\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n","source":"_posts/Axios学习01-实现异步通信.md","raw":"---\ntitle: \"Axios学习01-实现异步通信\"\ncatalog: true\ndate: 2019-08-18 10:22:38\nsubtitle:\nheader-img:\ntags: [Axios, Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n- 从浏览器中创建 XMLHttpRequests\n- 从 node.js 创建 http 请求\n- 支持 Promise API\n    相当于guawa 链式编程 chain programing\n- 拦截请求和响应\n- 转换请求数据和响应数据\n- 取消请求\n- 自动转换 JSON 数据\n- 客户端支持防御 XSRF（跨站请求伪造）\nGitHub：https://github.com/axios/axios\n\n### 为什么要使用 Axios\n由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js\n 并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，\n 不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架\n\n### 第一个 Axios 应用程序\n咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：\n\n~~~ vue\n<div id=\"app\">\n    <div>名称: {{info.name}}</div>\n    <div>地址: {{info.address.country}} - {{info.address.city}} - {{info.address.street}}</div>\n    <div>链接: <a v-bind:href=\"info.url\" target=\"_blank\">{{info.name}}</a></div>\n    <!--友情链接: <a v-for=\"link in lnfo.links\">link.name</a>-->\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script>\n  var vm = new Vue({\n    el:\"#app\",\n    data(){\n      return{\n        info:{\n          name: null,\n          address:{\n            country: null,\n            city: null,\n            street: null\n          },\n          url:null,\n          links:[\n            {\n              name: null,\n              url: null\n            }\n          ]\n        }\n      }\n    },\n    mounted(){\n      axios\n        .get('src/assets/Demo.json')\n        .then(response => (this.info = response.data));\n    }\n  })\n</script>\n~~~\n结果输出\n![](axios.png)\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n","slug":"Axios学习01-实现异步通信","published":1,"updated":"2019-09-18T05:40:37.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ouksbl0001yov0lo3r50qz","content":"<h1 id=\"vue学习记录\">Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2 id=\"使用-axios-实现异步通信\">使用 Axios 实现异步通信</h2>\n<h3 id=\"什么是-axios\">什么是 Axios</h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 Promise API<br>\n相当于guawa 链式编程 chain programing</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF（跨站请求伪造）<br>\nGitHub：<a href=\"https://github.com/axios/axios\">https://github.com/axios/axios</a></li>\n</ul>\n<h3 id=\"为什么要使用-axios\">为什么要使用 Axios</h3>\n<p>由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js<br>\n并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，<br>\n不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架</p>\n<h3 id=\"第一个-axios-应用程序\">第一个 Axios 应用程序</h3>\n<p>咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div&gt;名称: &#123;&#123;info.name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;地址: &#123;&#123;info.address.country&#125;&#125; - &#123;&#123;info.address.city&#125;&#125; - &#123;&#123;info.address.street&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;链接: &lt;a v-bind:href=&quot;info.url&quot; target=&quot;_blank&quot;&gt;&#123;&#123;info.name&#125;&#125;&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!--友情链接: &lt;a v-for=&quot;link in lnfo.links&quot;&gt;link.name&lt;/a&gt;--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var vm = new Vue(&#123;</span><br><span class=\"line\">    el:&quot;#app&quot;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return&#123;</span><br><span class=\"line\">        info:&#123;</span><br><span class=\"line\">          name: null,</span><br><span class=\"line\">          address:&#123;</span><br><span class=\"line\">            country: null,</span><br><span class=\"line\">            city: null,</span><br><span class=\"line\">            street: null</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          url:null,</span><br><span class=\"line\">          links:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              name: null,</span><br><span class=\"line\">              url: null</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">      axios</span><br><span class=\"line\">        .get(&apos;src/assets/Demo.json&apos;)</span><br><span class=\"line\">        .then(response =&gt; (this.info = response.data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>结果输出<br>\n<img src=\"axios.png\" alt=\"\"></p>\n<h2 id=\"vue布局\">Vue布局</h2>\n<h3 id=\"表单输出\">表单输出</h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3 id=\"为什么要实现数据的双向绑定\">为什么要实现数据的双向绑定</h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3 id=\"在表单中使用双向数据绑定\">在表单中使用双向数据绑定</h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>使用 Axios 实现异步通信</h2>\n<h3>什么是 Axios</h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 Promise API<br>\n相当于guawa 链式编程 chain programing</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF（跨站请求伪造）<br>\nGitHub：<a href=\"https://github.com/axios/axios\">https://github.com/axios/axios</a></li>\n</ul>\n<h3>为什么要使用 Axios</h3>\n<p>由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js<br>\n并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，<br>\n不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架</p>\n<h3>第一个 Axios 应用程序</h3>\n<p>咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div&gt;名称: &#123;&#123;info.name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;地址: &#123;&#123;info.address.country&#125;&#125; - &#123;&#123;info.address.city&#125;&#125; - &#123;&#123;info.address.street&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;链接: &lt;a v-bind:href=&quot;info.url&quot; target=&quot;_blank&quot;&gt;&#123;&#123;info.name&#125;&#125;&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!--友情链接: &lt;a v-for=&quot;link in lnfo.links&quot;&gt;link.name&lt;/a&gt;--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var vm = new Vue(&#123;</span><br><span class=\"line\">    el:&quot;#app&quot;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return&#123;</span><br><span class=\"line\">        info:&#123;</span><br><span class=\"line\">          name: null,</span><br><span class=\"line\">          address:&#123;</span><br><span class=\"line\">            country: null,</span><br><span class=\"line\">            city: null,</span><br><span class=\"line\">            street: null</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          url:null,</span><br><span class=\"line\">          links:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              name: null,</span><br><span class=\"line\">              url: null</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">      axios</span><br><span class=\"line\">        .get(&apos;src/assets/Demo.json&apos;)</span><br><span class=\"line\">        .then(response =&gt; (this.info = response.data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>结果输出<br>\n<img src=\"axios.png\" alt=\"\"></p>\n<h2>Vue布局</h2>\n<h3>表单输出</h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3>为什么要实现数据的双向绑定</h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3>在表单中使用双向数据绑定</h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n"},{"title":"Axios学习02-跨域通信","catalog":true,"date":"2019-08-26T02:25:50.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n  这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n## 测试数据源\n我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源\n~~~ json\n{\n  \"name\": \"广州千锋\",\n  \"url\": \"http://www.funtl.com\",\n  \"page\": 88,\n  \"isNonProfit\": true,\n  \"address\": {\n    \"street\": \"元岗路.\",\n    \"city\": \"广东广州\",\n    \"country\": \"中国\"\n  },\n  \"links\": [\n    {\n      \"name\": \"Google\",\n      \"url\": \"http://www.google.com\"\n    },\n    {\n      \"name\": \"Baidu\",\n      \"url\": \"http://www.baidu.com\"\n    },\n    {\n      \"name\": \"SoSo\",\n      \"url\": \"http://www.SoSo.com\"\n    }\n  ]\n}\n~~~\n## 开始使用axios请求data.json\n\n### main.js\n~~~ javascript\n// 导入\nimport axios from '../node_modules/axios'\n// 安装路由\nVue.prototype.axios = axios;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n### 路由配置 index.js\n~~~ javascript \nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nimport Login from '../views/Login'\n//user\nimport UserProfile from '../views/user/UserProfile'\n\nVue.use(Router);\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      // 登录页\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      // 首页\n      path: '/main',\n      props:true,\n      name: 'Main',\n      component: Main,\n      children:[\n        {path:'/user/profile/:id', name:'UserProfile', component:UserProfile}\n      ]\n    }\n\n  ]\n});\n~~~\n\n### 在UserProfile组件中发送axios请求\n~~~ javascript\nexport default {\n  name: \"UserProfile\",\n  beforeRouteEnter: (to, from, next) => {\n    console.log(\"准备进入个人信息页\");\n    // 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例\n    next(vm => {\n      vm.getData();\n    });\n  },\n  beforeRouteLeave: (to, from, next) => {\n    console.log(\"准备离开个人信息页\");\n    next();\n  },\n  methods: {\n    getData: function () {\n      this.axios({\n        method: 'get',\n        url: 'http://服务器地址:8080/data.json'\n      }).then(function (repos) {\n        console.log(repos);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n}\n~~~\n### 启动Vue 项目\n\n控制台输出`npm run dev`回车,控制台信息输出\n\n~~~ console\n DONE  Compiled successfully in 547ms10:34:51 AM\n\n I  Your application is running here: http://localhost:8082\n~~~\n### 查看控制台信息\n按下`F12`调出谷歌浏览器的前端调试工具.信息如下\n~~~ console\nAccess to XMLHttpRequest at 'http://服务器地址:8080/data.json' \nfrom origin 'http://localhost:8082' has been blocked by CORS \npolicy: No 'Access-Control-Allow-Origin' header is present on \nthe requested resource.\n~~~\n发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.\n\n## 解决方案\nAxios的跨域是怎么处理的呢?\n\n查看Vue版本信息\n~~~ console\n$ vue --version\n2.9.6\n~~~\n\n### 配置BaseURL\n在 main.js 中，配置下 Url 前缀\n\n~~~ JavaScript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport router from './router'\nimport axios from '../node_modules/axios'\n\n// 导入 ElementUI\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nimport App from './App'\n\n// 安装路由\nVue.use(VueRouter);\nVue.prototype.axios = axios;\n// 安装 ElementUI\nVue.use(ElementUI);\n\naxios.defaults.baseURL = '/api';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nVue.config.productionTip = false;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n`axios.defaults.baseURL = '/api';`\n这样每次发送请求都会带一个 /api 的前缀\n\n`axios.defaults.headers.post['Content-Type'] = 'application/json';`\n\n### 配置代理\nconfig 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：\n~~~ JavaScript\nmodule.exports = {\n  dev: {\n\n    // Paths\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/',\n    proxyTable: {\n      '/api':{\n        target: \"http://116.62.110.99:8080\",\n        changeOrigin:true,\n        pathRewrite:{\n          '^/api':''\n        }\n      }\n    },\n    ....\n  }\n} \n~~~\n### 修改请求URL \n在请求页面中,我的是`UserProfile.vue`\n~~~ javascript\nmethods: {\n  getData: function () {\n    this.axios({\n      method: 'get',\n      url: '/data.json'\n    }).then(function (repos) {\n      console.log(repos.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n~~~\n\n### 查看结果\n在浏览器中打开界面请求查看控制台信息如下:\n![](Access.png)\n\n### 参考资料\n> Axiso 解决跨域访问\n> https://blog.csdn.net/yuanlaijike/article/details/80522621\n> 路由钩子与异步请求\n> https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\n\n\n","source":"_posts/Axios学习02-跨域通信.md","raw":"---\ntitle: Axios学习02-跨域通信\ncatalog: true\ndate: 2019-08-26 10:25:50\nsubtitle:\nheader-img:\ntags: [Axios, Vue]\n---\n\n# Vue学习记录\n  这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n## 测试数据源\n我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源\n~~~ json\n{\n  \"name\": \"广州千锋\",\n  \"url\": \"http://www.funtl.com\",\n  \"page\": 88,\n  \"isNonProfit\": true,\n  \"address\": {\n    \"street\": \"元岗路.\",\n    \"city\": \"广东广州\",\n    \"country\": \"中国\"\n  },\n  \"links\": [\n    {\n      \"name\": \"Google\",\n      \"url\": \"http://www.google.com\"\n    },\n    {\n      \"name\": \"Baidu\",\n      \"url\": \"http://www.baidu.com\"\n    },\n    {\n      \"name\": \"SoSo\",\n      \"url\": \"http://www.SoSo.com\"\n    }\n  ]\n}\n~~~\n## 开始使用axios请求data.json\n\n### main.js\n~~~ javascript\n// 导入\nimport axios from '../node_modules/axios'\n// 安装路由\nVue.prototype.axios = axios;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n### 路由配置 index.js\n~~~ javascript \nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nimport Login from '../views/Login'\n//user\nimport UserProfile from '../views/user/UserProfile'\n\nVue.use(Router);\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      // 登录页\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      // 首页\n      path: '/main',\n      props:true,\n      name: 'Main',\n      component: Main,\n      children:[\n        {path:'/user/profile/:id', name:'UserProfile', component:UserProfile}\n      ]\n    }\n\n  ]\n});\n~~~\n\n### 在UserProfile组件中发送axios请求\n~~~ javascript\nexport default {\n  name: \"UserProfile\",\n  beforeRouteEnter: (to, from, next) => {\n    console.log(\"准备进入个人信息页\");\n    // 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例\n    next(vm => {\n      vm.getData();\n    });\n  },\n  beforeRouteLeave: (to, from, next) => {\n    console.log(\"准备离开个人信息页\");\n    next();\n  },\n  methods: {\n    getData: function () {\n      this.axios({\n        method: 'get',\n        url: 'http://服务器地址:8080/data.json'\n      }).then(function (repos) {\n        console.log(repos);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n}\n~~~\n### 启动Vue 项目\n\n控制台输出`npm run dev`回车,控制台信息输出\n\n~~~ console\n DONE  Compiled successfully in 547ms10:34:51 AM\n\n I  Your application is running here: http://localhost:8082\n~~~\n### 查看控制台信息\n按下`F12`调出谷歌浏览器的前端调试工具.信息如下\n~~~ console\nAccess to XMLHttpRequest at 'http://服务器地址:8080/data.json' \nfrom origin 'http://localhost:8082' has been blocked by CORS \npolicy: No 'Access-Control-Allow-Origin' header is present on \nthe requested resource.\n~~~\n发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.\n\n## 解决方案\nAxios的跨域是怎么处理的呢?\n\n查看Vue版本信息\n~~~ console\n$ vue --version\n2.9.6\n~~~\n\n### 配置BaseURL\n在 main.js 中，配置下 Url 前缀\n\n~~~ JavaScript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport router from './router'\nimport axios from '../node_modules/axios'\n\n// 导入 ElementUI\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nimport App from './App'\n\n// 安装路由\nVue.use(VueRouter);\nVue.prototype.axios = axios;\n// 安装 ElementUI\nVue.use(ElementUI);\n\naxios.defaults.baseURL = '/api';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nVue.config.productionTip = false;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n`axios.defaults.baseURL = '/api';`\n这样每次发送请求都会带一个 /api 的前缀\n\n`axios.defaults.headers.post['Content-Type'] = 'application/json';`\n\n### 配置代理\nconfig 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：\n~~~ JavaScript\nmodule.exports = {\n  dev: {\n\n    // Paths\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/',\n    proxyTable: {\n      '/api':{\n        target: \"http://116.62.110.99:8080\",\n        changeOrigin:true,\n        pathRewrite:{\n          '^/api':''\n        }\n      }\n    },\n    ....\n  }\n} \n~~~\n### 修改请求URL \n在请求页面中,我的是`UserProfile.vue`\n~~~ javascript\nmethods: {\n  getData: function () {\n    this.axios({\n      method: 'get',\n      url: '/data.json'\n    }).then(function (repos) {\n      console.log(repos.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n~~~\n\n### 查看结果\n在浏览器中打开界面请求查看控制台信息如下:\n![](Access.png)\n\n### 参考资料\n> Axiso 解决跨域访问\n> https://blog.csdn.net/yuanlaijike/article/details/80522621\n> 路由钩子与异步请求\n> https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\n\n\n","slug":"Axios学习02-跨域通信","published":1,"updated":"2019-09-18T05:40:37.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ouksc60003yov0e0g9fuqm","content":"<h1 id=\"vue学习记录\">Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2 id=\"使用-axios-实现异步通信\">使用 Axios 实现异步通信</h2>\n<h3 id=\"什么是-axios\">什么是 Axios</h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<h2 id=\"测试数据源\">测试数据源</h2>\n<p>我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"广州千锋\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.funtl.com\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"page\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isNonProfit\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"元岗路.\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"广东广州\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"links\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Google\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.google.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Baidu\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.baidu.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"SoSo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.SoSo.com\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始使用axios请求datajson\">开始使用axios请求data.json</h2>\n<h3 id=\"mainjs\">main.js</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由配置-indexjs\">路由配置 index.js</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'../views/Login'</span></span><br><span class=\"line\"><span class=\"comment\">//user</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserProfile <span class=\"keyword\">from</span> <span class=\"string\">'../views/user/UserProfile'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 登录页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Login'</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 首页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/main'</span>,</span><br><span class=\"line\">      props:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Main'</span>,</span><br><span class=\"line\">      component: Main,</span><br><span class=\"line\">      children:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/profile/:id'</span>, <span class=\"attr\">name</span>:<span class=\"string\">'UserProfile'</span>, <span class=\"attr\">component</span>:UserProfile&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"在userprofile组件中发送axios请求\">在UserProfile组件中发送axios请求</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"UserProfile\"</span>,</span><br><span class=\"line\">  beforeRouteEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备进入个人信息页\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例</span></span><br><span class=\"line\">    next(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">      vm.getData();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备离开个人信息页\"</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">        url: <span class=\"string\">'http://服务器地址:8080/data.json'</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(repos);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动vue-项目\">启动Vue 项目</h3>\n<p>控制台输出<code>npm run dev</code>回车,控制台信息输出</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DONE  Compiled successfully in 547ms10:34:51 AM</span><br><span class=\"line\"></span><br><span class=\"line\">I  Your application is running here: http://localhost:8082</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看控制台信息\">查看控制台信息</h3>\n<p>按下<code>F12</code>调出谷歌浏览器的前端调试工具.信息如下</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at 'http://服务器地址:8080/data.json' </span><br><span class=\"line\">from origin 'http://localhost:8082' has been blocked by CORS </span><br><span class=\"line\">policy: No 'Access-Control-Allow-Origin' header is present on </span><br><span class=\"line\">the requested resource.</span><br></pre></td></tr></table></figure>\n<p>发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.</p>\n<h2 id=\"解决方案\">解决方案</h2>\n<p>Axios的跨域是怎么处理的呢?</p>\n<p>查看Vue版本信息</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vue --version</span><br><span class=\"line\">2.9.6</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置baseurl\">配置BaseURL</h3>\n<p>在 main.js 中，配置下 Url 前缀</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入 ElementUI</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"><span class=\"comment\">// 安装 ElementUI</span></span><br><span class=\"line\">Vue.use(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'/api'</span>;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>axios.defaults.baseURL = '/api';</code><br>\n这样每次发送请求都会带一个 /api 的前缀</p>\n<p><code>axios.defaults.headers.post['Content-Type'] = 'application/json';</code></p>\n<h3 id=\"配置代理\">配置代理</h3>\n<p>config 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    proxyTable: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>:&#123;</span><br><span class=\"line\">        target: <span class=\"string\">\"http://116.62.110.99:8080\"</span>,</span><br><span class=\"line\">        changeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite:&#123;</span><br><span class=\"line\">          <span class=\"string\">'^/api'</span>:<span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改请求url\">修改请求URL</h3>\n<p>在请求页面中,我的是<code>UserProfile.vue</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/data.json'</span></span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(repos.data);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看结果\">查看结果</h3>\n<p>在浏览器中打开界面请求查看控制台信息如下:<br>\n<img src=\"Access.png\" alt=\"\"></p>\n<h3 id=\"参考资料\">参考资料</h3>\n<blockquote>\n<p>Axiso 解决跨域访问<br>\n<a href=\"https://blog.csdn.net/yuanlaijike/article/details/80522621\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yuanlaijike/article/details/80522621</a><br>\n路由钩子与异步请求<br>\n<a href=\"https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-router/路由钩子与异步请求.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>使用 Axios 实现异步通信</h2>\n<h3>什么是 Axios</h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<h2>测试数据源</h2>\n<p>我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"广州千锋\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.funtl.com\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"page\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isNonProfit\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"元岗路.\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"广东广州\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"links\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Google\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.google.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Baidu\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.baidu.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"SoSo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.SoSo.com\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>开始使用axios请求data.json</h2>\n<h3>main.js</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3>路由配置 index.js</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'../views/Login'</span></span><br><span class=\"line\"><span class=\"comment\">//user</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserProfile <span class=\"keyword\">from</span> <span class=\"string\">'../views/user/UserProfile'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 登录页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Login'</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 首页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/main'</span>,</span><br><span class=\"line\">      props:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Main'</span>,</span><br><span class=\"line\">      component: Main,</span><br><span class=\"line\">      children:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/profile/:id'</span>, <span class=\"attr\">name</span>:<span class=\"string\">'UserProfile'</span>, <span class=\"attr\">component</span>:UserProfile&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3>在UserProfile组件中发送axios请求</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"UserProfile\"</span>,</span><br><span class=\"line\">  beforeRouteEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备进入个人信息页\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例</span></span><br><span class=\"line\">    next(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">      vm.getData();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备离开个人信息页\"</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">        url: <span class=\"string\">'http://服务器地址:8080/data.json'</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(repos);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>启动Vue 项目</h3>\n<p>控制台输出<code>npm run dev</code>回车,控制台信息输出</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DONE  Compiled successfully in 547ms10:34:51 AM</span><br><span class=\"line\"></span><br><span class=\"line\">I  Your application is running here: http://localhost:8082</span><br></pre></td></tr></table></figure>\n<h3>查看控制台信息</h3>\n<p>按下<code>F12</code>调出谷歌浏览器的前端调试工具.信息如下</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at 'http://服务器地址:8080/data.json' </span><br><span class=\"line\">from origin 'http://localhost:8082' has been blocked by CORS </span><br><span class=\"line\">policy: No 'Access-Control-Allow-Origin' header is present on </span><br><span class=\"line\">the requested resource.</span><br></pre></td></tr></table></figure>\n<p>发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.</p>\n<h2>解决方案</h2>\n<p>Axios的跨域是怎么处理的呢?</p>\n<p>查看Vue版本信息</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vue --version</span><br><span class=\"line\">2.9.6</span><br></pre></td></tr></table></figure>\n<h3>配置BaseURL</h3>\n<p>在 main.js 中，配置下 Url 前缀</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入 ElementUI</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"><span class=\"comment\">// 安装 ElementUI</span></span><br><span class=\"line\">Vue.use(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'/api'</span>;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>axios.defaults.baseURL = '/api';</code><br>\n这样每次发送请求都会带一个 /api 的前缀</p>\n<p><code>axios.defaults.headers.post['Content-Type'] = 'application/json';</code></p>\n<h3>配置代理</h3>\n<p>config 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    proxyTable: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>:&#123;</span><br><span class=\"line\">        target: <span class=\"string\">\"http://116.62.110.99:8080\"</span>,</span><br><span class=\"line\">        changeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite:&#123;</span><br><span class=\"line\">          <span class=\"string\">'^/api'</span>:<span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>修改请求URL</h3>\n<p>在请求页面中,我的是<code>UserProfile.vue</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/data.json'</span></span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(repos.data);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查看结果</h3>\n<p>在浏览器中打开界面请求查看控制台信息如下:<br>\n<img src=\"Access.png\" alt=\"\"></p>\n<h3>参考资料</h3>\n<blockquote>\n<p>Axiso 解决跨域访问<br>\n<a href=\"https://blog.csdn.net/yuanlaijike/article/details/80522621\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yuanlaijike/article/details/80522621</a><br>\n路由钩子与异步请求<br>\n<a href=\"https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-router/路由钩子与异步请求.html</a></p>\n</blockquote>\n"},{"title":"Vue学习01-安装及使用","catalog":true,"date":"2019-08-16T01:49:24.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### 什么是Vue.js\n- Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex\n\n- React是最流行的前端框架(网站和手机app都可以开发)\n\n- Vue Angular React是目前前端三大主流框架!\n\n- Vue是一套构建用户界面的框架, **只关注视图层**\n\n- 前端工作 为mvc的view层\n\n# Vue的学习\n**Vue学习的内容开始.**\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的**渐进式框架**，\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。\nVue 的核心库只**关注视图层**，不仅易于上手，还便于与第三方库\n（如：vue-router，vue-resource，vuex）或既有项目整合。\n- 优雅降级: 向下兼容\n- 渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容\n\n- Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.\n- Vuex 状态管理框架;\n\n### 为什么要使用 Vue.js\n- 轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）\n- 移动优先。更适合移动端，比如移动端的 Touch 事件\n- 易上手，学习曲线平稳，文档齐全\n- 吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性\n- 开源，社区活跃度高\n\n## Vue.js 的两大核心要素\n### 数据驱动\n![](dataDriver.png)\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty \n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。\n\n每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知\n watcher 重新计算，从而致使它关联的组件得以更新。\n\n## 安装\n- 如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.\n~~~ javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"></script>\n~~~\n\n- 新建一个Vue程序\n利用npm 安装vue\n~~~ shell\n# 最新稳定版\n$ npm install vue\n~~~\n### 命令行工具 (CLI)\n`待完善`\n\n### 组件化\n- 页面上每个独立的可交互的区域视为一个组件\n- 每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护\n- 页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面\n\n## 第一个Vue程序\n~~~ vue\n<!DOCTYPE html>\n<html lang=\"zh\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>my-vue</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      {{a}}\n    </div>\n\n    <!-- built files will be auto injected -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          a: \"test\"\n        }\n      })\n    </script>\n  </body>\n</html>\n~~~\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习01-安装及使用.md","raw":"---\ntitle: Vue学习01-安装及使用\ncatalog: true\ndate: 2019-08-16 09:49:24\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### 什么是Vue.js\n- Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex\n\n- React是最流行的前端框架(网站和手机app都可以开发)\n\n- Vue Angular React是目前前端三大主流框架!\n\n- Vue是一套构建用户界面的框架, **只关注视图层**\n\n- 前端工作 为mvc的view层\n\n# Vue的学习\n**Vue学习的内容开始.**\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的**渐进式框架**，\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。\nVue 的核心库只**关注视图层**，不仅易于上手，还便于与第三方库\n（如：vue-router，vue-resource，vuex）或既有项目整合。\n- 优雅降级: 向下兼容\n- 渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容\n\n- Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.\n- Vuex 状态管理框架;\n\n### 为什么要使用 Vue.js\n- 轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）\n- 移动优先。更适合移动端，比如移动端的 Touch 事件\n- 易上手，学习曲线平稳，文档齐全\n- 吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性\n- 开源，社区活跃度高\n\n## Vue.js 的两大核心要素\n### 数据驱动\n![](dataDriver.png)\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty \n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。\n\n每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知\n watcher 重新计算，从而致使它关联的组件得以更新。\n\n## 安装\n- 如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.\n~~~ javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"></script>\n~~~\n\n- 新建一个Vue程序\n利用npm 安装vue\n~~~ shell\n# 最新稳定版\n$ npm install vue\n~~~\n### 命令行工具 (CLI)\n`待完善`\n\n### 组件化\n- 页面上每个独立的可交互的区域视为一个组件\n- 每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护\n- 页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面\n\n## 第一个Vue程序\n~~~ vue\n<!DOCTYPE html>\n<html lang=\"zh\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>my-vue</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      {{a}}\n    </div>\n\n    <!-- built files will be auto injected -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          a: \"test\"\n        }\n      })\n    </script>\n  </body>\n</html>\n~~~\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习01-安装及使用","published":1,"updated":"2019-09-18T05:40:37.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ouksco0006yov05io0bzb4","content":"<h1 id=\"vue学习记录\">Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3 id=\"什么是vuejs\">什么是Vue.js</h3>\n<ul>\n<li>\n<p>Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex</p>\n</li>\n<li>\n<p>React是最流行的前端框架(网站和手机app都可以开发)</p>\n</li>\n<li>\n<p>Vue Angular React是目前前端三大主流框架!</p>\n</li>\n<li>\n<p>Vue是一套构建用户界面的框架, <strong>只关注视图层</strong></p>\n</li>\n<li>\n<p>前端工作 为mvc的view层</p>\n</li>\n</ul>\n<h1 id=\"vue的学习\">Vue的学习</h1>\n<p><strong>Vue学习的内容开始.</strong><br>\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的<strong>渐进式框架</strong>，<br>\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。<br>\nVue 的核心库只<strong>关注视图层</strong>，不仅易于上手，还便于与第三方库<br>\n（如：vue-router，vue-resource，vuex）或既有项目整合。</p>\n<ul>\n<li>\n<p>优雅降级: 向下兼容</p>\n</li>\n<li>\n<p>渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容</p>\n</li>\n<li>\n<p>Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.</p>\n</li>\n<li>\n<p>Vuex 状态管理框架;</p>\n</li>\n</ul>\n<h3 id=\"为什么要使用-vuejs\">为什么要使用 Vue.js</h3>\n<ul>\n<li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li>\n<li>移动优先。更适合移动端，比如移动端的 Touch 事件</li>\n<li>易上手，学习曲线平稳，文档齐全</li>\n<li>吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li>\n<li>开源，社区活跃度高</li>\n</ul>\n<h2 id=\"vuejs-的两大核心要素\">Vue.js 的两大核心要素</h2>\n<h3 id=\"数据驱动\">数据驱动</h3>\n<p><img src=\"dataDriver.png\" alt=\"\"><br>\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty<br>\n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，<br>\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。</p>\n<p>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知<br>\nwatcher 重新计算，从而致使它关联的组件得以更新。</p>\n<h2 id=\"安装\">安装</h2>\n<ul>\n<li>如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建一个Vue程序<br>\n利用npm 安装vue</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 最新稳定版</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install vue</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令行工具-cli\">命令行工具 (CLI)</h3>\n<p><code>待完善</code></p>\n<h3 id=\"组件化\">组件化</h3>\n<ul>\n<li>页面上每个独立的可交互的区域视为一个组件</li>\n<li>每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护</li>\n<li>页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面</li>\n</ul>\n<h2 id=\"第一个vue程序\">第一个Vue程序</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;my-vue&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;a&#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- built files will be auto injected --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;test&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\">参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3>什么是Vue.js</h3>\n<ul>\n<li>\n<p>Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex</p>\n</li>\n<li>\n<p>React是最流行的前端框架(网站和手机app都可以开发)</p>\n</li>\n<li>\n<p>Vue Angular React是目前前端三大主流框架!</p>\n</li>\n<li>\n<p>Vue是一套构建用户界面的框架, <strong>只关注视图层</strong></p>\n</li>\n<li>\n<p>前端工作 为mvc的view层</p>\n</li>\n</ul>\n<h1>Vue的学习</h1>\n<p><strong>Vue学习的内容开始.</strong><br>\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的<strong>渐进式框架</strong>，<br>\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。<br>\nVue 的核心库只<strong>关注视图层</strong>，不仅易于上手，还便于与第三方库<br>\n（如：vue-router，vue-resource，vuex）或既有项目整合。</p>\n<ul>\n<li>\n<p>优雅降级: 向下兼容</p>\n</li>\n<li>\n<p>渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容</p>\n</li>\n<li>\n<p>Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.</p>\n</li>\n<li>\n<p>Vuex 状态管理框架;</p>\n</li>\n</ul>\n<h3>为什么要使用 Vue.js</h3>\n<ul>\n<li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li>\n<li>移动优先。更适合移动端，比如移动端的 Touch 事件</li>\n<li>易上手，学习曲线平稳，文档齐全</li>\n<li>吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li>\n<li>开源，社区活跃度高</li>\n</ul>\n<h2>Vue.js 的两大核心要素</h2>\n<h3>数据驱动</h3>\n<p><img src=\"dataDriver.png\" alt=\"\"><br>\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty<br>\n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，<br>\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。</p>\n<p>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知<br>\nwatcher 重新计算，从而致使它关联的组件得以更新。</p>\n<h2>安装</h2>\n<ul>\n<li>如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建一个Vue程序<br>\n利用npm 安装vue</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 最新稳定版</span><br><span class=\"line\"><span class=\"meta\">$</span> npm install vue</span><br></pre></td></tr></table></figure>\n<h3>命令行工具 (CLI)</h3>\n<p><code>待完善</code></p>\n<h3>组件化</h3>\n<ul>\n<li>页面上每个独立的可交互的区域视为一个组件</li>\n<li>每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护</li>\n<li>页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面</li>\n</ul>\n<h2>第一个Vue程序</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;my-vue&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;a&#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- built files will be auto injected --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;test&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"Vue学习03-生命周期函数","catalog":true,"date":"2019-08-17T02:25:22.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### Vue生命周期 \n- created: 比如钩子可以用来在一个实例被创建之后执行代码：\n- mounted\n- updated\n- destroyed \n\n每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\n![](vueLifeLoop.jpg)\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n~~~ vue\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n~~~\n也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。\n\n###钩子函数的触发时机\n#### beforeCreate\n在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\n\n#### created\n实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n\n#### beforeMount\n在挂载开始之前被调用：相关的 render 函数首次被调用。\n\n#### mounted\nel 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。\n\n#### beforeUpdate\n数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\n#### updated\n由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n\n当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\n\n#### beforeDestroy\n实例销毁之前调用。在这一步，实例仍然完全可用。\n\n#### destroyed\nVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习03-生命周期函数.md","raw":"---\ntitle: Vue学习03-生命周期函数\ncatalog: true\ndate: 2019-08-17 10:25:22\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### Vue生命周期 \n- created: 比如钩子可以用来在一个实例被创建之后执行代码：\n- mounted\n- updated\n- destroyed \n\n每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\n![](vueLifeLoop.jpg)\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n~~~ vue\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n~~~\n也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。\n\n###钩子函数的触发时机\n#### beforeCreate\n在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\n\n#### created\n实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n\n#### beforeMount\n在挂载开始之前被调用：相关的 render 函数首次被调用。\n\n#### mounted\nel 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。\n\n#### beforeUpdate\n数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\n#### updated\n由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n\n当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\n\n#### beforeDestroy\n实例销毁之前调用。在这一步，实例仍然完全可用。\n\n#### destroyed\nVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习03-生命周期函数","published":1,"updated":"2019-09-18T05:40:37.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oukscx0008yov0iu7vjenq","content":"<h1 id=\"vue学习记录\">Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3 id=\"vue生命周期\">Vue生命周期</h3>\n<ul>\n<li>created: 比如钩子可以用来在一个实例被创建之后执行代码：</li>\n<li>mounted</li>\n<li>updated</li>\n<li>destroyed</li>\n</ul>\n<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br>\n<img src=\"vueLifeLoop.jpg\" alt=\"\"><br>\n比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    // `this` 指向 vm 实例</span><br><span class=\"line\">    console.log(&apos;a is: &apos; + this.a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt; &quot;a is: 1&quot;</span><br></pre></td></tr></table></figure>\n<p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。<br>\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。</p>\n<p>###钩子函数的触发时机</p>\n<h4 id=\"beforecreate\">beforeCreate</h4>\n<p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>\n<h4 id=\"created\">created</h4>\n<p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>\n<h4 id=\"beforemount\">beforeMount</h4>\n<p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>\n<h4 id=\"mounted\">mounted</h4>\n<p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</p>\n<h4 id=\"beforeupdate\">beforeUpdate</h4>\n<p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h4 id=\"updated\">updated</h4>\n<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>\n<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p>\n<h4 id=\"beforedestroy\">beforeDestroy</h4>\n<p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>\n<h4 id=\"destroyed\">destroyed</h4>\n<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>\n<h2 id=\"参考资料\">参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3>Vue生命周期</h3>\n<ul>\n<li>created: 比如钩子可以用来在一个实例被创建之后执行代码：</li>\n<li>mounted</li>\n<li>updated</li>\n<li>destroyed</li>\n</ul>\n<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br>\n<img src=\"vueLifeLoop.jpg\" alt=\"\"><br>\n比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    // `this` 指向 vm 实例</span><br><span class=\"line\">    console.log(&apos;a is: &apos; + this.a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt; &quot;a is: 1&quot;</span><br></pre></td></tr></table></figure>\n<p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。<br>\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。</p>\n<p>###钩子函数的触发时机</p>\n<h4>beforeCreate</h4>\n<p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>\n<h4>created</h4>\n<p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>\n<h4>beforeMount</h4>\n<p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>\n<h4>mounted</h4>\n<p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</p>\n<h4>beforeUpdate</h4>\n<p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h4>updated</h4>\n<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>\n<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p>\n<h4>beforeDestroy</h4>\n<p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>\n<h4>destroyed</h4>\n<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"Vue学习02-Vue语法","catalog":true,"date":"2019-08-17T02:19:12.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue 语法\n- `v-if`\n~~~ vue\n    <div id=\"app\">\n      <p v-if=\"a === 'a'\">a</p>\n      <p v-if=\"a === 'b'\">b</p>\n      <p v-if=\"a === 'c'\">c</p>\n    </div>\n   <script>\n         var vm = new Vue({\n           el:\"#app\",\n           data:{\n             a: \"b\",\n           }\n         })\n   </script> \n~~~\n\n输出\n~~~ \nb\n~~~\n\n- `v-for`\n~~~ vue\n<div id=\"app\">\n      <ul>\n        <li v-for=\"item in items\">\n          {{item}}\n        </li>\n      </ul>\n    </div>\n\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          items: ['张三', '李四', '王麻子']\n        }\n      })\n    </script>\n~~~\n输出\n![](v-for.png)\n\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        methods: {\n          say: function (event){\n            alert(\"hello vue\")\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![](v-on.png)\n\n第二种\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          msg:\"hello vue[msg]\"\n        },\n        methods: {\n          say: function (event){\n            alert(this.msg)\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![](v-on1.png)\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习02-Vue语法.md","raw":"---\ntitle: Vue学习02-Vue语法\ncatalog: true\ndate: 2019-08-17 10:19:12\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue 语法\n- `v-if`\n~~~ vue\n    <div id=\"app\">\n      <p v-if=\"a === 'a'\">a</p>\n      <p v-if=\"a === 'b'\">b</p>\n      <p v-if=\"a === 'c'\">c</p>\n    </div>\n   <script>\n         var vm = new Vue({\n           el:\"#app\",\n           data:{\n             a: \"b\",\n           }\n         })\n   </script> \n~~~\n\n输出\n~~~ \nb\n~~~\n\n- `v-for`\n~~~ vue\n<div id=\"app\">\n      <ul>\n        <li v-for=\"item in items\">\n          {{item}}\n        </li>\n      </ul>\n    </div>\n\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          items: ['张三', '李四', '王麻子']\n        }\n      })\n    </script>\n~~~\n输出\n![](v-for.png)\n\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        methods: {\n          say: function (event){\n            alert(\"hello vue\")\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![](v-on.png)\n\n第二种\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          msg:\"hello vue[msg]\"\n        },\n        methods: {\n          say: function (event){\n            alert(this.msg)\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![](v-on1.png)\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习02-Vue语法","published":1,"updated":"2019-09-18T05:40:37.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ouksd20009yov0wuxeuyj4","content":"<h1 id=\"vue学习记录\">Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2 id=\"vue-语法\">Vue 语法</h2>\n<ul>\n<li><code>v-if</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;a&apos;&quot;&gt;a&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;b&apos;&quot;&gt;b&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;c&apos;&quot;&gt;c&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;b&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>v-for</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class=\"line\">          &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          items: [&apos;张三&apos;, &apos;李四&apos;, &apos;王麻子&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"v-for.png\" alt=\"\"></p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(&quot;hello vue&quot;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"v-on.png\" alt=\"\"></p>\n<p>第二种</p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          msg:&quot;hello vue[msg]&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(this.msg)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"v-on1.png\" alt=\"\"></p>\n<h2 id=\"参考资料\">参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>Vue 语法</h2>\n<ul>\n<li><code>v-if</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;a&apos;&quot;&gt;a&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;b&apos;&quot;&gt;b&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;c&apos;&quot;&gt;c&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;b&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>v-for</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class=\"line\">          &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          items: [&apos;张三&apos;, &apos;李四&apos;, &apos;王麻子&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"v-for.png\" alt=\"\"></p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(&quot;hello vue&quot;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"v-on.png\" alt=\"\"></p>\n<p>第二种</p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          msg:&quot;hello vue[msg]&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(this.msg)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"v-on1.png\" alt=\"\"></p>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"Vue学习03-生命4ue布局","catalog":true,"date":"2019-08-17T02:29:40.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习04-Vue布局.md","raw":"---\ntitle: Vue学习03-生命4ue布局\ncatalog: true\ndate: 2019-08-17 10:29:40\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习04-Vue布局","published":1,"updated":"2019-09-18T05:40:37.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ouksdc000byov0sfvlryan","content":"<h1 id=\"vue学习记录\">Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2 id=\"vue布局\">Vue布局</h2>\n<h3 id=\"表单输出\">表单输出</h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3 id=\"为什么要实现数据的双向绑定\">为什么要实现数据的双向绑定</h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3 id=\"在表单中使用双向数据绑定\">在表单中使用双向数据绑定</h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n<h2 id=\"参考资料\">参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>Vue布局</h2>\n<h3>表单输出</h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3>为什么要实现数据的双向绑定</h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3>在表单中使用双向数据绑定</h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"博客模板备注","catalog":true,"date":"2019-06-23T02:41:27.000Z","subtitle":null,"header-img":null,"_content":"\n~~~\ntitle: \"[Hexo] Theme HuWeihuang\"\ncatalog: true\ntoc_nav_num: true\ndate: 2017-09-18 10:51:24\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"/img/article_header/article_header.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\nupdateDate: 2018-12-23 22:26:24\ntop: 1\n~~~\n","source":"_posts/博客模板备注.md","raw":"---\ntitle: 博客模板备注\ncatalog: true\ndate: 2019-06-23 10:41:27\nsubtitle:\nheader-img:\ntags:\n---\n\n~~~\ntitle: \"[Hexo] Theme HuWeihuang\"\ncatalog: true\ntoc_nav_num: true\ndate: 2017-09-18 10:51:24\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"/img/article_header/article_header.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\nupdateDate: 2018-12-23 22:26:24\ntop: 1\n~~~\n","slug":"博客模板备注","published":1,"updated":"2019-09-18T05:40:37.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ouksdn000cyov09656z0qi","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &quot;[Hexo] Theme HuWeihuang&quot;</span><br><span class=\"line\">catalog: true</span><br><span class=\"line\">toc_nav_num: true</span><br><span class=\"line\">date: 2017-09-18 10:51:24</span><br><span class=\"line\">subtitle: &quot;This is hexo theme Demo.&quot;</span><br><span class=\"line\">header-img: &quot;/img/article_header/article_header.png&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">catagories:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">updateDate: 2018-12-23 22:26:24</span><br><span class=\"line\">top: 1</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &quot;[Hexo] Theme HuWeihuang&quot;</span><br><span class=\"line\">catalog: true</span><br><span class=\"line\">toc_nav_num: true</span><br><span class=\"line\">date: 2017-09-18 10:51:24</span><br><span class=\"line\">subtitle: &quot;This is hexo theme Demo.&quot;</span><br><span class=\"line\">header-img: &quot;/img/article_header/article_header.png&quot;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">catagories:</span><br><span class=\"line\">- Hexo</span><br><span class=\"line\">updateDate: 2018-12-23 22:26:24</span><br><span class=\"line\">top: 1</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue学习00-Vue学习之前需要了解的知识","catalog":true,"date":"2019-08-15T02:08:34.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 学习之前了解\n\n### 框架和库之间的区别\n- 框架: 是一套完整的解决方案, 对项目的侵入性教大.\n\n- 库(插件): 提供一个小的功能, 对项目侵入性笑.\n\n### 前端知识体系\n- html(结构层) 骨架\n- css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n    - css预处理器\n        - SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.\n        - LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.\n- JavaScript(行为层) 交互: 动起来,行为.\n\n### Native(原生的,本地的)JS开发\n原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n\nECMA欧洲电脑制造商协会（European Computer Manufactures Association）\n\n- ES3\n- ES4（内部，未正式发布）\n- ES5（全浏览器支持）\n- ES6（常用，当前主流版本） 相对于5增加了一些特性\n因为不同的标准所以前端可以使用打包工具来打包\n- ES7\n- ES8\n- ES9（草案阶段）.\n\n### TypeScript 微软的标准\nTypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）\n才能被浏览器正确执行。\n\n### js框架\n- jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；\n- Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；\n最大的缺点是版本迭代不合理（如：1代 -> 2代开发方式完全改变，除了名字，\n基本就是两个东西；截止发表博客时已推出了 Angular6）\n- React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；\n- Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）\n 和 React（虚拟 DOM） 的优点；\n    - SoC 关注度分离原则\n- Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以\n直接选择使用 jQuery 提供的 AJAX 通信功能；\n\n### UI框架\n- Ant-Design：阿里巴巴出品，基于 React 的 UI 框架\n- ElementUI：饿了么出品，基于 Vue 的 UI 框架\n- iview: 基于vue框架\n- ice: 飞冰\n- Bootstrap：Twitter 推出的一个用于前端开发的开源工具包\n- AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错\n\n> 前端一般采用`vue + element`框架\n\n### 工具\n- WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载\n通常前端 开发会用ES6标准写,然后用webpack打包\n- Gulp \n- Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript\n\n## 三端同一\n### 混合开发（Hybrid App）\n\n主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：\n\n.apk这种格式\n\n- 云打包：HBuild -> HBuildX，DCloud 出品；API Cloud\n- 本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台\n\n### 中间件\n软件调用中间件, 中间件调用底层硬件.\n\n### 微信小程序\n详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi\n\n## 当前主流前端框架\n### Vue.js\n### iView\niview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。\n\n官网地址\nGithub\niview-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多\n\n### ElementUI\nElement 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。\n\n官网地址\nGithub\nvue-element-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多\n\n### ICE\n飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。\n\n官网地址\nGithub\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段\n\n### VantUI\nVant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。\n\n官网地址\nGithub\n### AtUI\nat-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。\n\n官网地址\nGithub\n### CubeUI\ncube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。\n\n官网地址\nGithub\n### 混合开发\n### Flutter\nFlutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。\n\n官网地址\nGithub\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架\n\n### Ionic\nIonic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。\n\n官网地址\n官网文档\nGithub\n### 微信小程序\n### mpvue\nmpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。\n\n官网地址\nGithub\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用\n\n### WeUI\nWeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。\n\n官网地址\nGithub\n\n## 后端技术\n前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。\n\nNodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno\n\n既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：\n\n- Express：NodeJS 框架\n- Koa：Express 简化版\n- NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖\n- YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n    - Gradle和maven一样但效率更高\n\n## 前后分离的演变史\n### 为什么需要前后分离\n### 后端为主的 MVC 时代\n为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】\n![](mvc.png)\n\n### 什么是前后分离\n#### 基于 AJAX 带来的 SPA 时代\n时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript\n 和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，\n 于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA\n （Single Page Application）单页面应用时代。\n\n![](web.png)\n\n### 前端为主的 MV* 时代\n此处的 MV* 模式如下：\n\nMVC（同步通信为主）：Model、View、Controller\nMVP（异步通信为主）：Model、View、Presenter\nMVVM（异步通信为主）：Model、View、ViewModel\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、\nControllers、Models，然后再在层内做切分，如下图：\n\n优点\n- 前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。\n- 前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。\n- 部署相对独立： 可以快速改进产品体验\n\n缺点\n- 代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。\n- 全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。\n- 性能并非最佳，特别是移动互联网环境下。\n- SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.\n\n### NodeJS 带来的(前端)全栈时代\n前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：\n\nfront-end -> nodejs -> back-end 实现了真正的前后分离\n\n在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：\n- Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，\nHTML 的生成也可以放在这层，具体看应用场景。\n- Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，\n转而可以专心于业务逻辑层的开发。\n\n**注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。**\n\n## MVVM模式\n什么是 MVVM\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF） \n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的**事件驱动编程方式**。由 John Gossman\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。\n\nMVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）\n 模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，\n 其作用如下：\n\n- 该层向上与视图层进行双向数据绑定\n- 向下与 Model 层通过接口请求进行数据交互\n\n![](mvvm.png)\n\n## 为什么要使用 MVVM\nMVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处\n\n- 低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。\n- 可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。\n- 独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n- 可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。\n\nMVVM 的组成部分\n\n\n### View\nView 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。\n\n### Model\nModel 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则\n\n### ViewModel\nViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。\n\n需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的\n\n比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。\n\n- MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。\n- View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。\n\n### MVVM 模式的实现者\n我们知道MVVM 表示如下：\n\n- Model：模型层，在这里表示 JavaScript 对象\n- View：视图层，在这里表示 DOM（HTML 操作的元素）\n- ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者\n\n![](mvvmVue.png)\n\n在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者\n\n- ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新\n- ViewModel 能够监听到视图的变化，并能够通知数据发生改变\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n\n","source":"_posts/Vue学习00-Vue学习之前需要了解的知识.md","raw":"---\ntitle: Vue学习00-Vue学习之前需要了解的知识\ncatalog: true\ndate: 2019-08-15 10:08:34\nsubtitle:\nheader-img:\ntags: [Vue, webpack, npm]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 学习之前了解\n\n### 框架和库之间的区别\n- 框架: 是一套完整的解决方案, 对项目的侵入性教大.\n\n- 库(插件): 提供一个小的功能, 对项目侵入性笑.\n\n### 前端知识体系\n- html(结构层) 骨架\n- css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n    - css预处理器\n        - SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.\n        - LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.\n- JavaScript(行为层) 交互: 动起来,行为.\n\n### Native(原生的,本地的)JS开发\n原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n\nECMA欧洲电脑制造商协会（European Computer Manufactures Association）\n\n- ES3\n- ES4（内部，未正式发布）\n- ES5（全浏览器支持）\n- ES6（常用，当前主流版本） 相对于5增加了一些特性\n因为不同的标准所以前端可以使用打包工具来打包\n- ES7\n- ES8\n- ES9（草案阶段）.\n\n### TypeScript 微软的标准\nTypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）\n才能被浏览器正确执行。\n\n### js框架\n- jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；\n- Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；\n最大的缺点是版本迭代不合理（如：1代 -> 2代开发方式完全改变，除了名字，\n基本就是两个东西；截止发表博客时已推出了 Angular6）\n- React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；\n- Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）\n 和 React（虚拟 DOM） 的优点；\n    - SoC 关注度分离原则\n- Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以\n直接选择使用 jQuery 提供的 AJAX 通信功能；\n\n### UI框架\n- Ant-Design：阿里巴巴出品，基于 React 的 UI 框架\n- ElementUI：饿了么出品，基于 Vue 的 UI 框架\n- iview: 基于vue框架\n- ice: 飞冰\n- Bootstrap：Twitter 推出的一个用于前端开发的开源工具包\n- AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错\n\n> 前端一般采用`vue + element`框架\n\n### 工具\n- WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载\n通常前端 开发会用ES6标准写,然后用webpack打包\n- Gulp \n- Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript\n\n## 三端同一\n### 混合开发（Hybrid App）\n\n主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：\n\n.apk这种格式\n\n- 云打包：HBuild -> HBuildX，DCloud 出品；API Cloud\n- 本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台\n\n### 中间件\n软件调用中间件, 中间件调用底层硬件.\n\n### 微信小程序\n详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi\n\n## 当前主流前端框架\n### Vue.js\n### iView\niview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。\n\n官网地址\nGithub\niview-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多\n\n### ElementUI\nElement 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。\n\n官网地址\nGithub\nvue-element-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多\n\n### ICE\n飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。\n\n官网地址\nGithub\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段\n\n### VantUI\nVant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。\n\n官网地址\nGithub\n### AtUI\nat-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。\n\n官网地址\nGithub\n### CubeUI\ncube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。\n\n官网地址\nGithub\n### 混合开发\n### Flutter\nFlutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。\n\n官网地址\nGithub\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架\n\n### Ionic\nIonic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。\n\n官网地址\n官网文档\nGithub\n### 微信小程序\n### mpvue\nmpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。\n\n官网地址\nGithub\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用\n\n### WeUI\nWeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。\n\n官网地址\nGithub\n\n## 后端技术\n前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。\n\nNodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno\n\n既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：\n\n- Express：NodeJS 框架\n- Koa：Express 简化版\n- NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖\n- YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n    - Gradle和maven一样但效率更高\n\n## 前后分离的演变史\n### 为什么需要前后分离\n### 后端为主的 MVC 时代\n为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】\n![](mvc.png)\n\n### 什么是前后分离\n#### 基于 AJAX 带来的 SPA 时代\n时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript\n 和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，\n 于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA\n （Single Page Application）单页面应用时代。\n\n![](web.png)\n\n### 前端为主的 MV* 时代\n此处的 MV* 模式如下：\n\nMVC（同步通信为主）：Model、View、Controller\nMVP（异步通信为主）：Model、View、Presenter\nMVVM（异步通信为主）：Model、View、ViewModel\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、\nControllers、Models，然后再在层内做切分，如下图：\n\n优点\n- 前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。\n- 前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。\n- 部署相对独立： 可以快速改进产品体验\n\n缺点\n- 代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。\n- 全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。\n- 性能并非最佳，特别是移动互联网环境下。\n- SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.\n\n### NodeJS 带来的(前端)全栈时代\n前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：\n\nfront-end -> nodejs -> back-end 实现了真正的前后分离\n\n在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：\n- Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，\nHTML 的生成也可以放在这层，具体看应用场景。\n- Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，\n转而可以专心于业务逻辑层的开发。\n\n**注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。**\n\n## MVVM模式\n什么是 MVVM\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF） \n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的**事件驱动编程方式**。由 John Gossman\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。\n\nMVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）\n 模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，\n 其作用如下：\n\n- 该层向上与视图层进行双向数据绑定\n- 向下与 Model 层通过接口请求进行数据交互\n\n![](mvvm.png)\n\n## 为什么要使用 MVVM\nMVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处\n\n- 低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。\n- 可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。\n- 独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n- 可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。\n\nMVVM 的组成部分\n\n\n### View\nView 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。\n\n### Model\nModel 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则\n\n### ViewModel\nViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。\n\n需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的\n\n比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。\n\n- MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。\n- View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。\n\n### MVVM 模式的实现者\n我们知道MVVM 表示如下：\n\n- Model：模型层，在这里表示 JavaScript 对象\n- View：视图层，在这里表示 DOM（HTML 操作的元素）\n- ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者\n\n![](mvvmVue.png)\n\n在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者\n\n- ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新\n- ViewModel 能够监听到视图的变化，并能够通知数据发生改变\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n\n","slug":"Vue学习00-Vue学习之前需要了解的知识","published":1,"updated":"2019-09-18T05:40:37.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0ouksgi000qyov0btav6gwp","content":"<h1 id=\"vue学习记录\">Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2 id=\"学习之前了解\">学习之前了解</h2>\n<h3 id=\"框架和库之间的区别\">框架和库之间的区别</h3>\n<ul>\n<li>\n<p>框架: 是一套完整的解决方案, 对项目的侵入性教大.</p>\n</li>\n<li>\n<p>库(插件): 提供一个小的功能, 对项目侵入性笑.</p>\n</li>\n</ul>\n<h3 id=\"前端知识体系\">前端知识体系</h3>\n<ul>\n<li>html(结构层) 骨架</li>\n<li>css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n<ul>\n<li>css预处理器\n<ul>\n<li>SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.</li>\n<li>LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JavaScript(行为层) 交互: 动起来,行为.</li>\n</ul>\n<h3 id=\"native原生的本地的js开发\">Native(原生的,本地的)JS开发</h3>\n<p>原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：</p>\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n<p>ECMA欧洲电脑制造商协会（European Computer Manufactures Association）</p>\n<ul>\n<li>ES3</li>\n<li>ES4（内部，未正式发布）</li>\n<li>ES5（全浏览器支持）</li>\n<li>ES6（常用，当前主流版本） 相对于5增加了一些特性<br>\n因为不同的标准所以前端可以使用打包工具来打包</li>\n<li>ES7</li>\n<li>ES8</li>\n<li>ES9（草案阶段）.</li>\n</ul>\n<h3 id=\"typescript-微软的标准\">TypeScript 微软的标准</h3>\n<p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，<br>\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格<br>\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。<br>\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，<br>\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）<br>\n才能被浏览器正确执行。</p>\n<h3 id=\"js框架\">js框架</h3>\n<ul>\n<li>jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，<br>\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；</li>\n<li>Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点<br>\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，<br>\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；<br>\n最大的缺点是版本迭代不合理（如：1代 -&gt; 2代开发方式完全改变，除了名字，<br>\n基本就是两个东西；截止发表博客时已推出了 Angular6）</li>\n<li>React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了<br>\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，<br>\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；</li>\n<li>Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，<br>\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）<br>\n和 React（虚拟 DOM） 的优点；\n<ul>\n<li>SoC 关注度分离原则</li>\n</ul>\n</li>\n<li>Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并<br>\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以<br>\n直接选择使用 jQuery 提供的 AJAX 通信功能；</li>\n</ul>\n<h3 id=\"ui框架\">UI框架</h3>\n<ul>\n<li>Ant-Design：阿里巴巴出品，基于 React 的 UI 框架</li>\n<li>ElementUI：饿了么出品，基于 Vue 的 UI 框架</li>\n<li>iview: 基于vue框架</li>\n<li>ice: 飞冰</li>\n<li>Bootstrap：Twitter 推出的一个用于前端开发的开源工具包</li>\n<li>AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错</li>\n</ul>\n<blockquote>\n<p>前端一般采用<code>vue + element</code>框架</p>\n</blockquote>\n<h3 id=\"工具\">工具</h3>\n<ul>\n<li>WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载<br>\n通常前端 开发会用ES6标准写,然后用webpack打包</li>\n<li>Gulp</li>\n<li>Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript</li>\n</ul>\n<h2 id=\"三端同一\">三端同一</h2>\n<h3 id=\"混合开发hybrid-app\">混合开发（Hybrid App）</h3>\n<p>主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p>\n<p>.apk这种格式</p>\n<ul>\n<li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li>\n<li>本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台</li>\n</ul>\n<h3 id=\"中间件\">中间件</h3>\n<p>软件调用中间件, 中间件调用底层硬件.</p>\n<h3 id=\"微信小程序\">微信小程序</h3>\n<p>详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi</p>\n<h2 id=\"当前主流前端框架\">当前主流前端框架</h2>\n<h3 id=\"vuejs\">Vue.js</h3>\n<h3 id=\"iview\">iView</h3>\n<p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。</p>\n<p>官网地址<br>\nGithub<br>\niview-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</p>\n<h3 id=\"elementui\">ElementUI</h3>\n<p>Element 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。</p>\n<p>官网地址<br>\nGithub<br>\nvue-element-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多</p>\n<h3 id=\"ice\">ICE</h3>\n<p>飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。</p>\n<p>官网地址<br>\nGithub<br>\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段</p>\n<h3 id=\"vantui\">VantUI</h3>\n<p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。</p>\n<p>官网地址<br>\nGithub</p>\n<h3 id=\"atui\">AtUI</h3>\n<p>at-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。</p>\n<p>官网地址<br>\nGithub</p>\n<h3 id=\"cubeui\">CubeUI</h3>\n<p>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p>\n<p>官网地址<br>\nGithub</p>\n<h3 id=\"混合开发\">混合开发</h3>\n<h3 id=\"flutter\">Flutter</h3>\n<p>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。</p>\n<p>官网地址<br>\nGithub<br>\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架</p>\n<h3 id=\"ionic\">Ionic</h3>\n<p>Ionic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。</p>\n<p>官网地址<br>\n官网文档<br>\nGithub</p>\n<h3 id=\"微信小程序\">微信小程序</h3>\n<h3 id=\"mpvue\">mpvue</h3>\n<p>mpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。</p>\n<p>官网地址<br>\nGithub<br>\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</p>\n<h3 id=\"weui\">WeUI</h3>\n<p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。</p>\n<p>官网地址<br>\nGithub</p>\n<h2 id=\"后端技术\">后端技术</h2>\n<p>前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。</p>\n<p>NodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno</p>\n<p>既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：</p>\n<ul>\n<li>Express：NodeJS 框架</li>\n<li>Koa：Express 简化版</li>\n<li>NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖</li>\n<li>YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n<ul>\n<li>Gradle和maven一样但效率更高</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前后分离的演变史\">前后分离的演变史</h2>\n<h3 id=\"为什么需要前后分离\">为什么需要前后分离</h3>\n<h3 id=\"后端为主的-mvc-时代\">后端为主的 MVC 时代</h3>\n<p>为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，<br>\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】<br>\n<img src=\"mvc.png\" alt=\"\"></p>\n<h3 id=\"什么是前后分离\">什么是前后分离</h3>\n<h4 id=\"基于-ajax-带来的-spa-时代\">基于 AJAX 带来的 SPA 时代</h4>\n<p>时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript<br>\n和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，<br>\n于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA<br>\n（Single Page Application）单页面应用时代。</p>\n<p><img src=\"web.png\" alt=\"\"></p>\n<h3 id=\"前端为主的-mv-时代\">前端为主的 MV* 时代</h3>\n<p>此处的 MV* 模式如下：</p>\n<p>MVC（同步通信为主）：Model、View、Controller<br>\nMVP（异步通信为主）：Model、View、Presenter<br>\nMVVM（异步通信为主）：Model、View、ViewModel<br>\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、<br>\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、<br>\nControllers、Models，然后再在层内做切分，如下图：</p>\n<p>优点</p>\n<ul>\n<li>前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。</li>\n<li>前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。</li>\n<li>部署相对独立： 可以快速改进产品体验</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li>\n<li>全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。</li>\n<li>性能并非最佳，特别是移动互联网环境下。</li>\n<li>SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.</li>\n</ul>\n<h3 id=\"nodejs-带来的前端全栈时代\">NodeJS 带来的(前端)全栈时代</h3>\n<p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，<br>\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p>\n<p>front-end -&gt; nodejs -&gt; back-end 实现了真正的前后分离</p>\n<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p>\n<ul>\n<li>Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，<br>\nHTML 的生成也可以放在这层，具体看应用场景。</li>\n<li>Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，<br>\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，<br>\n转而可以专心于业务逻辑层的开发。</li>\n</ul>\n<p><strong>注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学<br>\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。</strong></p>\n<h2 id=\"mvvm模式\">MVVM模式</h2>\n<p>什么是 MVVM<br>\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个<br>\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF）<br>\n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由 John Gossman<br>\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。</p>\n<p>MVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）<br>\n模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，<br>\n其作用如下：</p>\n<ul>\n<li>该层向上与视图层进行双向数据绑定</li>\n<li>向下与 Model 层通过接口请求进行数据交互</li>\n</ul>\n<p><img src=\"mvvm.png\" alt=\"\"></p>\n<h2 id=\"为什么要使用-mvvm\">为什么要使用 MVVM</h2>\n<p>MVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p>\n<ul>\n<li>低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，<br>\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>\n<li>可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>\n<li>独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li>\n</ul>\n<p>MVVM 的组成部分</p>\n<h3 id=\"view\">View</h3>\n<p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。</p>\n<h3 id=\"model\">Model</h3>\n<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则</p>\n<h3 id=\"viewmodel\">ViewModel</h3>\n<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p>\n<p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的</p>\n<p>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）<br>\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）<br>\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。</p>\n<ul>\n<li>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。</li>\n<li>View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</li>\n</ul>\n<h3 id=\"mvvm-模式的实现者\">MVVM 模式的实现者</h3>\n<p>我们知道MVVM 表示如下：</p>\n<ul>\n<li>Model：模型层，在这里表示 JavaScript 对象</li>\n<li>View：视图层，在这里表示 DOM（HTML 操作的元素）</li>\n<li>ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者</li>\n</ul>\n<p><img src=\"mvvmVue.png\" alt=\"\"></p>\n<p>在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者</p>\n<ul>\n<li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li>\n<li>ViewModel 能够监听到视图的变化，并能够通知数据发生改变<br>\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定</li>\n</ul>\n<h2 id=\"参考资料\">参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>学习之前了解</h2>\n<h3>框架和库之间的区别</h3>\n<ul>\n<li>\n<p>框架: 是一套完整的解决方案, 对项目的侵入性教大.</p>\n</li>\n<li>\n<p>库(插件): 提供一个小的功能, 对项目侵入性笑.</p>\n</li>\n</ul>\n<h3>前端知识体系</h3>\n<ul>\n<li>html(结构层) 骨架</li>\n<li>css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n<ul>\n<li>css预处理器\n<ul>\n<li>SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.</li>\n<li>LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JavaScript(行为层) 交互: 动起来,行为.</li>\n</ul>\n<h3>Native(原生的,本地的)JS开发</h3>\n<p>原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：</p>\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n<p>ECMA欧洲电脑制造商协会（European Computer Manufactures Association）</p>\n<ul>\n<li>ES3</li>\n<li>ES4（内部，未正式发布）</li>\n<li>ES5（全浏览器支持）</li>\n<li>ES6（常用，当前主流版本） 相对于5增加了一些特性<br>\n因为不同的标准所以前端可以使用打包工具来打包</li>\n<li>ES7</li>\n<li>ES8</li>\n<li>ES9（草案阶段）.</li>\n</ul>\n<h3>TypeScript 微软的标准</h3>\n<p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，<br>\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格<br>\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。<br>\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，<br>\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）<br>\n才能被浏览器正确执行。</p>\n<h3>js框架</h3>\n<ul>\n<li>jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，<br>\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；</li>\n<li>Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点<br>\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，<br>\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；<br>\n最大的缺点是版本迭代不合理（如：1代 -&gt; 2代开发方式完全改变，除了名字，<br>\n基本就是两个东西；截止发表博客时已推出了 Angular6）</li>\n<li>React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了<br>\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，<br>\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；</li>\n<li>Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，<br>\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）<br>\n和 React（虚拟 DOM） 的优点；\n<ul>\n<li>SoC 关注度分离原则</li>\n</ul>\n</li>\n<li>Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并<br>\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以<br>\n直接选择使用 jQuery 提供的 AJAX 通信功能；</li>\n</ul>\n<h3>UI框架</h3>\n<ul>\n<li>Ant-Design：阿里巴巴出品，基于 React 的 UI 框架</li>\n<li>ElementUI：饿了么出品，基于 Vue 的 UI 框架</li>\n<li>iview: 基于vue框架</li>\n<li>ice: 飞冰</li>\n<li>Bootstrap：Twitter 推出的一个用于前端开发的开源工具包</li>\n<li>AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错</li>\n</ul>\n<blockquote>\n<p>前端一般采用<code>vue + element</code>框架</p>\n</blockquote>\n<h3>工具</h3>\n<ul>\n<li>WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载<br>\n通常前端 开发会用ES6标准写,然后用webpack打包</li>\n<li>Gulp</li>\n<li>Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript</li>\n</ul>\n<h2>三端同一</h2>\n<h3>混合开发（Hybrid App）</h3>\n<p>主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p>\n<p>.apk这种格式</p>\n<ul>\n<li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li>\n<li>本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台</li>\n</ul>\n<h3>中间件</h3>\n<p>软件调用中间件, 中间件调用底层硬件.</p>\n<h3>微信小程序</h3>\n<p>详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi</p>\n<h2>当前主流前端框架</h2>\n<h3>Vue.js</h3>\n<h3>iView</h3>\n<p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。</p>\n<p>官网地址<br>\nGithub<br>\niview-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</p>\n<h3>ElementUI</h3>\n<p>Element 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。</p>\n<p>官网地址<br>\nGithub<br>\nvue-element-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多</p>\n<h3>ICE</h3>\n<p>飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。</p>\n<p>官网地址<br>\nGithub<br>\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段</p>\n<h3>VantUI</h3>\n<p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。</p>\n<p>官网地址<br>\nGithub</p>\n<h3>AtUI</h3>\n<p>at-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。</p>\n<p>官网地址<br>\nGithub</p>\n<h3>CubeUI</h3>\n<p>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p>\n<p>官网地址<br>\nGithub</p>\n<h3>混合开发</h3>\n<h3>Flutter</h3>\n<p>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。</p>\n<p>官网地址<br>\nGithub<br>\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架</p>\n<h3>Ionic</h3>\n<p>Ionic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。</p>\n<p>官网地址<br>\n官网文档<br>\nGithub</p>\n<h3>微信小程序</h3>\n<h3>mpvue</h3>\n<p>mpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。</p>\n<p>官网地址<br>\nGithub<br>\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</p>\n<h3>WeUI</h3>\n<p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。</p>\n<p>官网地址<br>\nGithub</p>\n<h2>后端技术</h2>\n<p>前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。</p>\n<p>NodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno</p>\n<p>既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：</p>\n<ul>\n<li>Express：NodeJS 框架</li>\n<li>Koa：Express 简化版</li>\n<li>NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖</li>\n<li>YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n<ul>\n<li>Gradle和maven一样但效率更高</li>\n</ul>\n</li>\n</ul>\n<h2>前后分离的演变史</h2>\n<h3>为什么需要前后分离</h3>\n<h3>后端为主的 MVC 时代</h3>\n<p>为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，<br>\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】<br>\n<img src=\"mvc.png\" alt=\"\"></p>\n<h3>什么是前后分离</h3>\n<h4>基于 AJAX 带来的 SPA 时代</h4>\n<p>时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript<br>\n和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，<br>\n于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA<br>\n（Single Page Application）单页面应用时代。</p>\n<p><img src=\"web.png\" alt=\"\"></p>\n<h3>前端为主的 MV* 时代</h3>\n<p>此处的 MV* 模式如下：</p>\n<p>MVC（同步通信为主）：Model、View、Controller<br>\nMVP（异步通信为主）：Model、View、Presenter<br>\nMVVM（异步通信为主）：Model、View、ViewModel<br>\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、<br>\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、<br>\nControllers、Models，然后再在层内做切分，如下图：</p>\n<p>优点</p>\n<ul>\n<li>前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。</li>\n<li>前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。</li>\n<li>部署相对独立： 可以快速改进产品体验</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li>\n<li>全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。</li>\n<li>性能并非最佳，特别是移动互联网环境下。</li>\n<li>SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.</li>\n</ul>\n<h3>NodeJS 带来的(前端)全栈时代</h3>\n<p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，<br>\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p>\n<p>front-end -&gt; nodejs -&gt; back-end 实现了真正的前后分离</p>\n<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p>\n<ul>\n<li>Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，<br>\nHTML 的生成也可以放在这层，具体看应用场景。</li>\n<li>Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，<br>\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，<br>\n转而可以专心于业务逻辑层的开发。</li>\n</ul>\n<p><strong>注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学<br>\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。</strong></p>\n<h2>MVVM模式</h2>\n<p>什么是 MVVM<br>\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个<br>\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF）<br>\n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由 John Gossman<br>\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。</p>\n<p>MVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）<br>\n模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，<br>\n其作用如下：</p>\n<ul>\n<li>该层向上与视图层进行双向数据绑定</li>\n<li>向下与 Model 层通过接口请求进行数据交互</li>\n</ul>\n<p><img src=\"mvvm.png\" alt=\"\"></p>\n<h2>为什么要使用 MVVM</h2>\n<p>MVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p>\n<ul>\n<li>低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，<br>\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>\n<li>可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>\n<li>独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li>\n</ul>\n<p>MVVM 的组成部分</p>\n<h3>View</h3>\n<p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。</p>\n<h3>Model</h3>\n<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则</p>\n<h3>ViewModel</h3>\n<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p>\n<p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的</p>\n<p>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）<br>\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）<br>\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。</p>\n<ul>\n<li>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。</li>\n<li>View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</li>\n</ul>\n<h3>MVVM 模式的实现者</h3>\n<p>我们知道MVVM 表示如下：</p>\n<ul>\n<li>Model：模型层，在这里表示 JavaScript 对象</li>\n<li>View：视图层，在这里表示 DOM（HTML 操作的元素）</li>\n<li>ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者</li>\n</ul>\n<p><img src=\"mvvmVue.png\" alt=\"\"></p>\n<p>在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者</p>\n<ul>\n<li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li>\n<li>ViewModel 能够监听到视图的变化，并能够通知数据发生改变<br>\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定</li>\n</ul>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/Axios学习01-实现异步通信/axios.png","post":"ck0ouksbl0001yov0lo3r50qz","slug":"axios.png","modified":1,"renderable":1},{"_id":"source/_posts/Axios学习02-跨域通信/Access.png","post":"ck0ouksc60003yov0e0g9fuqm","slug":"Access.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习01-安装及使用/dataDriver.png","post":"ck0ouksco0006yov05io0bzb4","slug":"dataDriver.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习03-生命周期函数/vueLifeLoop.jpg","slug":"vueLifeLoop.jpg","post":"ck0oukscx0008yov0iu7vjenq","modified":1,"renderable":0},{"_id":"source/_posts/Vue学习02-Vue语法/v-for.png","post":"ck0ouksd20009yov0wuxeuyj4","slug":"v-for.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习02-Vue语法/v-on.png","post":"ck0ouksd20009yov0wuxeuyj4","slug":"v-on.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习02-Vue语法/v-on1.png","post":"ck0ouksd20009yov0wuxeuyj4","slug":"v-on1.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvc.png","post":"ck0ouksgi000qyov0btav6gwp","slug":"mvc.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvm.png","post":"ck0ouksgi000qyov0btav6gwp","slug":"mvvm.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvmVue.png","post":"ck0ouksgi000qyov0btav6gwp","slug":"mvvmVue.png","modified":1,"renderable":1},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/web.png","post":"ck0ouksgi000qyov0btav6gwp","slug":"web.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ck0ouksdc000byov0sfvlryan","tag_id":"ck0ouksd6000ayov0nqzo0xyc","_id":"ck0ouksdx000eyov09hk1ltut"},{"post_id":"ck0ouksbl0001yov0lo3r50qz","tag_id":"ck0ouksch0005yov0fx8allvm","_id":"ck0oukse0000fyov0t7wwcx8z"},{"post_id":"ck0ouksbl0001yov0lo3r50qz","tag_id":"ck0ouksd6000ayov0nqzo0xyc","_id":"ck0oukse6000hyov0afixvryc"},{"post_id":"ck0ouksc60003yov0e0g9fuqm","tag_id":"ck0ouksch0005yov0fx8allvm","_id":"ck0oukse9000jyov0e5m9wuv3"},{"post_id":"ck0ouksc60003yov0e0g9fuqm","tag_id":"ck0ouksd6000ayov0nqzo0xyc","_id":"ck0oukse9000kyov0vqe2uyww"},{"post_id":"ck0ouksco0006yov05io0bzb4","tag_id":"ck0ouksd6000ayov0nqzo0xyc","_id":"ck0oukseb000myov0hf4ey78v"},{"post_id":"ck0oukscx0008yov0iu7vjenq","tag_id":"ck0ouksd6000ayov0nqzo0xyc","_id":"ck0ouksee000oyov0i43pi1m0"},{"post_id":"ck0ouksd20009yov0wuxeuyj4","tag_id":"ck0ouksd6000ayov0nqzo0xyc","_id":"ck0ouksef000pyov0px1e9d3l"},{"post_id":"ck0ouksgi000qyov0btav6gwp","tag_id":"ck0ouksd6000ayov0nqzo0xyc","_id":"ck0ouksgr000tyov0ejcp8px4"},{"post_id":"ck0ouksgi000qyov0btav6gwp","tag_id":"ck0ouksgn000ryov0oeh2p5gi","_id":"ck0ouksgt000uyov0fh1dfyz9"},{"post_id":"ck0ouksgi000qyov0btav6gwp","tag_id":"ck0ouksgp000syov0kbsv24v0","_id":"ck0ouksgu000vyov0ilwdcl3l"}],"Tag":[{"name":"Axios","_id":"ck0ouksch0005yov0fx8allvm"},{"name":"Vue","_id":"ck0ouksd6000ayov0nqzo0xyc"},{"name":"webpack","_id":"ck0ouksgn000ryov0oeh2p5gi"},{"name":"npm","_id":"ck0ouksgp000syov0kbsv24v0"}]}}