{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/me.png","path":"img/me.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/analytics.js","path":"js/analytics.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/anchor.min.js","path":"js/anchor.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/buttons.js","path":"js/buttons.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/fastclick.min.js","path":"js/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/html5shiv.js","path":"js/html5shiv.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/respond.min.js","path":"js/respond.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.jpg","path":"img/header_img/tag.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"3104638f109df638da99c78aed17dafd88850585","modified":1618925290224},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1618925290224},{"_id":"themes/beantech/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1618925290314},{"_id":"themes/beantech/_config.yml","hash":"f0796b8e85fe6b3154a5fa442420003fe18dff0a","modified":1618925290314},{"_id":"source/_posts/Axios学习1-实现异步通信.md","hash":"f363ef1ea432289849c055a61c3f678b6dd66dcf","modified":1618925290225},{"_id":"source/_posts/Axios学习2-跨域通信.md","hash":"49de1f6fc365b793a91cface947be3c419d33c78","modified":1618925290225},{"_id":"source/_posts/Brook科学上网必备.md","hash":"229fa3a806f9f0db5c03e1893be7b8818cbbc09d","modified":1618925290226},{"_id":"source/_posts/Docker-Registry学习1-Docker部署镜像.md","hash":"e3c17f121e86bd9c0cd3ed6f6e3df94da89b38b3","modified":1618925290237},{"_id":"source/_posts/Docker-Registry学习2-简介与安装.md","hash":"e8c486190979b3b94afaabbb47111ceecf291612","modified":1618925290238},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端.md","hash":"3b9a9e64815b2f99351a3ff51778a8c93812b371","modified":1618925290238},{"_id":"source/_posts/Docker学习1-Docker是什么.md","hash":"81fe6b856b3e88e8fe35ed17169859262f8df4d4","modified":1618925290240},{"_id":"source/_posts/Docker学习10-部署数据库.md","hash":"118dd585283248b87a5b3ea72fe0d015add990bc","modified":1618925290240},{"_id":"source/_posts/Docker学习11-部署项目到容器.md","hash":"59c204795f37ba5c6e90796713659f1db54f840e","modified":1618925290241},{"_id":"source/_posts/Docker学习12-Docker-Compose-介绍.md","hash":"74dd1a57bf7fdaa6d61608ce583ff082687cd281","modified":1618925290248},{"_id":"source/_posts/Docker学习13-Docker-Compose-安装与卸载.md","hash":"51fcb996f1a67ad8d4992502d015fc66a7a34952","modified":1618925290248},{"_id":"source/_posts/Docker学习15-Docker-Compose-模板文件.md","hash":"abef78afd95208e3b9115072d0eed8e63974f4a1","modified":1618925290249},{"_id":"source/_posts/Docker学习16-Docker-Compose-命令说明.md","hash":"fb47f4e6423b4ad5408009c9b5b07b805ceeefec","modified":1618925290249},{"_id":"source/_posts/Docker学习17-Docker-Compose-部署项目到容器.md","hash":"d6fa041696ee56aa9265137fffbef67cbbe328e6","modified":1618925290250},{"_id":"source/_posts/Docker学习14-Docker-Compose-的使用.md","hash":"bf961c6befb98034899a3a0b8017de2162ad0327","modified":1618925290249},{"_id":"source/_posts/Docker学习2-Docker镜像加速器.md","hash":"027dc48ce5fcb9a558b1fbf75f16ef3b9f9f6495","modified":1618925290253},{"_id":"source/_posts/Docker学习5-Docker基本指令.md","hash":"cb0920bb7211ca7fd3ba5c7b69be71aa83a412ec","modified":1618925290253},{"_id":"source/_posts/Docker学习18-Docker-Compose-YAML配置文件语言.md","hash":"0c9ed800e81e1e5e1e64e3dc3aea3f5c0e1344e7","modified":1618925290253},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像1.md","hash":"bce809e9862cdec23d8b8e4d1f9e433182a779e2","modified":1618925290255},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像3.md","hash":"da70ba4fa0c54454d0fb44b329838485f881fc00","modified":1618925290257},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解.md","hash":"b6fbc9d36db4e165680de9cad5384919df535941","modified":1618925290257},{"_id":"source/_posts/Docker学习7-Docker容器.md","hash":"7691f02db304e237aff85c938e1b5bba953c504d","modified":1618925290258},{"_id":"source/_posts/Docker学习8-Docker仓库1-Docker-Hub.md","hash":"c8aefce08e30d11797e6d2ddc2011340e4a38f42","modified":1618925290259},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像2.md","hash":"3ed2929864d33d1ad7fb0d2287f51700ef643970","modified":1618925290256},{"_id":"source/_posts/Docker学习8-Docker仓库2-私有仓库.md","hash":"607275d7e2238543147bf1679587a816d4260135","modified":1618925290259},{"_id":"source/_posts/Docker学习9-Docker数据卷.md","hash":"f69da4ab1681cbf39ed4d3bce65b2849f403e954","modified":1618925290259},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS.md","hash":"2eb3e552b6e1e35f5b6e67d0e60f94078982daf8","modified":1618925290260},{"_id":"source/_posts/GitLab学习1-使用git托管代码.md","hash":"b3af7e73bea00c352e9a516b4676f3bf2e37e2e7","modified":1618925290262},{"_id":"source/_posts/GitLab学习2-GitLab的使用.md","hash":"3712aadbee0b4b741f5e1090d36f36ccbb4a9a0e","modified":1618925290262},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装.md","hash":"a04c2396b23811a226ccd76f34983417485850f4","modified":1618925290263},{"_id":"source/_posts/Nexus学习2-Maven仓库介绍.md","hash":"05f8720f5ad6fc9a4df5739a566fd79fddf3ff3e","modified":1618925290265},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库.md","hash":"6a45696b0d9ea105e944335289d225ff497163f1","modified":1618925290266},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识.md","hash":"9a485b0f194bc33d122b239e5bf3a8e186a8bb00","modified":1618925290282},{"_id":"source/_posts/Vue学习01-安装及使用.md","hash":"ebd7089e0dca3c197c78f7b2e4707e82fef04677","modified":1618925290283},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1.md","hash":"604490c3ab0aa68667ab0366ce28b22cd2926a73","modified":1618925290268},{"_id":"source/_posts/Vue学习02-Vue语法.md","hash":"e4c7d20262e54260d115838c0e936844d7cd1286","modified":1618925290284},{"_id":"source/_posts/Vue学习03-生命周期函数.md","hash":"dd12da615d897ffff50c5e358cabc51e34d90536","modified":1618925290284},{"_id":"source/_posts/Vue学习04-Vue布局.md","hash":"165c5ea603df2d0ce4f0e7babebaeedb2dc80344","modified":1618925290287},{"_id":"source/_posts/Windows端口占用关闭.md","hash":"6b022354bb0e47a30dccc748487996f910ac3b44","modified":1618925290288},{"_id":"source/_posts/hexo-theme-beantech.md","hash":"8f373aef7308fdc721a1a01a93a996c8f70c74bf","modified":1618925290288},{"_id":"source/_posts/Vue学习05-Vuex安装及使用.md","hash":"ea59c373d310e6a4dd13713d2fa84bdde5bcd753","modified":1618925290287},{"_id":"source/_posts/备忘录.md","hash":"86470a7298d53790f890193f03aa22e60a7e8889","modified":1618925290296},{"_id":"source/_posts/博客模板备注.md","hash":"69a8d9f7d36613befe299b4f350ca579c8fe3b1a","modified":1618925290296},{"_id":"source/_posts/并发的原子性-可见性-有序性.md","hash":"acf802e4c7188b430d0d57f8a8b7517bd5f932ee","modified":1618925290297},{"_id":"source/archive/index.md","hash":"f4da87251f98a358efb00539b8e71b5d7ca19195","modified":1618925290298},{"_id":"source/img/favicon.png","hash":"f21a8d53bdf2f45b45a2a30d76b4601bd6c7ef9a","modified":1618925290301},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1618925290310},{"_id":"source/tags/index.md","hash":"9a417cb743a80a4ea6e78e833c13d5faeba2508c","modified":1618925290313},{"_id":"source/about/index.md","hash":"ef803102954999d167060b0feab762fdbfa7f65b","modified":1618925290298},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1618925290314},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1618925290314},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1618925290315},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1618925290315},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1618925290315},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1618925290315},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1618925290315},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1618925290316},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1618925290316},{"_id":"themes/beantech/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1618925290316},{"_id":"themes/beantech/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1618925290318},{"_id":"themes/beantech/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1618925290318},{"_id":"themes/beantech/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1618925290318},{"_id":"themes/beantech/layout/keynote.ejs","hash":"205a6a841f6061801e65e845b5d310498c540440","modified":1618925290319},{"_id":"themes/beantech/layout/page-bck.ejs","hash":"c16656a3aeee38c19ce57176d7be7be6d82264aa","modified":1618925290319},{"_id":"themes/beantech/layout/layout.ejs","hash":"e02686e643c6ca12386eca2a358b13f7c7a7b3c4","modified":1618925290319},{"_id":"themes/beantech/layout/page-origin.ejs","hash":"6daedaa9346281619afbc9808848ad264b19093b","modified":1618925290319},{"_id":"themes/beantech/layout/page.ejs","hash":"6daedaa9346281619afbc9808848ad264b19093b","modified":1618925290319},{"_id":"themes/beantech/layout/post.ejs","hash":"6cca70b4da217018cada56132d741ff3221b1661","modified":1618925290319},{"_id":"themes/beantech/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1618925290319},{"_id":"source/img/me.png","hash":"ce297968bf6cd2fa354e6caaf186703c41bfc030","modified":1618925290310},{"_id":"themes/beantech/source/js/config.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618925290327},{"_id":"source/_posts/Axios学习1-实现异步通信/axios.png","hash":"08a179709de116296653aeb7419b890a7e794789","modified":1618925290225},{"_id":"source/_posts/Axios学习2-跨域通信/Access.png","hash":"ee6ad9645e83e3f3a19b8b11387dd88b4c52e331","modified":1618925290226},{"_id":"source/_posts/Brook科学上网必备/QQ截图20201226223304.png","hash":"22f765ec861795a1bd9a8af2f72ed3805bd6337b","modified":1618925290232},{"_id":"source/_posts/Brook科学上网必备/QQ截图20201226223632.png","hash":"5d5b4343af18702943bf5a7227d6d13af04f99a0","modified":1618925290232},{"_id":"source/_posts/Brook科学上网必备/微信图片_20201226221856.png","hash":"588953e2c78d029507dac83ea4ce8f3d2a02a6e8","modified":1618925290237},{"_id":"source/_posts/Docker-Registry学习1-Docker部署镜像/1.png","hash":"f8f5f2eb78bae22a4cf32ffe266effdcf1e77b51","modified":1618925290238},{"_id":"source/_posts/Docker-Registry学习1-Docker部署镜像/2.png","hash":"f18ce9f6284a310126c88f01da3799e74e7af98c","modified":1618925290238},{"_id":"source/_posts/Docker-Registry学习2-简介与安装/1.png","hash":"2ccd8265b3307f19352c863dc149a56ad7eb9edf","modified":1618925290238},{"_id":"source/_posts/Docker学习10-部署数据库/1.png","hash":"7559c34b92b94163b816f27943b0beaefaf6e4bd","modified":1618925290240},{"_id":"source/_posts/Docker学习10-部署数据库/2.png","hash":"e46f89cf7807f81bf464af2de4d166b723467dce","modified":1618925290241},{"_id":"source/_posts/Docker学习10-部署数据库/3.png","hash":"db7a1a6eaf42268dc3ec19fc267ea36751147d88","modified":1618925290241},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/1.png","hash":"446e2b0018f439fdc154170c05a3f0c1cb9486a6","modified":1618925290239},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/2.png","hash":"e215b10c910911420935864f9b5f27b199124a0f","modified":1618925290239},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/3.png","hash":"753782e4511bdad002f7be5ff6f0cb2d39f3cde8","modified":1618925290239},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/4.png","hash":"c451f6bc3ed01a80e9fd91ed0e5edbc30cc2a45d","modified":1618925290240},{"_id":"source/_posts/Docker学习11-部署项目到容器/1.png","hash":"7a634cadbd67054c01890e9e53e25a93ae9bceca","modified":1618925290241},{"_id":"source/_posts/Docker学习11-部署项目到容器/2.png","hash":"6e0330d15be3914a67e9b156c535e26fca450fe7","modified":1618925290241},{"_id":"source/_posts/Docker学习11-部署项目到容器/3.png","hash":"420ef838fa281939fbb81087def250f1967cbfcb","modified":1618925290242},{"_id":"source/_posts/Docker学习11-部署项目到容器/5.png","hash":"0fa6f1903500807bb8a47c6f266ffa2f682250bc","modified":1618925290244},{"_id":"source/_posts/Docker学习11-部署项目到容器/7.png","hash":"6425130843c8d54aa299689da6af5de9eed028ba","modified":1618925290246},{"_id":"source/_posts/Docker学习11-部署项目到容器/8.png","hash":"0ab0638a26e27a97fa7aa2bb07813e129f4ed520","modified":1618925290246},{"_id":"source/_posts/Docker学习14-Docker-Compose-的使用/1.png","hash":"f215a89773792b9821755d1ffdb6341c6ad93932","modified":1618925290249},{"_id":"source/_posts/Docker学习17-Docker-Compose-部署项目到容器/1.png","hash":"60652d365340d85ee995f8eaad82d2f813b410cd","modified":1618925290250},{"_id":"source/_posts/Docker学习17-Docker-Compose-部署项目到容器/2.png","hash":"ab3fb4f7f3c0484a10192e104d4a833e4798dd55","modified":1618925290250},{"_id":"source/_posts/Docker学习5-Docker基本指令/1.png","hash":"4b0e1e511128465b8961797c62285bfd908e26fd","modified":1618925290254},{"_id":"source/_posts/Docker学习5-Docker基本指令/2.png","hash":"c8e641ed555fee8b68a2ca0869d722744db82d97","modified":1618925290254},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像2/mydocker.png","hash":"cf58e2df30bb55340054c8183fc627958d107a08","modified":1618925290257},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/1.png","hash":"f6ae16814c392bbe85756ba61b5158ed30532fc1","modified":1618925290258},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/2.png","hash":"fe298e6c84df200d568e6764133719beffe60bf7","modified":1618925290258},{"_id":"source/_posts/Docker学习7-Docker容器/1.png","hash":"409efb591ad3371fcfa62555a5367ad519ff9c8a","modified":1618925290258},{"_id":"source/_posts/Docker学习7-Docker容器/2.png","hash":"f7068a730e393da8e739ffeab4c7c6b51a3a087c","modified":1618925290258},{"_id":"source/_posts/Docker学习9-Docker数据卷/1.png","hash":"2e139e9e6293abc7b6d2b8df10fdf405ba301622","modified":1618925290259},{"_id":"source/_posts/Docker学习9-Docker数据卷/2.png","hash":"8d8464fd4492cab672748dbe99eda08cf1dfcaa0","modified":1618925290259},{"_id":"source/_posts/Docker学习9-Docker数据卷/3.png","hash":"bdf0540855f0d9e1a6bf238b7258c72ec2aaa44a","modified":1618925290260},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320114607638.png","hash":"360976159157af4c6477ad3dfc36864c2f174d0f","modified":1618925290260},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320115328701.png","hash":"aad85c07a1bfbd45a3a14f1513d7606b76fe0723","modified":1618925290261},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320115617696.png","hash":"b88151822d220c3cad01168a151d9e862ed42b6d","modified":1618925290262},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320122741827.png","hash":"c889b935d9939a165ab87356dfa1582deea15811","modified":1618925290262},{"_id":"source/_posts/GitLab学习1-使用git托管代码/1.png","hash":"39889bd1baa700359ecb6fbd8f7fc71786cd741a","modified":1618925290262},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/2.png","hash":"860806f747e7acda9996eb9882ef61a3b01fdd03","modified":1618925290264},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/4.png","hash":"5c3c21aa778b40c96b476eb854f92f9132fb22d9","modified":1618925290265},{"_id":"source/_posts/GitLab学习2-GitLab的使用/1.png","hash":"15337ea3491b70b1c4eb62bc48f624cfa0222a95","modified":1618925290263},{"_id":"source/_posts/GitLab学习2-GitLab的使用/2.png","hash":"18d8a02551e424f8fd40989fd06fb60a9a241b7e","modified":1618925290263},{"_id":"source/_posts/GitLab学习2-GitLab的使用/3.png","hash":"208545bd1230fb4af49a87e61843d75762cd2718","modified":1618925290263},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/1.png","hash":"e16b68dbfca50220e660fc0e57bf3793cab02e26","modified":1618925290266},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/2.png","hash":"dd59deeed0e01b32ea0987e52d869b1a110ea343","modified":1618925290266},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/3.png","hash":"88d846f07e4bcfdeea584440007b766ebbd6f659","modified":1618925290267},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/4.png","hash":"4b2caa3ab0283ab181858b8343908d6be8d5833a","modified":1618925290267},{"_id":"source/_posts/Nexus学习2-Maven仓库介绍/1.png","hash":"18e7eb1746d7df85b9ce21a5605444d70a74444e","modified":1618925290266},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/1.png","hash":"3dae074635784b0423d5b5fbcd1ca89e864de532","modified":1618925290268},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/10.png","hash":"d7088852d1704b04d8ca76e673e3292aaa71c239","modified":1618925290268},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/12.png","hash":"b7bde3e4a54a9344e0a0fbe2ebb2ead241a2b0a3","modified":1618925290269},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/11.png","hash":"7742618c82ea61528fff548512244fd9df4f9398","modified":1618925290268},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/13.png","hash":"ae225da4b09024d41f50de79237f7ca5e5efcee0","modified":1618925290269},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/14.png","hash":"f4ed42148736e96058123b3be74e6e4f5fb5cb83","modified":1618925290269},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/15.png","hash":"87f57af04c18394b94b1f031e6663293fa02babd","modified":1618925290270},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/17.png","hash":"1696a181097c0a2fd1f92301a43ca0586352ff50","modified":1618925290271},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/19.png","hash":"d196611ea248bac0f7c87bc6cd09a4465032f7d0","modified":1618925290271},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/18.png","hash":"21679eab83e760a2f0a8b803349bc18e286cbef2","modified":1618925290271},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/20.png","hash":"92cd1c87e1abd09d4ad843e9da3406ca3362e26b","modified":1618925290272},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/21.png","hash":"f2196fe9ed426a6de5009be99bf36cf64d8c5243","modified":1618925290272},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/22.png","hash":"3e1fccf70bef54bfcb1cc7ebf8b290756d4a6f7e","modified":1618925290272},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/2.png","hash":"60582a3a4b109ff4d1ba3a6d9751162c0faf0b0e","modified":1618925290272},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/23.png","hash":"84340c4adf2b839b79a11b3a6729ef85c88f8baa","modified":1618925290273},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/24.png","hash":"7d35bc708faa327652b71910ea7e22d5a3bee3ac","modified":1618925290273},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/25.png","hash":"54f4fefbac550113fc264eb2be27d99acf6e8fb7","modified":1618925290274},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/26.png","hash":"e95253b1c7d3393b32794833a7e812dbb82f6f91","modified":1618925290274},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/27.png","hash":"b31fb3274b1014c55a95e3361a0a57f108071e38","modified":1618925290274},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/3.png","hash":"0d3e9050c801f04d7855e0561760876e508c2126","modified":1618925290275},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/29.png","hash":"8fdad0563718a09df7c0de183f2624ee788e938e","modified":1618925290275},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/30.png","hash":"3f6fd46b0128df3c9601e1d7e719827937a74e06","modified":1618925290276},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/28.png","hash":"04b2dcaab7fcff3bb231fda3c808c72c883ff547","modified":1618925290275},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/31.png","hash":"7123b0fc091f49ec47835f32637467a0102b8b9e","modified":1618925290276},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/32.png","hash":"5c420a7e63c9a47abda57c871ad49f67f276a1b0","modified":1618925290276},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/33.png","hash":"2556af671e114772ff026b0eaf33c30eb6695d88","modified":1618925290276},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/35.png","hash":"fa8d525b06ba87e71c2319b54ecf7d688b304040","modified":1618925290277},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/36.png","hash":"629d4409b9840b1438fe95595a460866ef1030ad","modified":1618925290277},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/38.png","hash":"d87daf4ec95e39467cf8722f83a0017711b457d7","modified":1618925290278},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/37.png","hash":"2f024b07b2284ca4d0441d9ce6de4bc55ab453c6","modified":1618925290278},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/34.png","hash":"de3082c2b0aa65217c68eb5ff5dd2dace6592370","modified":1618925290277},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/39.png","hash":"9c05467571d6b4b29ab3a750eeca1ef7ff7e67d8","modified":1618925290278},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/4.png","hash":"3acfb0747151939bf39f4f635fb77c6906555a2f","modified":1618925290279},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/40.PNG","hash":"34e5ccf262dfbb4efb24bc35b3a2ae7535b9eb59","modified":1618925290279},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/42.png","hash":"9b6cf0274854cc09817f6d395feeca731d7bbe36","modified":1618925290280},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/43.png","hash":"67607dab3fdc4dd60110cf630be0d811bf5e91db","modified":1618925290280},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/6.png","hash":"57ca5822bbe6e6caf46fb16a63e6b6a7822606de","modified":1618925290281},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/5.png","hash":"c8bd93d059a463837e8acf7beaf734590707d4e4","modified":1618925290280},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/41.png","hash":"7c22ae4670a43d2fefc572bf4b6f3856bcfba05d","modified":1618925290279},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/7.png","hash":"45b928aea11a065fb8c569b4e115b9bb809be13b","modified":1618925290281},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/8.png","hash":"b40a4a4eb5f52e9671741d8771a07ff1e974513b","modified":1618925290281},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/9.png","hash":"a0b2db185c1a25f3b6c334b3468cd4a0b64a6a1f","modified":1618925290281},{"_id":"source/_posts/Vue学习01-安装及使用/dataDriver.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1618925290283},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvc.png","hash":"4c58d1b5ec609a382912c39b6f2d20d373618af9","modified":1618925290282},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvmVue.png","hash":"52c8a6529e7ed652041a6d71f1824db3991ea574","modified":1618925290283},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvm.png","hash":"74129ce7f40761f454d1c314b05d8d661013cc9c","modified":1618925290282},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/web.png","hash":"c12b67e0532ebd834b122cdf2a5d8a61c972bb9a","modified":1618925290283},{"_id":"source/_posts/Vue学习02-Vue语法/v-for.png","hash":"8bac58c2499e4f9b3827ea3249ee7cf5e97fefc3","modified":1618925290284},{"_id":"source/_posts/Vue学习02-Vue语法/v-on.png","hash":"e56ae8105594dbf89fd9526068b17dd15192c46b","modified":1618925290284},{"_id":"source/_posts/Vue学习02-Vue语法/v-on1.png","hash":"81ecb8e99e1b6f5f7b3ff9fe97851e407a90acfd","modified":1618925290284},{"_id":"source/_posts/并发的原子性-可见性-有序性/1.jpg","hash":"da8ff67b12daf7bc3384b335f9baa0924bb7de74","modified":1618925290297},{"_id":"source/_posts/并发的原子性-可见性-有序性/2.png","hash":"4acf2a6353e6e38aa92cf96dc8ab4f67aae12992","modified":1618925290297},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1618925290299},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1618925290317},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1618925290318},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1618925290318},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1618925290318},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1618925290318},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"91288381dbd98f1c6b91d419094934ff59437021","modified":1618925290318},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"7089d4429f9ac7f476d6b5a3b5fbf0b55722c883","modified":1618925290316},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"07c2695e7de5da7e916433faa42028f6b91e4a27","modified":1618925290317},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"217e2f30ae9a8f82c70133f251f840e25c3754c1","modified":1618925290317},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1618925290317},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1618925290317},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1618925290317},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1618925290317},{"_id":"themes/beantech/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1618925290320},{"_id":"themes/beantech/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1618925290320},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1618925290320},{"_id":"themes/beantech/source/css/font-awesome.min.css","hash":"b965f6c58b7c2f5ed3a6f704ff0d7c004ba13340","modified":1618925290322},{"_id":"themes/beantech/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1618925290322},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1618925290322},{"_id":"themes/beantech/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1618925290322},{"_id":"themes/beantech/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1618925290323},{"_id":"themes/beantech/source/css/toc.styl","hash":"822aca17c885109452cc75a9aa384d9f3c07ea81","modified":1618925290323},{"_id":"themes/beantech/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1618925290323},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1618925290324},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1618925290325},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1618925290325},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1618925290326},{"_id":"themes/beantech/source/js/analytics.js","hash":"8374434156718fef11d0cab56d3723fae52c354e","modified":1618925290326},{"_id":"themes/beantech/source/js/anchor.min.js","hash":"42df3490308da24361dc1f237eed916ef839d5a0","modified":1618925290326},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1618925290326},{"_id":"themes/beantech/source/js/buttons.js","hash":"492f72c45f75ff40777f7fd4ca6a90c34f527725","modified":1618925290327},{"_id":"themes/beantech/source/js/fastclick.min.js","hash":"07a7f58536141ae97dc249fab99055c971f88bdd","modified":1618925290328},{"_id":"themes/beantech/source/js/html5shiv.js","hash":"bc6586068b24e20c1d6eed0a81f180d729d46aab","modified":1618925290328},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1618925290328},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1618925290328},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1618925290330},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1618925290330},{"_id":"themes/beantech/source/js/respond.min.js","hash":"56a2846c2963121ee7a18c3a1e98662867b13328","modified":1618925290331},{"_id":"themes/beantech/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1618925290331},{"_id":"themes/beantech/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1618925290331},{"_id":"source/_posts/Docker学习11-部署项目到容器/6.png","hash":"55ca3a784c59332a6ff6f0a85f8f3aacea68489d","modified":1618925290245},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像1/8080.png","hash":"f247b5706ef96fb650796e7a9cdd8787ee64fed8","modified":1618925290255},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像1/8081.png","hash":"151985266256f14493d503b63bed117679dce8d5","modified":1618925290256},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像1/hellodocker.png","hash":"3615ee93d4bf5b4635a792f12898747e4670d7b1","modified":1618925290256},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320114913928.png","hash":"85e8ac0edfdf925216f50f16be21c6156c66917c","modified":1618925290261},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/1.png","hash":"f7944e230ecd05a58f0ea19ad87e60b270645a16","modified":1618925290264},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/3.png","hash":"f4f9f2fa6b6a90f97f1c6ab06c0c63bacca7a9c8","modified":1618925290265},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/16.png","hash":"96c5df836b3cc27490d49b992edffa2add142353","modified":1618925290270},{"_id":"source/img/header_img/archive-bg.png","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1618925290305},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1618925290321},{"_id":"themes/beantech/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1618925290323},{"_id":"themes/beantech/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1618925290324},{"_id":"themes/beantech/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1618925290324},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1618925290325},{"_id":"themes/beantech/source/js/embed.js","hash":"cd4b065334d7c96b2a981ee13c0a09c60d20b7e6","modified":1618925290327},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1618925290330},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1618925290313},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1618925290322},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1618925290322},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1618925290295},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1618925290296},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1618925290301},{"_id":"source/img/header_img/404.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1618925290302},{"_id":"source/img/header_img/about.jpg","hash":"62047310fb7038c66763847ccce9535fee5f22c5","modified":1618925290304},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1618925290306},{"_id":"source/img/header_img/tag.jpg","hash":"e7e8b6fb53e61821a022724045dc22ee504d7ece","modified":1618925290308},{"_id":"source/img/header_img/tag.png","hash":"e7e8b6fb53e61821a022724045dc22ee504d7ece","modified":1618925290309},{"_id":"source/img/header_img/home.jpg","hash":"7d0382b89ade495e3b9eb12132806129758d5ff2","modified":1618925290307},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1618925290312},{"_id":"themes/beantech/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1618925290329},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1618925290321},{"_id":"source/_posts/Vue学习03-生命周期函数/vueLifeLoop.jpg","hash":"1db02cc9577db72c01bcfb25ad62ec2f19ae9bd0","modified":1618925290287},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1618925290300},{"_id":"source/_posts/Docker学习11-部署项目到容器/4.png","hash":"8cf8e5b8d4b5347d826bcfb131cad7c7910c4073","modified":1618925290244},{"_id":"source/_posts/Docker学习11-部署项目到容器/9.png","hash":"b4d579670380c4bc13646da8ab8f8fcc68e1ee39","modified":1618925290248},{"_id":"source/_posts/Docker学习17-Docker-Compose-部署项目到容器/3.png","hash":"b0ef726ba0834b6939b734962e3186035a9f666c","modified":1618925290253},{"_id":"source/_posts/Brook科学上网必备/IMG_4987.PNG","hash":"bf09d518ead67b356de7d8f6858b8b07855e88c1","modified":1618925290231},{"_id":"source/_posts/Brook科学上网必备/QQ截图20201226223743.png","hash":"d1cd36225099642e2c55e86ca3f8c3441e2faea9","modified":1618925290236},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1618925290294},{"_id":"public/post-sitemap.xml","hash":"4de75bb5577a5557c152a1cb7ce5b7728b4a51f6","modified":1618925990683},{"_id":"public/page-sitemap.xml","hash":"46409dab35cf1af7d1b342a07943b8284bfbf3ee","modified":1618925990683},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1618925991195},{"_id":"public/sitemap.xml","hash":"1a8b0078b313f2f1bd9888f434a8bba88d0776f0","modified":1618925991195},{"_id":"public/tag-sitemap.xml","hash":"2360401456049a8643219834897f6687aea8926f","modified":1618925991375},{"_id":"public/404.html","hash":"52a86e7e4f236ff29145b663b4bd7b6b18854d3b","modified":1618925991403},{"_id":"public/2021/03/21/备忘录/index.html","hash":"d1d119e8cc2e5dfa7e3366d94239fbe3f45f3ca0","modified":1618925991403},{"_id":"public/2019/09/23/Docker学习8-Docker仓库2-私有仓库/index.html","hash":"4e5cd47af592893d6d528ab72520b82e50d851e4","modified":1618925991403},{"_id":"public/tags/index.html","hash":"2353a37d5d295fefed075f2d326564b347b299dc","modified":1618925991403},{"_id":"public/2020/12/26/Brook科学上网必备/index.html","hash":"58efa91ee9f1359bd2d19cb53e487b896b50029e","modified":1618925991403},{"_id":"public/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/index.html","hash":"b094143ac05936765d9bc423de36701d43869d2f","modified":1618925991403},{"_id":"public/2021/03/20/GCP上搭建虚拟服务器VPS/index.html","hash":"3c7f73a20b08d3beda9699934800befb21198530","modified":1618925991403},{"_id":"public/2019/10/27/Docker-Registry学习2-简介与安装/index.html","hash":"a001157102176145969b9292759cd0b56d97a78a","modified":1618925991403},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/index.html","hash":"de9bd8f148bb136f45340187f3b08db9940ce193","modified":1618925991403},{"_id":"public/2019/10/27/Docker-Registry学习1-Docker部署镜像/index.html","hash":"5f3fa50dcf0da122e5429f7b6cb5526ba3e05871","modified":1618925991403},{"_id":"public/2019/10/22/Nexus学习1-Nexus简介与安装/index.html","hash":"1ae5ce9c75f01a001e4adc8ea218767ad98e4e57","modified":1618925991403},{"_id":"public/2019/10/23/Nexus学习2-Maven仓库介绍/index.html","hash":"cf892ef2f27d786e9274610f3b385ca375b7bfe0","modified":1618925991403},{"_id":"public/2019/09/30/GitLab学习2-GitLab的使用/index.html","hash":"9ef317d3eedbda25626c26b953e3601121a6be8a","modified":1618925991403},{"_id":"public/2019/10/23/Nexus学习3-在项目中使用maven私库/index.html","hash":"ee8ce59b44f3bbf09aca65c95ac42de22d08d2fb","modified":1618925991404},{"_id":"public/2019/09/30/GitLab学习1-使用git托管代码/index.html","hash":"0a60a3e617b7ad4c8f399a0dcbbd98be9421a530","modified":1618925991404},{"_id":"public/2019/09/29/Docker学习18-Docker-Compose-YAML配置文件语言/index.html","hash":"199c21c7886d8634f6e6aeba766b970b2989fc6c","modified":1618925991404},{"_id":"public/2019/09/29/Docker学习16-Docker-Compose-命令说明/index.html","hash":"d77c381d4335cc971350c6cf2b708b493db75424","modified":1618925991404},{"_id":"public/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/index.html","hash":"d2fa2acfb664975bfd74925d8fb969bef2e1fd6e","modified":1618925991404},{"_id":"public/2019/09/29/Docker学习15-Docker-Compose-模板文件/index.html","hash":"c4996ca8f71e933ad90a562d3f7dcffe3ecb4ae2","modified":1618925991404},{"_id":"public/2019/09/29/Docker学习13-Docker-Compose-安装与卸载/index.html","hash":"36772f06c17e48c9498a92dbe097eb235c1d8de8","modified":1618925991404},{"_id":"public/2019/09/29/Docker学习14-Docker-Compose-的使用/index.html","hash":"b69b2a3b15478a322bb0237c1860fa5a225e4831","modified":1618925991404},{"_id":"public/2019/09/27/Docker学习12-Docker-Compose-介绍/index.html","hash":"50955762768c6908e6301c4747123d7832ff7eb2","modified":1618925991404},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/index.html","hash":"67861affb50f9b02dad12c1e070da66cad7e4e91","modified":1618925991404},{"_id":"public/2019/09/24/Windows端口占用关闭/index.html","hash":"20841a8f9a93fcec65cc2ce43e93a23c19fa2c65","modified":1618925991404},{"_id":"public/2019/09/24/Docker学习10-部署数据库/index.html","hash":"5499ce52e3b60e3b95d27aa96c0f713a1df0ac1d","modified":1618925991404},{"_id":"public/2019/09/23/Docker学习9-Docker数据卷/index.html","hash":"290b2918addf55701222748387ddcf8f709b4fd9","modified":1618925991404},{"_id":"public/2019/09/23/Docker学习8-Docker仓库1-Docker-Hub/index.html","hash":"075f984b9930ae4ce9e058059d2aa9709575ff55","modified":1618925991404},{"_id":"public/2019/09/23/Docker学习7-Docker容器/index.html","hash":"926c3d083095c26198f14107150c59a4e6fa09eb","modified":1618925991404},{"_id":"public/2019/09/23/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/index.html","hash":"ef8769eb795f47490053dd1baebf2087348ea5ba","modified":1618925991404},{"_id":"public/2019/09/23/并发的原子性-可见性-有序性/index.html","hash":"7510c36f477326805b05ac9ade93ef6dc37ea6a9","modified":1618925991404},{"_id":"public/2019/09/20/Docker学习6-Dockerfile定制镜像3/index.html","hash":"31b8b173b3ea8dbd8a7541487d30155482b400f8","modified":1618925991404},{"_id":"public/2019/09/19/Docker学习6-Dockerfile定制镜像2/index.html","hash":"5f444096425d9104d61e64968781d590c6e94d4e","modified":1618925991405},{"_id":"public/2019/09/18/Docker学习6-Dockerfile定制镜像1/index.html","hash":"2f9696fe92beb6648efb5296bff72fdd51cf158a","modified":1618925991405},{"_id":"public/2019/09/18/Docker学习5-Docker基本指令/index.html","hash":"1584e809b14f8faeebbbf719f5f03656759e4506","modified":1618925991405},{"_id":"public/2019/09/18/Docker学习2-Docker镜像加速器/index.html","hash":"a319a2ee13f99cc51e5edd5137da57bc5e08f8df","modified":1618925991405},{"_id":"public/2019/09/18/Docker学习1-Docker是什么/index.html","hash":"9be34bfeb503c63516432efb39b5268a119bf4df","modified":1618925991405},{"_id":"public/2019/08/26/Axios学习2-跨域通信/index.html","hash":"5eb458b54838733592679b7c95a4e6d6d90f8d1a","modified":1618925991405},{"_id":"public/2019/08/18/Axios学习1-实现异步通信/index.html","hash":"f0a1ef22dd55afbfe2c4ddd32685a706c0153e1c","modified":1618925991405},{"_id":"public/2019/08/17/Vue学习05-Vuex安装及使用/index.html","hash":"998403e96012118a4b693e7ec90c927f12d278df","modified":1618925991405},{"_id":"public/2019/08/17/Vue学习04-Vue布局/index.html","hash":"1e0e481728dddfea3d78e4bb92ec6e6882a1c161","modified":1618925991405},{"_id":"public/2019/08/17/Vue学习03-生命周期函数/index.html","hash":"3f46567948ab4ac756d62075e82f20f267a02784","modified":1618925991405},{"_id":"public/2019/08/17/Vue学习02-Vue语法/index.html","hash":"854a42b48563aab7d35a27710a3d2030589d45be","modified":1618925991405},{"_id":"public/2019/08/16/Vue学习01-安装及使用/index.html","hash":"2572308f11166bc42e82d874895d1c37495f7a83","modified":1618925991405},{"_id":"public/2019/06/23/博客模板备注/index.html","hash":"5379ecc4978b40c4c2c541b5fbf1a30b76668fb2","modified":1618925991405},{"_id":"public/2017/03/18/hexo-theme-beantech/index.html","hash":"f0950e66f55a4e4652b0bf7a0c6f51be11bda834","modified":1618925991405},{"_id":"public/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/index.html","hash":"d4ac3e4ca881e40e6550ec0fd28e4014fab9df95","modified":1618925991405},{"_id":"public/archive/index.html","hash":"91aebe09fb6d562716582c54e592d2242282f1a5","modified":1618925991405},{"_id":"public/about/index.html","hash":"e493704915a1e89b0f230146c28418478a6923c7","modified":1618925991405},{"_id":"public/archives/index.html","hash":"6c9267c1913551cfe909864f3f914a3eb8650972","modified":1618925991405},{"_id":"public/archives/archives/2/index.html","hash":"06110998cbea9785d8677344bdbbd0fa9ea85188","modified":1618925991405},{"_id":"public/archives/archives/4/index.html","hash":"9a67aefcdddec953c6d2837c7f230c07dfc92d2f","modified":1618925991405},{"_id":"public/archives/archives/3/index.html","hash":"7685252996f703013bc0398354bc6a606422c2b9","modified":1618925991405},{"_id":"public/archives/archives/5/index.html","hash":"a0c1dbcb370592b9f00dbbad504e24bece5c1ce4","modified":1618925991405},{"_id":"public/archives/2017/index.html","hash":"6923ff7ed12e3872e278239e0610c15b768491b1","modified":1618925991405},{"_id":"public/archives/2017/03/index.html","hash":"5fe188871d516ef5e500e7cff4687903c52bfb05","modified":1618925991405},{"_id":"public/archives/2019/index.html","hash":"8b79a2d8e711fdd874fc2a116d0ffe4a71a89c1a","modified":1618925991405},{"_id":"public/archives/2019/archives/2/index.html","hash":"6185e9bfd8a070e3342e14639f057853fe41fbb5","modified":1618925991405},{"_id":"public/archives/2019/archives/3/index.html","hash":"3b5903247d96f8b4bed958f3be79df9c0f529041","modified":1618925991405},{"_id":"public/archives/2019/archives/4/index.html","hash":"2dc6fb6b4c73ff1b664a8194c9501438b6097180","modified":1618925991405},{"_id":"public/archives/2019/08/index.html","hash":"684ce559e408b80593f99760a62e761da07c6200","modified":1618925991405},{"_id":"public/archives/2019/06/index.html","hash":"5df83cafc6ba780972e54b117c81a97efd105f19","modified":1618925991405},{"_id":"public/archives/2019/09/index.html","hash":"881e8bae79d80034a80d9220cd4c1863210c5146","modified":1618925991405},{"_id":"public/archives/2019/09/archives/2/index.html","hash":"87c7a2c9ad618b44ce28fa4fa78612fa0b27c919","modified":1618925991406},{"_id":"public/archives/2019/09/archives/3/index.html","hash":"3f5be25f4d69edb48c21f0a1db0d7f8d9d859956","modified":1618925991406},{"_id":"public/archives/2019/10/index.html","hash":"b969ea4d95b87b558963440f96a495e6889f4f13","modified":1618925991406},{"_id":"public/archives/2020/index.html","hash":"99cc398b7b89064e340a8e94403b70f84ca8af62","modified":1618925991406},{"_id":"public/archives/2020/12/index.html","hash":"e88937efa14d209d13055e4c986822bc0c117753","modified":1618925991406},{"_id":"public/archives/2021/index.html","hash":"4520e93ef7ff9803b1759ab75d116e9c254d66c4","modified":1618925991406},{"_id":"public/tags/Axios/index.html","hash":"fbaa06e25d88ce7417fe6acf7e364b72325e9f78","modified":1618925991406},{"_id":"public/archives/2021/03/index.html","hash":"73e1f2eae40aeb6174f0bea79ac0988e3e4d8193","modified":1618925991406},{"_id":"public/tags/Vue/index.html","hash":"cdad47d70aa656b388fe6296f7b65c47e71c6430","modified":1618925991406},{"_id":"public/tags/梯子/index.html","hash":"6d03b911a0351f4398bfb50e37147a98dbd92f0e","modified":1618925991406},{"_id":"public/tags/Brook/index.html","hash":"4413fa85cdf05b86158db69e506871a6bec5c34a","modified":1618925991406},{"_id":"public/tags/Docker/index.html","hash":"63ba4ddad1b45d22b24c00dc0eea290fc63e08c0","modified":1618925991406},{"_id":"public/tags/Docker/archives/2/index.html","hash":"faf22285d265c9816d3567c909f3728049a88858","modified":1618925991406},{"_id":"public/tags/Docker-Compose/index.html","hash":"6a6a3241eab9e60e4b54abe0e2beb191970b3377","modified":1618925991406},{"_id":"public/tags/YAML/index.html","hash":"a42cfb0cf9450b9b9bc5b76f265ddb3be695081e","modified":1618925991406},{"_id":"public/tags/Dockerfile/index.html","hash":"60b8c6e29046da9d2558f825f5276db0cfc380ed","modified":1618925991406},{"_id":"public/tags/GCP/index.html","hash":"0eea0069621585c05580db10f8b923fe38afb4d2","modified":1618925991406},{"_id":"public/tags/VPS/index.html","hash":"e6d199dbd408a0f82b02a9f6f6588ec59255a460","modified":1618925991406},{"_id":"public/tags/GitLab/index.html","hash":"51300d23fa754cf4714761ec532f3d4ca4a6876e","modified":1618925991406},{"_id":"public/tags/Git/index.html","hash":"e05ced4a201f0067612b7bb51f16ae88abe2d85b","modified":1618925991406},{"_id":"public/tags/git/index.html","hash":"870fc5c7764006a845abd45023bf01bad6325849","modified":1618925991406},{"_id":"public/tags/webpack/index.html","hash":"c4dd264c00c34e41a7b8659f524eb8df32b5e993","modified":1618925991406},{"_id":"public/tags/npm/index.html","hash":"6c4750c9e40a21956b696710314db5bf988db7b1","modified":1618925991406},{"_id":"public/tags/Windows/index.html","hash":"44c4eaaf86490a0ae32c5a7cde9fb69979325b8f","modified":1618925991406},{"_id":"public/tags/Windows端口/index.html","hash":"46d1f962ffcce58cfac8abecd7776b957eb1175a","modified":1618925991406},{"_id":"public/tags/Hexo/index.html","hash":"eefc75a30ad2ce6260bd3a947df4cc962dd11bc5","modified":1618925991406},{"_id":"public/tags/Blog/index.html","hash":"3a45a00a62ebb67e14c818453669cf6d862b524e","modified":1618925991406},{"_id":"public/index.html","hash":"30eeb57652e768f6a383b60126a1788d878627b6","modified":1618925991406},{"_id":"public/tags/Vuex/index.html","hash":"2332a993e09d20c559c63a254ea97157e88e599e","modified":1618925991407},{"_id":"public/tags/计算机理论/index.html","hash":"6f69764a5db366dcff2b8ec6d8c41bcaa5994977","modified":1618925991407},{"_id":"public/archives/2/index.html","hash":"700f2ff6ea11a6c724f77a6ff0ce758911dd8abc","modified":1618925991407},{"_id":"public/archives/3/index.html","hash":"e84a2825c83904dd21192bdf9afba1e4120d5438","modified":1618925991407},{"_id":"public/archives/4/index.html","hash":"32ffbd64c456c4e003b043c16b6cc672328c1afe","modified":1618925991407},{"_id":"public/archives/5/index.html","hash":"420e1f5d7e7e10fa9f7bf1b3b72f02831072631a","modified":1618925991407},{"_id":"public/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1618925991407},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1618925991407},{"_id":"public/img/favicon.png","hash":"f21a8d53bdf2f45b45a2a30d76b4601bd6c7ef9a","modified":1618925991407},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1618925991407},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1618925991407},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1618925991407},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1618925991407},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1618925991407},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1618925991407},{"_id":"public/2019/08/18/Axios学习1-实现异步通信/axios.png","hash":"08a179709de116296653aeb7419b890a7e794789","modified":1618925991407},{"_id":"public/2019/08/26/Axios学习2-跨域通信/Access.png","hash":"ee6ad9645e83e3f3a19b8b11387dd88b4c52e331","modified":1618925991407},{"_id":"public/2019/10/27/Docker-Registry学习2-简介与安装/1.png","hash":"2ccd8265b3307f19352c863dc149a56ad7eb9edf","modified":1618925991407},{"_id":"public/2019/09/19/Docker学习6-Dockerfile定制镜像2/mydocker.png","hash":"cf58e2df30bb55340054c8183fc627958d107a08","modified":1618925991407},{"_id":"public/2019/09/29/Docker学习14-Docker-Compose-的使用/1.png","hash":"f215a89773792b9821755d1ffdb6341c6ad93932","modified":1618925991408},{"_id":"public/2019/09/30/GitLab学习1-使用git托管代码/1.png","hash":"39889bd1baa700359ecb6fbd8f7fc71786cd741a","modified":1618925991408},{"_id":"public/2019/10/23/Nexus学习2-Maven仓库介绍/1.png","hash":"18e7eb1746d7df85b9ce21a5605444d70a74444e","modified":1618925991408},{"_id":"public/2019/08/16/Vue学习01-安装及使用/dataDriver.png","hash":"7071337f9071f93ebf85639ede38b0f40fd75d98","modified":1618925991408},{"_id":"public/2019/10/27/Docker-Registry学习1-Docker部署镜像/1.png","hash":"f8f5f2eb78bae22a4cf32ffe266effdcf1e77b51","modified":1618925991408},{"_id":"public/2019/09/18/Docker学习5-Docker基本指令/2.png","hash":"c8e641ed555fee8b68a2ca0869d722744db82d97","modified":1618925991408},{"_id":"public/2019/10/27/Docker-Registry学习1-Docker部署镜像/2.png","hash":"f18ce9f6284a310126c88f01da3799e74e7af98c","modified":1618925991408},{"_id":"public/2019/09/23/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/1.png","hash":"f6ae16814c392bbe85756ba61b5158ed30532fc1","modified":1618925991408},{"_id":"public/2019/09/18/Docker学习5-Docker基本指令/1.png","hash":"4b0e1e511128465b8961797c62285bfd908e26fd","modified":1618925991408},{"_id":"public/2019/09/23/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/2.png","hash":"fe298e6c84df200d568e6764133719beffe60bf7","modified":1618925991408},{"_id":"public/2019/09/23/Docker学习7-Docker容器/1.png","hash":"409efb591ad3371fcfa62555a5367ad519ff9c8a","modified":1618925991408},{"_id":"public/2019/09/23/Docker学习7-Docker容器/2.png","hash":"f7068a730e393da8e739ffeab4c7c6b51a3a087c","modified":1618925991408},{"_id":"public/2019/09/23/并发的原子性-可见性-有序性/2.png","hash":"4acf2a6353e6e38aa92cf96dc8ab4f67aae12992","modified":1618925991408},{"_id":"public/2019/09/23/并发的原子性-可见性-有序性/1.jpg","hash":"da8ff67b12daf7bc3384b335f9baa0924bb7de74","modified":1618925991408},{"_id":"public/2019/09/24/Docker学习10-部署数据库/3.png","hash":"db7a1a6eaf42268dc3ec19fc267ea36751147d88","modified":1618925991408},{"_id":"public/2019/09/24/Docker学习10-部署数据库/1.png","hash":"7559c34b92b94163b816f27943b0beaefaf6e4bd","modified":1618925991408},{"_id":"public/2019/09/24/Docker学习10-部署数据库/2.png","hash":"e46f89cf7807f81bf464af2de4d166b723467dce","modified":1618925991408},{"_id":"public/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/1.png","hash":"60652d365340d85ee995f8eaad82d2f813b410cd","modified":1618925991408},{"_id":"public/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/2.png","hash":"ab3fb4f7f3c0484a10192e104d4a833e4798dd55","modified":1618925991408},{"_id":"public/2019/09/18/Docker学习6-Dockerfile定制镜像1/8081.png","hash":"151985266256f14493d503b63bed117679dce8d5","modified":1618925991408},{"_id":"public/2019/09/18/Docker学习6-Dockerfile定制镜像1/8080.png","hash":"f247b5706ef96fb650796e7a9cdd8787ee64fed8","modified":1618925991408},{"_id":"public/2019/09/23/Docker学习9-Docker数据卷/1.png","hash":"2e139e9e6293abc7b6d2b8df10fdf405ba301622","modified":1618925991408},{"_id":"public/2019/09/23/Docker学习9-Docker数据卷/3.png","hash":"bdf0540855f0d9e1a6bf238b7258c72ec2aaa44a","modified":1618925991408},{"_id":"public/2019/09/23/Docker学习9-Docker数据卷/2.png","hash":"8d8464fd4492cab672748dbe99eda08cf1dfcaa0","modified":1618925991408},{"_id":"public/2019/09/30/GitLab学习2-GitLab的使用/1.png","hash":"15337ea3491b70b1c4eb62bc48f624cfa0222a95","modified":1618925991408},{"_id":"public/2019/09/30/GitLab学习2-GitLab的使用/2.png","hash":"18d8a02551e424f8fd40989fd06fb60a9a241b7e","modified":1618925991408},{"_id":"public/2019/08/17/Vue学习02-Vue语法/v-on.png","hash":"e56ae8105594dbf89fd9526068b17dd15192c46b","modified":1618925991408},{"_id":"public/2019/08/17/Vue学习02-Vue语法/v-for.png","hash":"8bac58c2499e4f9b3827ea3249ee7cf5e97fefc3","modified":1618925991408},{"_id":"public/2019/09/30/GitLab学习2-GitLab的使用/3.png","hash":"208545bd1230fb4af49a87e61843d75762cd2718","modified":1618925991408},{"_id":"public/2019/08/17/Vue学习02-Vue语法/v-on1.png","hash":"81ecb8e99e1b6f5f7b3ff9fe97851e407a90acfd","modified":1618925991408},{"_id":"public/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/1.png","hash":"446e2b0018f439fdc154170c05a3f0c1cb9486a6","modified":1618925991408},{"_id":"public/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/4.png","hash":"c451f6bc3ed01a80e9fd91ed0e5edbc30cc2a45d","modified":1618925991408},{"_id":"public/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/3.png","hash":"753782e4511bdad002f7be5ff6f0cb2d39f3cde8","modified":1618925991409},{"_id":"public/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/2.png","hash":"e215b10c910911420935864f9b5f27b199124a0f","modified":1618925991409},{"_id":"public/2019/10/22/Nexus学习1-Nexus简介与安装/1.png","hash":"f7944e230ecd05a58f0ea19ad87e60b270645a16","modified":1618925991409},{"_id":"public/2019/10/22/Nexus学习1-Nexus简介与安装/2.png","hash":"860806f747e7acda9996eb9882ef61a3b01fdd03","modified":1618925991409},{"_id":"public/2019/10/23/Nexus学习3-在项目中使用maven私库/1.png","hash":"e16b68dbfca50220e660fc0e57bf3793cab02e26","modified":1618925991409},{"_id":"public/2019/10/23/Nexus学习3-在项目中使用maven私库/2.png","hash":"dd59deeed0e01b32ea0987e52d869b1a110ea343","modified":1618925991409},{"_id":"public/2019/10/22/Nexus学习1-Nexus简介与安装/4.png","hash":"5c3c21aa778b40c96b476eb854f92f9132fb22d9","modified":1618925991409},{"_id":"public/2019/10/23/Nexus学习3-在项目中使用maven私库/3.png","hash":"88d846f07e4bcfdeea584440007b766ebbd6f659","modified":1618925991409},{"_id":"public/2019/10/23/Nexus学习3-在项目中使用maven私库/4.png","hash":"4b2caa3ab0283ab181858b8343908d6be8d5833a","modified":1618925991409},{"_id":"public/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvc.png","hash":"4c58d1b5ec609a382912c39b6f2d20d373618af9","modified":1618925991409},{"_id":"public/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/web.png","hash":"c12b67e0532ebd834b122cdf2a5d8a61c972bb9a","modified":1618925991409},{"_id":"public/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvvmVue.png","hash":"52c8a6529e7ed652041a6d71f1824db3991ea574","modified":1618925991409},{"_id":"public/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvvm.png","hash":"74129ce7f40761f454d1c314b05d8d661013cc9c","modified":1618925991409},{"_id":"public/2020/12/26/Brook科学上网必备/QQ截图20201226223304.png","hash":"22f765ec861795a1bd9a8af2f72ed3805bd6337b","modified":1618925991409},{"_id":"public/2020/12/26/Brook科学上网必备/QQ截图20201226223632.png","hash":"5d5b4343af18702943bf5a7227d6d13af04f99a0","modified":1618925991409},{"_id":"public/2020/12/26/Brook科学上网必备/微信图片_20201226221856.png","hash":"588953e2c78d029507dac83ea4ce8f3d2a02a6e8","modified":1618925991409},{"_id":"public/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320114607638.png","hash":"360976159157af4c6477ad3dfc36864c2f174d0f","modified":1618925991409},{"_id":"public/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320115328701.png","hash":"aad85c07a1bfbd45a3a14f1513d7606b76fe0723","modified":1618925991409},{"_id":"public/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320115617696.png","hash":"b88151822d220c3cad01168a151d9e862ed42b6d","modified":1618925991409},{"_id":"public/img/header_img/archive-bg.png","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1618925991638},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1618925991639},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1618925991640},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1618925991640},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1618925991640},{"_id":"public/2019/09/18/Docker学习6-Dockerfile定制镜像1/hellodocker.png","hash":"3615ee93d4bf5b4635a792f12898747e4670d7b1","modified":1618925991640},{"_id":"public/2019/10/22/Nexus学习1-Nexus简介与安装/3.png","hash":"f4f9f2fa6b6a90f97f1c6ab06c0c63bacca7a9c8","modified":1618925991640},{"_id":"public/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320122741827.png","hash":"c889b935d9939a165ab87356dfa1582deea15811","modified":1618925991640},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/1.png","hash":"7a634cadbd67054c01890e9e53e25a93ae9bceca","modified":1618925991640},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/2.png","hash":"6e0330d15be3914a67e9b156c535e26fca450fe7","modified":1618925991640},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/3.png","hash":"420ef838fa281939fbb81087def250f1967cbfcb","modified":1618925991640},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/5.png","hash":"0fa6f1903500807bb8a47c6f266ffa2f682250bc","modified":1618925991640},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/8.png","hash":"0ab0638a26e27a97fa7aa2bb07813e129f4ed520","modified":1618925991640},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/7.png","hash":"6425130843c8d54aa299689da6af5de9eed028ba","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/10.png","hash":"d7088852d1704b04d8ca76e673e3292aaa71c239","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/11.png","hash":"7742618c82ea61528fff548512244fd9df4f9398","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/1.png","hash":"3dae074635784b0423d5b5fbcd1ca89e864de532","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/13.png","hash":"ae225da4b09024d41f50de79237f7ca5e5efcee0","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/12.png","hash":"b7bde3e4a54a9344e0a0fbe2ebb2ead241a2b0a3","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/17.png","hash":"1696a181097c0a2fd1f92301a43ca0586352ff50","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/15.png","hash":"87f57af04c18394b94b1f031e6663293fa02babd","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/14.png","hash":"f4ed42148736e96058123b3be74e6e4f5fb5cb83","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/2.png","hash":"60582a3a4b109ff4d1ba3a6d9751162c0faf0b0e","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/19.png","hash":"d196611ea248bac0f7c87bc6cd09a4465032f7d0","modified":1618925991640},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/18.png","hash":"21679eab83e760a2f0a8b803349bc18e286cbef2","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/20.png","hash":"92cd1c87e1abd09d4ad843e9da3406ca3362e26b","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/22.png","hash":"3e1fccf70bef54bfcb1cc7ebf8b290756d4a6f7e","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/21.png","hash":"f2196fe9ed426a6de5009be99bf36cf64d8c5243","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/25.png","hash":"54f4fefbac550113fc264eb2be27d99acf6e8fb7","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/24.png","hash":"7d35bc708faa327652b71910ea7e22d5a3bee3ac","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/23.png","hash":"84340c4adf2b839b79a11b3a6729ef85c88f8baa","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/26.png","hash":"e95253b1c7d3393b32794833a7e812dbb82f6f91","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/28.png","hash":"04b2dcaab7fcff3bb231fda3c808c72c883ff547","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/32.png","hash":"5c420a7e63c9a47abda57c871ad49f67f276a1b0","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/33.png","hash":"2556af671e114772ff026b0eaf33c30eb6695d88","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/30.png","hash":"3f6fd46b0128df3c9601e1d7e719827937a74e06","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/29.png","hash":"8fdad0563718a09df7c0de183f2624ee788e938e","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/35.png","hash":"fa8d525b06ba87e71c2319b54ecf7d688b304040","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/31.png","hash":"7123b0fc091f49ec47835f32637467a0102b8b9e","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/36.png","hash":"629d4409b9840b1438fe95595a460866ef1030ad","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/34.png","hash":"de3082c2b0aa65217c68eb5ff5dd2dace6592370","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/3.png","hash":"0d3e9050c801f04d7855e0561760876e508c2126","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/38.png","hash":"d87daf4ec95e39467cf8722f83a0017711b457d7","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/39.png","hash":"9c05467571d6b4b29ab3a750eeca1ef7ff7e67d8","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/37.png","hash":"2f024b07b2284ca4d0441d9ce6de4bc55ab453c6","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/41.png","hash":"7c22ae4670a43d2fefc572bf4b6f3856bcfba05d","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/40.PNG","hash":"34e5ccf262dfbb4efb24bc35b3a2ae7535b9eb59","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/4.png","hash":"3acfb0747151939bf39f4f635fb77c6906555a2f","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/5.png","hash":"c8bd93d059a463837e8acf7beaf734590707d4e4","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/43.png","hash":"67607dab3fdc4dd60110cf630be0d811bf5e91db","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/42.png","hash":"9b6cf0274854cc09817f6d395feeca731d7bbe36","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/7.png","hash":"45b928aea11a065fb8c569b4e115b9bb809be13b","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/8.png","hash":"b40a4a4eb5f52e9671741d8771a07ff1e974513b","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/6.png","hash":"57ca5822bbe6e6caf46fb16a63e6b6a7822606de","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/9.png","hash":"a0b2db185c1a25f3b6c334b3468cd4a0b64a6a1f","modified":1618925991641},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/27.png","hash":"b31fb3274b1014c55a95e3361a0a57f108071e38","modified":1618925991641},{"_id":"public/js/config.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1618925991650},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1618925991650},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1618925991650},{"_id":"public/css/toc.css","hash":"2062bf4e5b219654e0d4bf470f5eef1be213da95","modified":1618925991650},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1618925991650},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1618925991650},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1618925991650},{"_id":"public/js/anchor.min.js","hash":"11b2743d5f579cdb286d3c23edcb6ef6abec200e","modified":1618925991650},{"_id":"public/js/html5shiv.js","hash":"45c305ccd2c8895ca5d0a92ef4d01e807b94ed62","modified":1618925991650},{"_id":"public/js/buttons.js","hash":"50a9df98936370997c763e56c993cea6b4b75c25","modified":1618925991650},{"_id":"public/js/fastclick.min.js","hash":"2973f0ada418ebb04b084dc076b2adc282735de5","modified":1618925991650},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1618925991651},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1618925991651},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1618925991651},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1618925991651},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1618925991651},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1618925991651},{"_id":"public/js/respond.min.js","hash":"701a6eb14bc9ec80be896d6b481d8ab4cc9fe7d9","modified":1618925991651},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1618925991651},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1618925991651},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1618925991651},{"_id":"public/css/font-awesome.min.css","hash":"6587e0627d09a6ffb9b9e7db0fd607a3fdcf026d","modified":1618925991651},{"_id":"public/js/analytics.js","hash":"9555d067d7d5e0247c4dba1bb9032330a7cd7f98","modified":1618925991651},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1618925991651},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1618925991651},{"_id":"public/js/embed.js","hash":"7477c8473ce1b80066925709cadc69abaad5c991","modified":1618925991651},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1618925991651},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1618925991651},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1618925991651},{"_id":"public/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320114913928.png","hash":"85e8ac0edfdf925216f50f16be21c6156c66917c","modified":1618925991651},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1618925991651},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1618925991651},{"_id":"public/2017/03/18/hexo-theme-beantech/home_posts_tag-false.png","hash":"86a3a4320012981f2d42eabc6ea172425f2f941a","modified":1618925991651},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/6.png","hash":"55ca3a784c59332a6ff6f0a85f8f3aacea68489d","modified":1618925991651},{"_id":"public/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/16.png","hash":"96c5df836b3cc27490d49b992edffa2add142353","modified":1618925991651},{"_id":"public/img/me.png","hash":"ce297968bf6cd2fa354e6caaf186703c41bfc030","modified":1618925991657},{"_id":"public/img/header_img/about.jpg","hash":"62047310fb7038c66763847ccce9535fee5f22c5","modified":1618925991657},{"_id":"public/img/header_img/tag.png","hash":"e7e8b6fb53e61821a022724045dc22ee504d7ece","modified":1618925991657},{"_id":"public/2017/03/18/hexo-theme-beantech/home_posts_tag-true.png","hash":"a704520b43f26b88d650098f60689af3af5eb106","modified":1618925991657},{"_id":"public/img/header_img/tag.jpg","hash":"e7e8b6fb53e61821a022724045dc22ee504d7ece","modified":1618925991661},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1618925991662},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1618925991663},{"_id":"public/img/header_img/404.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1618925991663},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1618925991663},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1618925991670},{"_id":"public/img/header_img/home.jpg","hash":"7d0382b89ade495e3b9eb12132806129758d5ff2","modified":1618925991673},{"_id":"public/2019/08/17/Vue学习03-生命周期函数/vueLifeLoop.jpg","hash":"1db02cc9577db72c01bcfb25ad62ec2f19ae9bd0","modified":1618925991673},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/4.png","hash":"8cf8e5b8d4b5347d826bcfb131cad7c7910c4073","modified":1618925991694},{"_id":"public/2019/09/25/Docker学习11-部署项目到容器/9.png","hash":"b4d579670380c4bc13646da8ab8f8fcc68e1ee39","modified":1618925991698},{"_id":"public/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/3.png","hash":"b0ef726ba0834b6939b734962e3186035a9f666c","modified":1618925991698},{"_id":"public/2020/12/26/Brook科学上网必备/IMG_4987.PNG","hash":"bf09d518ead67b356de7d8f6858b8b07855e88c1","modified":1618925991699},{"_id":"public/2020/12/26/Brook科学上网必备/QQ截图20201226223743.png","hash":"d1cd36225099642e2c55e86ca3f8c3441e2faea9","modified":1618925991699},{"_id":"public/2017/03/18/hexo-theme-beantech/Demo.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1618925991701}],"Category":[],"Data":[],"Page":[{"layout":"404","type":404,"description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ntype: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2021-04-20T13:28:10.224Z","updated":"2021-04-20T13:28:10.224Z","path":"404.html","title":"","comments":1,"_id":"cknq2qczt0000zgl18a14chr1","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2021-04-20T13:28:10.298Z","path":"archive/index.html","_id":"cknq2qd1g0002zgl19p9bbtve","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"You only get a wand when you enter Hogwarts School of Witchcraft and Wizardry. That's when you start learning magic.","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n> Hakuna Matata!!!\n\n### 关于我\n\n> 两只猫的铲屎官！\n\n### 兴趣方向\n\n> 目前主要兴趣为Java技术栈\n> 喜欢在how2j/SegmentsFault/Github浏览学习博客与项目\n> 遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感\n> 偶尔会上LeetCode/牛客网刷题\n\n### 参与社区\n\n > Github:https://github.com/倪子铭\n >\n > 豆瓣:https://www.douban.com/people/80901919/\n\n### 联系我\n\n>Email: zimingnee@163.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"You only get a wand when you enter Hogwarts School of Witchcraft and Wizardry. That's when you start learning magic.\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n> Hakuna Matata!!!\n\n### 关于我\n\n> 两只猫的铲屎官！\n\n### 兴趣方向\n\n> 目前主要兴趣为Java技术栈\n> 喜欢在how2j/SegmentsFault/Github浏览学习博客与项目\n> 遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感\n> 偶尔会上LeetCode/牛客网刷题\n\n### 参与社区\n\n > Github:https://github.com/倪子铭\n >\n > 豆瓣:https://www.douban.com/people/80901919/\n\n### 联系我\n\n>Email: zimingnee@163.com\n\n","updated":"2021-04-20T13:28:10.298Z","path":"about/index.html","comments":1,"_id":"cknq2qd1i0004zgl1m9p05smf","content":"<h3><span id=\"一句话\">一句话</span></h3>\n<blockquote>\n<p>Hakuna Matata!!!</p>\n</blockquote>\n<h3><span id=\"关于我\">关于我</span></h3>\n<blockquote>\n<p>两只猫的铲屎官！</p>\n</blockquote>\n<h3><span id=\"兴趣方向\">兴趣方向</span></h3>\n<blockquote>\n<p>目前主要兴趣为Java技术栈<br>\n喜欢在how2j/SegmentsFault/Github浏览学习博客与项目<br>\n遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感<br>\n偶尔会上LeetCode/牛客网刷题</p>\n</blockquote>\n<h3><span id=\"参与社区\">参与社区</span></h3>\n<blockquote>\n<p>Github:<a href=\"https://github.com/%E5%80%AA%E5%AD%90%E9%93%AD\" target=\"_blank\" rel=\"noopener\">https://github.com/倪子铭</a></p>\n<p>豆瓣:<a href=\"https://www.douban.com/people/80901919/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/people/80901919/</a></p>\n</blockquote>\n<h3><span id=\"联系我\">联系我</span></h3>\n<blockquote>\n<p>Email: <a href=\"mailto:zimingnee@163.com\" target=\"_blank\" rel=\"noopener\">zimingnee@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>Hakuna Matata!!!</p>\n</blockquote>\n<h3>关于我</h3>\n<blockquote>\n<p>两只猫的铲屎官！</p>\n</blockquote>\n<h3>兴趣方向</h3>\n<blockquote>\n<p>目前主要兴趣为Java技术栈<br>\n喜欢在how2j/SegmentsFault/Github浏览学习博客与项目<br>\n遇到问题会上Google/CSDN/StackOverFlow搜索解决方案，喜欢解决问题以后的成就感<br>\n偶尔会上LeetCode/牛客网刷题</p>\n</blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>Github:<a href=\"https://github.com/%E5%80%AA%E5%AD%90%E9%93%AD\" target=\"_blank\" rel=\"noopener\">https://github.com/倪子铭</a></p>\n<p>豆瓣:<a href=\"https://www.douban.com/people/80901919/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/people/80901919/</a></p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:zimingnee@163.com\" target=\"_blank\" rel=\"noopener\">zimingnee@163.com</a></p>\n</blockquote>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.jpg\"\n---\n","date":"2021-04-20T13:28:10.313Z","updated":"2021-04-20T13:28:10.313Z","path":"tags/index.html","comments":1,"_id":"cknq2qd1m0007zgl1x2iwmpp8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Axios学习1-实现异步通信","catalog":true,"date":"2019-08-18T02:22:38.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n- 从浏览器中创建 XMLHttpRequests\n- 从 node.js 创建 http 请求\n- 支持 Promise API\n    相当于guawa 链式编程 chain programing\n- 拦截请求和响应\n- 转换请求数据和响应数据\n- 取消请求\n- 自动转换 JSON 数据\n- 客户端支持防御 XSRF（跨站请求伪造）\nGitHub：https://github.com/axios/axios\n\n### 为什么要使用 Axios\n由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js\n 并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，\n 不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架\n\n### 第一个 Axios 应用程序\n咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：\n\n~~~ vue\n<div id=\"app\">\n    <div>名称: {{info.name}}</div>\n    <div>地址: {{info.address.country}} - {{info.address.city}} - {{info.address.street}}</div>\n    <div>链接: <a v-bind:href=\"info.url\" target=\"_blank\">{{info.name}}</a></div>\n    <!--友情链接: <a v-for=\"link in lnfo.links\">link.name</a>-->\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script>\n  var vm = new Vue({\n    el:\"#app\",\n    data(){\n      return{\n        info:{\n          name: null,\n          address:{\n            country: null,\n            city: null,\n            street: null\n          },\n          url:null,\n          links:[\n            {\n              name: null,\n              url: null\n            }\n          ]\n        }\n      }\n    },\n    mounted(){\n      axios\n        .get('src/assets/Demo.json')\n        .then(response => (this.info = response.data));\n    }\n  })\n</script>\n~~~\n结果输出\n![](Axios学习1-实现异步通信/axios.png)\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n","source":"_posts/Axios学习1-实现异步通信.md","raw":"---\ntitle: \"Axios学习1-实现异步通信\"\ncatalog: true\ndate: 2019-08-18 10:22:38\nsubtitle:\nheader-img:\ntags: [Axios, Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n- 从浏览器中创建 XMLHttpRequests\n- 从 node.js 创建 http 请求\n- 支持 Promise API\n    相当于guawa 链式编程 chain programing\n- 拦截请求和响应\n- 转换请求数据和响应数据\n- 取消请求\n- 自动转换 JSON 数据\n- 客户端支持防御 XSRF（跨站请求伪造）\nGitHub：https://github.com/axios/axios\n\n### 为什么要使用 Axios\n由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js\n 并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，\n 不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架\n\n### 第一个 Axios 应用程序\n咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：\n\n~~~ vue\n<div id=\"app\">\n    <div>名称: {{info.name}}</div>\n    <div>地址: {{info.address.country}} - {{info.address.city}} - {{info.address.street}}</div>\n    <div>链接: <a v-bind:href=\"info.url\" target=\"_blank\">{{info.name}}</a></div>\n    <!--友情链接: <a v-for=\"link in lnfo.links\">link.name</a>-->\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script>\n  var vm = new Vue({\n    el:\"#app\",\n    data(){\n      return{\n        info:{\n          name: null,\n          address:{\n            country: null,\n            city: null,\n            street: null\n          },\n          url:null,\n          links:[\n            {\n              name: null,\n              url: null\n            }\n          ]\n        }\n      }\n    },\n    mounted(){\n      axios\n        .get('src/assets/Demo.json')\n        .then(response => (this.info = response.data));\n    }\n  })\n</script>\n~~~\n结果输出\n![](Axios学习1-实现异步通信/axios.png)\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n","slug":"Axios学习1-实现异步通信","published":1,"updated":"2021-04-20T13:28:10.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1d0001zgl1se4d3bhx","content":"<h1><span id=\"vue学习记录\">Vue学习记录</span></h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2><span id=\"使用-axios-实现异步通信\">使用 Axios 实现异步通信</span></h2>\n<h3><span id=\"什么是-axios\">什么是 Axios</span></h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 Promise API<br>\n相当于guawa 链式编程 chain programing</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF（跨站请求伪造）<br>\nGitHub：<a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">https://github.com/axios/axios</a></li>\n</ul>\n<h3><span id=\"为什么要使用-axios\">为什么要使用 Axios</span></h3>\n<p>由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js<br>\n并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，<br>\n不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架</p>\n<h3><span id=\"第一个-axios-应用程序\">第一个 Axios 应用程序</span></h3>\n<p>咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div&gt;名称: &#123;&#123;info.name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;地址: &#123;&#123;info.address.country&#125;&#125; - &#123;&#123;info.address.city&#125;&#125; - &#123;&#123;info.address.street&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;链接: &lt;a v-bind:href=&quot;info.url&quot; target=&quot;_blank&quot;&gt;&#123;&#123;info.name&#125;&#125;&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!--友情链接: &lt;a v-for=&quot;link in lnfo.links&quot;&gt;link.name&lt;/a&gt;--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var vm = new Vue(&#123;</span><br><span class=\"line\">    el:&quot;#app&quot;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return&#123;</span><br><span class=\"line\">        info:&#123;</span><br><span class=\"line\">          name: null,</span><br><span class=\"line\">          address:&#123;</span><br><span class=\"line\">            country: null,</span><br><span class=\"line\">            city: null,</span><br><span class=\"line\">            street: null</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          url:null,</span><br><span class=\"line\">          links:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              name: null,</span><br><span class=\"line\">              url: null</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">      axios</span><br><span class=\"line\">        .get(&apos;src/assets/Demo.json&apos;)</span><br><span class=\"line\">        .then(response =&gt; (this.info = response.data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>结果输出<br>\n<img src=\"/2019/08/18/Axios学习1-实现异步通信/axios.png\" alt></p>\n<h2><span id=\"vue布局\">Vue布局</span></h2>\n<h3><span id=\"表单输出\">表单输出</span></h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3><span id=\"为什么要实现数据的双向绑定\">为什么要实现数据的双向绑定</span></h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3><span id=\"在表单中使用双向数据绑定\">在表单中使用双向数据绑定</span></h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>使用 Axios 实现异步通信</h2>\n<h3>什么是 Axios</h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 Promise API<br>\n相当于guawa 链式编程 chain programing</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF（跨站请求伪造）<br>\nGitHub：<a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">https://github.com/axios/axios</a></li>\n</ul>\n<h3>为什么要使用 Axios</h3>\n<p>由于 Vue.js 是一个 视图层框架 并且作者（尤雨溪）严格准守 SoC （关注度分离原则），所以 Vue.js<br>\n并不包含 AJAX 的通信功能，为了解决通信问题，作者单独开发了一个名为 vue-resource 的插件，<br>\n不过在进入 2.0 版本以后停止了对该插件的维护并推荐了 Axios 框架</p>\n<h3>第一个 Axios 应用程序</h3>\n<p>咱们开发的接口大部分都是采用 JSON 格式，可以先在项目里模拟一段 JSON 数据，数据内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div&gt;名称: &#123;&#123;info.name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;地址: &#123;&#123;info.address.country&#125;&#125; - &#123;&#123;info.address.city&#125;&#125; - &#123;&#123;info.address.street&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div&gt;链接: &lt;a v-bind:href=&quot;info.url&quot; target=&quot;_blank&quot;&gt;&#123;&#123;info.name&#125;&#125;&lt;/a&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!--友情链接: &lt;a v-for=&quot;link in lnfo.links&quot;&gt;link.name&lt;/a&gt;--&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var vm = new Vue(&#123;</span><br><span class=\"line\">    el:&quot;#app&quot;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">      return&#123;</span><br><span class=\"line\">        info:&#123;</span><br><span class=\"line\">          name: null,</span><br><span class=\"line\">          address:&#123;</span><br><span class=\"line\">            country: null,</span><br><span class=\"line\">            city: null,</span><br><span class=\"line\">            street: null</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          url:null,</span><br><span class=\"line\">          links:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              name: null,</span><br><span class=\"line\">              url: null</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted()&#123;</span><br><span class=\"line\">      axios</span><br><span class=\"line\">        .get(&apos;src/assets/Demo.json&apos;)</span><br><span class=\"line\">        .then(response =&gt; (this.info = response.data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>结果输出<br>\n<img src=\"/2019/08/18/Axios学习1-实现异步通信/axios.png\" alt></p>\n<h2>Vue布局</h2>\n<h3>表单输出</h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3>为什么要实现数据的双向绑定</h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3>在表单中使用双向数据绑定</h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n"},{"title":"Axios学习2-跨域通信","catalog":true,"date":"2019-08-26T02:25:50.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n  这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n## 测试数据源\n我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源\n~~~ json\n{\n  \"name\": \"广州千锋\",\n  \"url\": \"http://www.funtl.com\",\n  \"page\": 88,\n  \"isNonProfit\": true,\n  \"address\": {\n    \"street\": \"元岗路.\",\n    \"city\": \"广东广州\",\n    \"country\": \"中国\"\n  },\n  \"links\": [\n    {\n      \"name\": \"Google\",\n      \"url\": \"http://www.google.com\"\n    },\n    {\n      \"name\": \"Baidu\",\n      \"url\": \"http://www.baidu.com\"\n    },\n    {\n      \"name\": \"SoSo\",\n      \"url\": \"http://www.SoSo.com\"\n    }\n  ]\n}\n~~~\n## 开始使用axios请求data.json\n\n### main.js\n~~~ javascript\n// 导入\nimport axios from '../node_modules/axios'\n// 安装路由\nVue.prototype.axios = axios;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n### 路由配置 index.js\n~~~ javascript \nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nimport Login from '../views/Login'\n//user\nimport UserProfile from '../views/user/UserProfile'\n\nVue.use(Router);\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      // 登录页\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      // 首页\n      path: '/main',\n      props:true,\n      name: 'Main',\n      component: Main,\n      children:[\n        {path:'/user/profile/:id', name:'UserProfile', component:UserProfile}\n      ]\n    }\n\n  ]\n});\n~~~\n\n### 在UserProfile组件中发送axios请求\n~~~ javascript\nexport default {\n  name: \"UserProfile\",\n  beforeRouteEnter: (to, from, next) => {\n    console.log(\"准备进入个人信息页\");\n    // 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例\n    next(vm => {\n      vm.getData();\n    });\n  },\n  beforeRouteLeave: (to, from, next) => {\n    console.log(\"准备离开个人信息页\");\n    next();\n  },\n  methods: {\n    getData: function () {\n      this.axios({\n        method: 'get',\n        url: 'http://服务器地址:8080/data.json'\n      }).then(function (repos) {\n        console.log(repos);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n}\n~~~\n### 启动Vue 项目\n\n控制台输出`npm run dev`回车,控制台信息输出\n\n~~~ console\n DONE  Compiled successfully in 547ms10:34:51 AM\n\n I  Your application is running here: http://localhost:8082\n~~~\n### 查看控制台信息\n按下`F12`调出谷歌浏览器的前端调试工具.信息如下\n~~~ console\nAccess to XMLHttpRequest at 'http://服务器地址:8080/data.json' \nfrom origin 'http://localhost:8082' has been blocked by CORS \npolicy: No 'Access-Control-Allow-Origin' header is present on \nthe requested resource.\n~~~\n发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.\n\n## 解决方案\nAxios的跨域是怎么处理的呢?\n\n查看Vue版本信息\n~~~ console\n$ vue --version\n2.9.6\n~~~\n\n### 配置BaseURL\n在 main.js 中，配置下 Url 前缀\n\n~~~ JavaScript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport router from './router'\nimport axios from '../node_modules/axios'\n\n// 导入 ElementUI\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nimport App from './App'\n\n// 安装路由\nVue.use(VueRouter);\nVue.prototype.axios = axios;\n// 安装 ElementUI\nVue.use(ElementUI);\n\naxios.defaults.baseURL = '/api';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nVue.config.productionTip = false;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n`axios.defaults.baseURL = '/api';`\n这样每次发送请求都会带一个 /api 的前缀\n\n`axios.defaults.headers.post['Content-Type'] = 'application/json';`\n\n### 配置代理\nconfig 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：\n~~~ JavaScript\nmodule.exports = {\n  dev: {\n\n    // Paths\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/',\n    proxyTable: {\n      '/api':{\n        target: \"http://116.62.110.99:8080\",\n        changeOrigin:true,\n        pathRewrite:{\n          '^/api':''\n        }\n      }\n    },\n    ....\n  }\n} \n~~~\n### 修改请求URL \n在请求页面中,我的是`UserProfile.vue`\n~~~ javascript\nmethods: {\n  getData: function () {\n    this.axios({\n      method: 'get',\n      url: '/data.json'\n    }).then(function (repos) {\n      console.log(repos.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n~~~\n\n### 查看结果\n在浏览器中打开界面请求查看控制台信息如下:\n![](Axios学习2-跨域通信/Access.png)\n\n### 参考资料\n> Axiso 解决跨域访问\n> https://blog.csdn.net/yuanlaijike/article/details/80522621\n> 路由钩子与异步请求\n> https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\n\n\n","source":"_posts/Axios学习2-跨域通信.md","raw":"---\ntitle: Axios学习2-跨域通信\ncatalog: true\ndate: 2019-08-26 10:25:50\nsubtitle:\nheader-img:\ntags: [Axios, Vue]\n---\n\n# Vue学习记录\n  这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 使用 Axios 实现异步通信\n\n### 什么是 Axios\nAxios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：\n\n## 测试数据源\n我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源\n~~~ json\n{\n  \"name\": \"广州千锋\",\n  \"url\": \"http://www.funtl.com\",\n  \"page\": 88,\n  \"isNonProfit\": true,\n  \"address\": {\n    \"street\": \"元岗路.\",\n    \"city\": \"广东广州\",\n    \"country\": \"中国\"\n  },\n  \"links\": [\n    {\n      \"name\": \"Google\",\n      \"url\": \"http://www.google.com\"\n    },\n    {\n      \"name\": \"Baidu\",\n      \"url\": \"http://www.baidu.com\"\n    },\n    {\n      \"name\": \"SoSo\",\n      \"url\": \"http://www.SoSo.com\"\n    }\n  ]\n}\n~~~\n## 开始使用axios请求data.json\n\n### main.js\n~~~ javascript\n// 导入\nimport axios from '../node_modules/axios'\n// 安装路由\nVue.prototype.axios = axios;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n### 路由配置 index.js\n~~~ javascript \nimport Vue from 'vue'\nimport Router from 'vue-router'\n\nimport Login from '../views/Login'\n//user\nimport UserProfile from '../views/user/UserProfile'\n\nVue.use(Router);\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      // 登录页\n      path: '/login',\n      name: 'Login',\n      component: Login\n    },\n    {\n      // 首页\n      path: '/main',\n      props:true,\n      name: 'Main',\n      component: Main,\n      children:[\n        {path:'/user/profile/:id', name:'UserProfile', component:UserProfile}\n      ]\n    }\n\n  ]\n});\n~~~\n\n### 在UserProfile组件中发送axios请求\n~~~ javascript\nexport default {\n  name: \"UserProfile\",\n  beforeRouteEnter: (to, from, next) => {\n    console.log(\"准备进入个人信息页\");\n    // 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例\n    next(vm => {\n      vm.getData();\n    });\n  },\n  beforeRouteLeave: (to, from, next) => {\n    console.log(\"准备离开个人信息页\");\n    next();\n  },\n  methods: {\n    getData: function () {\n      this.axios({\n        method: 'get',\n        url: 'http://服务器地址:8080/data.json'\n      }).then(function (repos) {\n        console.log(repos);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }\n}\n~~~\n### 启动Vue 项目\n\n控制台输出`npm run dev`回车,控制台信息输出\n\n~~~ console\n DONE  Compiled successfully in 547ms10:34:51 AM\n\n I  Your application is running here: http://localhost:8082\n~~~\n### 查看控制台信息\n按下`F12`调出谷歌浏览器的前端调试工具.信息如下\n~~~ console\nAccess to XMLHttpRequest at 'http://服务器地址:8080/data.json' \nfrom origin 'http://localhost:8082' has been blocked by CORS \npolicy: No 'Access-Control-Allow-Origin' header is present on \nthe requested resource.\n~~~\n发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.\n\n## 解决方案\nAxios的跨域是怎么处理的呢?\n\n查看Vue版本信息\n~~~ console\n$ vue --version\n2.9.6\n~~~\n\n### 配置BaseURL\n在 main.js 中，配置下 Url 前缀\n\n~~~ JavaScript\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport router from './router'\nimport axios from '../node_modules/axios'\n\n// 导入 ElementUI\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nimport App from './App'\n\n// 安装路由\nVue.use(VueRouter);\nVue.prototype.axios = axios;\n// 安装 ElementUI\nVue.use(ElementUI);\n\naxios.defaults.baseURL = '/api';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\nVue.config.productionTip = false;\n\nnew Vue({\n  el: '#app',\n  // 启用路由\n  router,\n  axios,\n  // 启用 ElementUI\n  render: h => h(App)\n});\n\n~~~\n`axios.defaults.baseURL = '/api';`\n这样每次发送请求都会带一个 /api 的前缀\n\n`axios.defaults.headers.post['Content-Type'] = 'application/json';`\n\n### 配置代理\nconfig 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：\n~~~ JavaScript\nmodule.exports = {\n  dev: {\n\n    // Paths\n    assetsSubDirectory: 'static',\n    assetsPublicPath: '/',\n    proxyTable: {\n      '/api':{\n        target: \"http://116.62.110.99:8080\",\n        changeOrigin:true,\n        pathRewrite:{\n          '^/api':''\n        }\n      }\n    },\n    ....\n  }\n} \n~~~\n### 修改请求URL \n在请求页面中,我的是`UserProfile.vue`\n~~~ javascript\nmethods: {\n  getData: function () {\n    this.axios({\n      method: 'get',\n      url: '/data.json'\n    }).then(function (repos) {\n      console.log(repos.data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n~~~\n\n### 查看结果\n在浏览器中打开界面请求查看控制台信息如下:\n![](Axios学习2-跨域通信/Access.png)\n\n### 参考资料\n> Axiso 解决跨域访问\n> https://blog.csdn.net/yuanlaijike/article/details/80522621\n> 路由钩子与异步请求\n> https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\n\n\n","slug":"Axios学习2-跨域通信","published":1,"updated":"2021-04-20T13:28:10.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1h0003zgl14vyk5x77","content":"<h1><span id=\"vue学习记录\">Vue学习记录</span></h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2><span id=\"使用-axios-实现异步通信\">使用 Axios 实现异步通信</span></h2>\n<h3><span id=\"什么是-axios\">什么是 Axios</span></h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<h2><span id=\"测试数据源\">测试数据源</span></h2>\n<p>我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"广州千锋\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.funtl.com\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"page\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isNonProfit\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"元岗路.\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"广东广州\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"links\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Google\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.google.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Baidu\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.baidu.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"SoSo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.SoSo.com\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"开始使用axios请求datajson\">开始使用axios请求data.json</span></h2>\n<h3><span id=\"mainjs\">main.js</span></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"路由配置-indexjs\">路由配置 index.js</span></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'../views/Login'</span></span><br><span class=\"line\"><span class=\"comment\">//user</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserProfile <span class=\"keyword\">from</span> <span class=\"string\">'../views/user/UserProfile'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 登录页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Login'</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 首页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/main'</span>,</span><br><span class=\"line\">      props:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Main'</span>,</span><br><span class=\"line\">      component: Main,</span><br><span class=\"line\">      children:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/profile/:id'</span>, <span class=\"attr\">name</span>:<span class=\"string\">'UserProfile'</span>, <span class=\"attr\">component</span>:UserProfile&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"在userprofile组件中发送axios请求\">在UserProfile组件中发送axios请求</span></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"UserProfile\"</span>,</span><br><span class=\"line\">  beforeRouteEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备进入个人信息页\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例</span></span><br><span class=\"line\">    next(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">      vm.getData();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备离开个人信息页\"</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">        url: <span class=\"string\">'http://服务器地址:8080/data.json'</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(repos);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"启动vue-项目\">启动Vue 项目</span></h3>\n<p>控制台输出<code>npm run dev</code>回车,控制台信息输出</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DONE  Compiled successfully in 547ms10:34:51 AM</span><br><span class=\"line\"></span><br><span class=\"line\">I  Your application is running here: http://localhost:8082</span><br></pre></td></tr></table></figure>\n<h3><span id=\"查看控制台信息\">查看控制台信息</span></h3>\n<p>按下<code>F12</code>调出谷歌浏览器的前端调试工具.信息如下</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at 'http://服务器地址:8080/data.json' </span><br><span class=\"line\">from origin 'http://localhost:8082' has been blocked by CORS </span><br><span class=\"line\">policy: No 'Access-Control-Allow-Origin' header is present on </span><br><span class=\"line\">the requested resource.</span><br></pre></td></tr></table></figure>\n<p>发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.</p>\n<h2><span id=\"解决方案\">解决方案</span></h2>\n<p>Axios的跨域是怎么处理的呢?</p>\n<p>查看Vue版本信息</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vue --version</span><br><span class=\"line\">2.9.6</span><br></pre></td></tr></table></figure>\n<h3><span id=\"配置baseurl\">配置BaseURL</span></h3>\n<p>在 main.js 中，配置下 Url 前缀</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入 ElementUI</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"><span class=\"comment\">// 安装 ElementUI</span></span><br><span class=\"line\">Vue.use(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'/api'</span>;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>axios.defaults.baseURL = '/api';</code><br>\n这样每次发送请求都会带一个 /api 的前缀</p>\n<p><code>axios.defaults.headers.post['Content-Type'] = 'application/json';</code></p>\n<h3><span id=\"配置代理\">配置代理</span></h3>\n<p>config 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    proxyTable: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>:&#123;</span><br><span class=\"line\">        target: <span class=\"string\">\"http://116.62.110.99:8080\"</span>,</span><br><span class=\"line\">        changeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite:&#123;</span><br><span class=\"line\">          <span class=\"string\">'^/api'</span>:<span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"修改请求url\">修改请求URL</span></h3>\n<p>在请求页面中,我的是<code>UserProfile.vue</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/data.json'</span></span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(repos.data);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"查看结果\">查看结果</span></h3>\n<p>在浏览器中打开界面请求查看控制台信息如下:<br>\n<img src=\"/2019/08/26/Axios学习2-跨域通信/Access.png\" alt></p>\n<h3><span id=\"参考资料\">参考资料</span></h3>\n<blockquote>\n<p>Axiso 解决跨域访问<br>\n<a href=\"https://blog.csdn.net/yuanlaijike/article/details/80522621\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yuanlaijike/article/details/80522621</a><br>\n路由钩子与异步请求<br>\n<a href=\"https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-router/路由钩子与异步请求.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>使用 Axios 实现异步通信</h2>\n<h3>什么是 Axios</h3>\n<p>Axios 是一个开源的可以用在浏览器端和 NodeJS 的异步通信框架，她的主要作用就是实现 AJAX 异步通信，其功能特点如下：</p>\n<h2>测试数据源</h2>\n<p>我在自己的阿里ECS上搭建了一个tomcat的web项目:data.json做为数据测试源</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"广州千锋\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.funtl.com\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"page\"</span>: <span class=\"number\">88</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"isNonProfit\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"address\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"street\"</span>: <span class=\"string\">\"元岗路.\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"city\"</span>: <span class=\"string\">\"广东广州\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"country\"</span>: <span class=\"string\">\"中国\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"links\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Google\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.google.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Baidu\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.baidu.com\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"SoSo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://www.SoSo.com\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>开始使用axios请求data.json</h2>\n<h3>main.js</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3>路由配置 index.js</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Login <span class=\"keyword\">from</span> <span class=\"string\">'../views/Login'</span></span><br><span class=\"line\"><span class=\"comment\">//user</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UserProfile <span class=\"keyword\">from</span> <span class=\"string\">'../views/user/UserProfile'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 登录页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Login'</span>,</span><br><span class=\"line\">      component: Login</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 首页</span></span><br><span class=\"line\">      path: <span class=\"string\">'/main'</span>,</span><br><span class=\"line\">      props:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'Main'</span>,</span><br><span class=\"line\">      component: Main,</span><br><span class=\"line\">      children:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">path</span>:<span class=\"string\">'/user/profile/:id'</span>, <span class=\"attr\">name</span>:<span class=\"string\">'UserProfile'</span>, <span class=\"attr\">component</span>:UserProfile&#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3>在UserProfile组件中发送axios请求</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"UserProfile\"</span>,</span><br><span class=\"line\">  beforeRouteEnter: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备进入个人信息页\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意，一定要在 next 中请求，因为该方法调用时 Vue 实例还没有创建，此时无法获取到 this 对象，在这里使用官方提供的回调函数拿到当前实例</span></span><br><span class=\"line\">    next(<span class=\"function\"><span class=\"params\">vm</span> =&gt;</span> &#123;</span><br><span class=\"line\">      vm.getData();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  beforeRouteLeave: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"准备离开个人信息页\"</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">        method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">        url: <span class=\"string\">'http://服务器地址:8080/data.json'</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(repos);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>启动Vue 项目</h3>\n<p>控制台输出<code>npm run dev</code>回车,控制台信息输出</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DONE  Compiled successfully in 547ms10:34:51 AM</span><br><span class=\"line\"></span><br><span class=\"line\">I  Your application is running here: http://localhost:8082</span><br></pre></td></tr></table></figure>\n<h3>查看控制台信息</h3>\n<p>按下<code>F12</code>调出谷歌浏览器的前端调试工具.信息如下</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at 'http://服务器地址:8080/data.json' </span><br><span class=\"line\">from origin 'http://localhost:8082' has been blocked by CORS </span><br><span class=\"line\">policy: No 'Access-Control-Allow-Origin' header is present on </span><br><span class=\"line\">the requested resource.</span><br></pre></td></tr></table></figure>\n<p>发现是跨域问题,因为Vue的项目是在我PC上运行的,而data.json在我的ECS服务器上.所以出现了跨域问题.</p>\n<h2>解决方案</h2>\n<p>Axios的跨域是怎么处理的呢?</p>\n<p>查看Vue版本信息</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> vue --version</span><br><span class=\"line\">2.9.6</span><br></pre></td></tr></table></figure>\n<h3>配置BaseURL</h3>\n<p>在 main.js 中，配置下 Url 前缀</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'../node_modules/axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入 ElementUI</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安装路由</span></span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\">Vue.prototype.axios = axios;</span><br><span class=\"line\"><span class=\"comment\">// 安装 ElementUI</span></span><br><span class=\"line\">Vue.use(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">'/api'</span>;</span><br><span class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/json'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">  router,</span><br><span class=\"line\">  axios,</span><br><span class=\"line\">  <span class=\"comment\">// 启用 ElementUI</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>axios.defaults.baseURL = '/api';</code><br>\n这样每次发送请求都会带一个 /api 的前缀</p>\n<p><code>axios.defaults.headers.post['Content-Type'] = 'application/json';</code></p>\n<h3>配置代理</h3>\n<p>config 文件夹下的 index.js 文件，在 proxyTable 中加上如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  dev: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Paths</span></span><br><span class=\"line\">    assetsSubDirectory: <span class=\"string\">'static'</span>,</span><br><span class=\"line\">    assetsPublicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    proxyTable: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>:&#123;</span><br><span class=\"line\">        target: <span class=\"string\">\"http://116.62.110.99:8080\"</span>,</span><br><span class=\"line\">        changeOrigin:<span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite:&#123;</span><br><span class=\"line\">          <span class=\"string\">'^/api'</span>:<span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>修改请求URL</h3>\n<p>在请求页面中,我的是<code>UserProfile.vue</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  getData: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.axios(&#123;</span><br><span class=\"line\">      method: <span class=\"string\">'get'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/data.json'</span></span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">repos</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(repos.data);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>查看结果</h3>\n<p>在浏览器中打开界面请求查看控制台信息如下:<br>\n<img src=\"/2019/08/26/Axios学习2-跨域通信/Access.png\" alt></p>\n<h3>参考资料</h3>\n<blockquote>\n<p>Axiso 解决跨域访问<br>\n<a href=\"https://blog.csdn.net/yuanlaijike/article/details/80522621\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yuanlaijike/article/details/80522621</a><br>\n路由钩子与异步请求<br>\n<a href=\"https://www.funtl.com/zh/vue-router/%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-router/路由钩子与异步请求.html</a></p>\n</blockquote>\n"},{"title":"Brook科学上网必备","catalog":true,"date":"2020-12-26T14:16:19.000Z","subtitle":null,"header-img":null,"_content":"# 为什么使用Brook\n\n起因是因为在谷歌云平台使用了SSR科学上网后, 一小时不到IP被识别了...\n\n查询相关资料后发现Brook是一个比较偏门的技术, 用这个来科学上网应该比较难被GFW甄别出来\n\nSSR 已经停止更新一段时间了. 相关应该开源已久 GFW团队 也可以针对该技术识别.\n\n\n\n# Brook服务搭建前提\n\n- 一台可连接的墙外服务器 推荐GCP\n  - 服务器地点可选, IP成服务可以销毁再新建挂载, 相关教程自己去找. 这里不再赘述.\n\n## Brook是什么\n\n官方github介绍\n\n> Brook is a cross-platform strong encryption and not detectable proxy.\n> Brook's goal is to keep it **simple**, **stupid** and **not detectable**.\n\n跨平台 强加密 无法被检测\n\n## Brook使用\n\n### 命令行安装 brook\n\n\n\n#### 下载Brook\n\n命令: `$ curl -L https://github.com/txthinking/brook/releases/download/v20200909/brook_linux_amd64 -o /usr/bin/brook $ chmod +x /usr/bin/brook`\n\n```\n☁  jermainenee  curl -L https://github.com/txthinking/brook/releases/download/v20210101/brook_linux_amd64 -o /usr/b\nin/brook\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   641  100   641    0     0    981      0 --:--:-- --:--:-- --:--:--   981\n100 10.8M  100 10.8M    0     0  3062k      0  0:00:03  0:00:03 --:--:-- 5206k\n☁  jermainenee  chmod +x /usr/bin/brook\n\n```\n\n#### 安装 nami\n\n应该是一个包管理器, 官方推荐使用nami安装\n\n命令:`$ curl -L https://git.io/getnami | bash && sleep 6 && exec -l $SHELL`\n\n```\n☁  jermainenee  nami install github.com/txthinking/brook\nzsh: command not found: nami\n☁  jermainenee  curl -L https://git.io/getnami | bash && sleep 6 && exec -l $SHELL\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0\n100  1478  100  1478    0     0    946      0  0:00:01  0:00:01 --:--:--   946\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   642  100   642    0     0    992      0 --:--:-- --:--:-- --:--:--   990\n100 11.5M  100 11.5M    0     0  3183k      0  0:00:03  0:00:03 --:--:-- 5304k\n+-------------------+----------------------------+\n| Package           | github.com/txthinking/nami |\n|                   |                            |\n| Installed Version | v20201101                  |\n| Installed Files   | nami                       |\n+-------------------+----------------------------+\n\n☁  jermainenee  nami install github.com/txthinking/nami\n+-------------------+----------------------------+\n| Package           | github.com/txthinking/nami |\n|                   |                            |\n| Installed Version | v20201101                  |\n| Installed Files   | nami                       |\n+-------------------+----------------------------+\n\n```\n\n#### 安装brook\n\n命令: `$ nami install github.com/txthinking/brook`\n\n```\n☁  jermainenee  nami install github.com/txthinking/brook\n+-------------------+-----------------------------+\n| Package           | github.com/txthinking/brook |\n|                   |                             |\n| Installed Version | v20210101                   |\n| Installed Files   | brook                       |\n+-------------------+-----------------------------+\n\n```\n\n\n\n### Brook的使用\n\n命令: `brook server -l :9999 -p hello`\n\n:9999 是端口暴露\n\n-p hello 是密码\n\n```\n☁  jermainenee  brook server -l :8004 -p hello\n^C2020/12/26 21:43:47 main.go:928: accept tcp [::]:8004: use of closed network connection\n\n```\n\n测试连接\n\n![QQ截图20201226223304](Brook科学上网必备/QQ截图20201226223304.png)\n\n网速测试\n\n![微信图片_20201226221856](Brook科学上网必备/微信图片_20201226221856.png)\n\n这里一旦关掉terminal的话brook服务就会停止, 所以按照官方文档开启守护进程\n\n#### 安装joker 开启守护进程\n\n\n\n```\n☁  jermainenee  nami install github.com/txthinking/joker\n+-------------------+-----------------------------+\n| Package           | github.com/txthinking/joker |\n|                   |                             |\n| Installed Version | v20200902                   |\n| Installed Files   | joker                       |\n+-------------------+-----------------------------+\n\n```\n\n#### 配置brook\n\n```\n☁  jermainenee  joker brook server -l :8004 -p ziming\n☁  jermainenee  joker list\n17298 pts/0    Sl     0:00 brook server -l :8004 -p ziming\n☁  jermainenee  \n☁  jermainenee  ./shadowsocks-all.sh uninstall\nWhich Shadowsocks server you want to uninstall?\n1) Shadowsocks-Python\n2) ShadowsocksR\n3) Shadowsocks-Go\n4) Shadowsocks-libev\nPlease enter a number [1-4]:2\n\nYou choose = ShadowsocksR\n\nAre you sure uninstall ShadowsocksR? [y/n]\n(default: n):y\nIPv6 support\n2020-12-26 21:45:02 INFO     shell.py:74 ShadowsocksR SSRR 3.2.2 2018-05-22\nstopped\nStopping ShadowsocksR success\n[Info] ShadowsocksR uninstall success\n```\n\n#### windows client Brook客户端下载\n\n> 下载地址\n>\n> https://github.com/txthinking/brook/releases\n\n#### IOS 移动端 下载\n\n> https://apps.apple.com/us/app/brook-undetectable-proxy-vpn/id1216002642\n\n目前还是免费的,而且是官方开发的app\n\n![](Brook科学上网必备/IMG_4987.PNG)\n\n#### 总结\n\nbrook 的配置十分简单, 使用起来比ssr服务还要简单.\n\nbrook 总共4总协议, 新的协议名称为server,这里采用server协议\n\n![QQ截图20201226223632](Brook科学上网必备/QQ截图20201226223632.png)\n\n打开YouTube\n\n![QQ截图20201226223743](Brook科学上网必备/QQ截图20201226223743.png)\n\n\n\n## 参考资料\n> https://txthinking.github.io/brook/#/\n>\n> https://github.com/txthinking/brook\n","source":"_posts/Brook科学上网必备.md","raw":"---\ntitle: Brook科学上网必备\ncatalog: true\ntags: [梯子, Brook]\ndate: 2020-12-26 22:16:19\nsubtitle:\nheader-img:\n---\n# 为什么使用Brook\n\n起因是因为在谷歌云平台使用了SSR科学上网后, 一小时不到IP被识别了...\n\n查询相关资料后发现Brook是一个比较偏门的技术, 用这个来科学上网应该比较难被GFW甄别出来\n\nSSR 已经停止更新一段时间了. 相关应该开源已久 GFW团队 也可以针对该技术识别.\n\n\n\n# Brook服务搭建前提\n\n- 一台可连接的墙外服务器 推荐GCP\n  - 服务器地点可选, IP成服务可以销毁再新建挂载, 相关教程自己去找. 这里不再赘述.\n\n## Brook是什么\n\n官方github介绍\n\n> Brook is a cross-platform strong encryption and not detectable proxy.\n> Brook's goal is to keep it **simple**, **stupid** and **not detectable**.\n\n跨平台 强加密 无法被检测\n\n## Brook使用\n\n### 命令行安装 brook\n\n\n\n#### 下载Brook\n\n命令: `$ curl -L https://github.com/txthinking/brook/releases/download/v20200909/brook_linux_amd64 -o /usr/bin/brook $ chmod +x /usr/bin/brook`\n\n```\n☁  jermainenee  curl -L https://github.com/txthinking/brook/releases/download/v20210101/brook_linux_amd64 -o /usr/b\nin/brook\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   641  100   641    0     0    981      0 --:--:-- --:--:-- --:--:--   981\n100 10.8M  100 10.8M    0     0  3062k      0  0:00:03  0:00:03 --:--:-- 5206k\n☁  jermainenee  chmod +x /usr/bin/brook\n\n```\n\n#### 安装 nami\n\n应该是一个包管理器, 官方推荐使用nami安装\n\n命令:`$ curl -L https://git.io/getnami | bash && sleep 6 && exec -l $SHELL`\n\n```\n☁  jermainenee  nami install github.com/txthinking/brook\nzsh: command not found: nami\n☁  jermainenee  curl -L https://git.io/getnami | bash && sleep 6 && exec -l $SHELL\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0\n100  1478  100  1478    0     0    946      0  0:00:01  0:00:01 --:--:--   946\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   642  100   642    0     0    992      0 --:--:-- --:--:-- --:--:--   990\n100 11.5M  100 11.5M    0     0  3183k      0  0:00:03  0:00:03 --:--:-- 5304k\n+-------------------+----------------------------+\n| Package           | github.com/txthinking/nami |\n|                   |                            |\n| Installed Version | v20201101                  |\n| Installed Files   | nami                       |\n+-------------------+----------------------------+\n\n☁  jermainenee  nami install github.com/txthinking/nami\n+-------------------+----------------------------+\n| Package           | github.com/txthinking/nami |\n|                   |                            |\n| Installed Version | v20201101                  |\n| Installed Files   | nami                       |\n+-------------------+----------------------------+\n\n```\n\n#### 安装brook\n\n命令: `$ nami install github.com/txthinking/brook`\n\n```\n☁  jermainenee  nami install github.com/txthinking/brook\n+-------------------+-----------------------------+\n| Package           | github.com/txthinking/brook |\n|                   |                             |\n| Installed Version | v20210101                   |\n| Installed Files   | brook                       |\n+-------------------+-----------------------------+\n\n```\n\n\n\n### Brook的使用\n\n命令: `brook server -l :9999 -p hello`\n\n:9999 是端口暴露\n\n-p hello 是密码\n\n```\n☁  jermainenee  brook server -l :8004 -p hello\n^C2020/12/26 21:43:47 main.go:928: accept tcp [::]:8004: use of closed network connection\n\n```\n\n测试连接\n\n![QQ截图20201226223304](Brook科学上网必备/QQ截图20201226223304.png)\n\n网速测试\n\n![微信图片_20201226221856](Brook科学上网必备/微信图片_20201226221856.png)\n\n这里一旦关掉terminal的话brook服务就会停止, 所以按照官方文档开启守护进程\n\n#### 安装joker 开启守护进程\n\n\n\n```\n☁  jermainenee  nami install github.com/txthinking/joker\n+-------------------+-----------------------------+\n| Package           | github.com/txthinking/joker |\n|                   |                             |\n| Installed Version | v20200902                   |\n| Installed Files   | joker                       |\n+-------------------+-----------------------------+\n\n```\n\n#### 配置brook\n\n```\n☁  jermainenee  joker brook server -l :8004 -p ziming\n☁  jermainenee  joker list\n17298 pts/0    Sl     0:00 brook server -l :8004 -p ziming\n☁  jermainenee  \n☁  jermainenee  ./shadowsocks-all.sh uninstall\nWhich Shadowsocks server you want to uninstall?\n1) Shadowsocks-Python\n2) ShadowsocksR\n3) Shadowsocks-Go\n4) Shadowsocks-libev\nPlease enter a number [1-4]:2\n\nYou choose = ShadowsocksR\n\nAre you sure uninstall ShadowsocksR? [y/n]\n(default: n):y\nIPv6 support\n2020-12-26 21:45:02 INFO     shell.py:74 ShadowsocksR SSRR 3.2.2 2018-05-22\nstopped\nStopping ShadowsocksR success\n[Info] ShadowsocksR uninstall success\n```\n\n#### windows client Brook客户端下载\n\n> 下载地址\n>\n> https://github.com/txthinking/brook/releases\n\n#### IOS 移动端 下载\n\n> https://apps.apple.com/us/app/brook-undetectable-proxy-vpn/id1216002642\n\n目前还是免费的,而且是官方开发的app\n\n![](Brook科学上网必备/IMG_4987.PNG)\n\n#### 总结\n\nbrook 的配置十分简单, 使用起来比ssr服务还要简单.\n\nbrook 总共4总协议, 新的协议名称为server,这里采用server协议\n\n![QQ截图20201226223632](Brook科学上网必备/QQ截图20201226223632.png)\n\n打开YouTube\n\n![QQ截图20201226223743](Brook科学上网必备/QQ截图20201226223743.png)\n\n\n\n## 参考资料\n> https://txthinking.github.io/brook/#/\n>\n> https://github.com/txthinking/brook\n","slug":"Brook科学上网必备","published":1,"updated":"2021-04-20T13:28:10.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1l0006zgl12ducojw2","content":"<h1><span id=\"为什么使用brook\">为什么使用Brook</span></h1>\n<p>起因是因为在谷歌云平台使用了SSR科学上网后, 一小时不到IP被识别了…</p>\n<p>查询相关资料后发现Brook是一个比较偏门的技术, 用这个来科学上网应该比较难被GFW甄别出来</p>\n<p>SSR 已经停止更新一段时间了. 相关应该开源已久 GFW团队 也可以针对该技术识别.</p>\n<h1><span id=\"brook服务搭建前提\">Brook服务搭建前提</span></h1>\n<ul>\n<li>一台可连接的墙外服务器 推荐GCP\n<ul>\n<li>服务器地点可选, IP成服务可以销毁再新建挂载, 相关教程自己去找. 这里不再赘述.</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"brook是什么\">Brook是什么</span></h2>\n<p>官方github介绍</p>\n<blockquote>\n<p>Brook is a cross-platform strong encryption and not detectable proxy.<br>\nBrook’s goal is to keep it <strong>simple</strong>, <strong>stupid</strong> and <strong>not detectable</strong>.</p>\n</blockquote>\n<p>跨平台 强加密 无法被检测</p>\n<h2><span id=\"brook使用\">Brook使用</span></h2>\n<h3><span id=\"命令行安装-brook\">命令行安装 brook</span></h3>\n<h4><span id=\"下载brook\">下载Brook</span></h4>\n<p>命令: <code>$ curl -L https://github.com/txthinking/brook/releases/download/v20200909/brook_linux_amd64 -o /usr/bin/brook $ chmod +x /usr/bin/brook</code></p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  curl -L <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/txthinking</span><span class=\"regexp\">/brook/releases</span><span class=\"regexp\">/download/v</span>20210101/brook_linux_amd64 -o /usr/b</span><br><span class=\"line\"><span class=\"keyword\">in</span>/brook</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\"><span class=\"number\">100</span>   <span class=\"number\">641</span>  <span class=\"number\">100</span>   <span class=\"number\">641</span>    0     0    <span class=\"number\">981</span>      0 --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span>   <span class=\"number\">981</span></span><br><span class=\"line\"><span class=\"number\">100 10</span>.<span class=\"number\">8</span>M  <span class=\"number\">100 10</span>.<span class=\"number\">8</span>M    0     0  <span class=\"number\">3062</span>k      0  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span>03  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span>03 --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> <span class=\"number\">5206</span>k</span><br><span class=\"line\">☁  jermainenee  chmod +x /usr/bin/brook</span><br></pre></td></tr></table></figure>\n<h4><span id=\"安装-nami\">安装 nami</span></h4>\n<p>应该是一个包管理器, 官方推荐使用nami安装</p>\n<p>命令:<code>$ curl -L https://git.io/getnami | bash &amp;&amp; sleep 6 &amp;&amp; exec -l $SHELL</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">☁</span>  <span class=\"string\">jermainenee</span>  <span class=\"string\">nami</span> <span class=\"string\">install</span> <span class=\"string\">github.com/txthinking/brook</span></span><br><span class=\"line\"><span class=\"attr\">zsh: command not found:</span> <span class=\"string\">nami</span></span><br><span class=\"line\"><span class=\"string\">☁</span>  <span class=\"string\">jermainenee</span>  <span class=\"string\">curl</span> <span class=\"string\">-L</span> <span class=\"string\">https://git.io/getnami</span> <span class=\"string\">|</span> <span class=\"string\">bash</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">sleep</span> <span class=\"number\">6</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">exec</span> <span class=\"string\">-l</span> <span class=\"string\">$SHELL</span></span><br><span class=\"line\">  <span class=\"string\">%</span> <span class=\"string\">Total</span>    <span class=\"string\">%</span> <span class=\"string\">Received</span> <span class=\"string\">%</span> <span class=\"string\">Xferd</span>  <span class=\"string\">Average</span> <span class=\"string\">Speed</span>   <span class=\"string\">Time</span>    <span class=\"string\">Time</span>     <span class=\"string\">Time</span>  <span class=\"string\">Current</span></span><br><span class=\"line\">                                 <span class=\"string\">Dload</span>  <span class=\"string\">Upload</span>   <span class=\"string\">Total</span>   <span class=\"string\">Spent</span>    <span class=\"string\">Left</span>  <span class=\"string\">Speed</span></span><br><span class=\"line\">  <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>      <span class=\"number\">0</span>      <span class=\"number\">0</span> <span class=\"string\">--:--:--</span>  <span class=\"number\">0</span><span class=\"string\">:00:01</span> <span class=\"string\">--:--:--</span>     <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">100</span>  <span class=\"number\">1478</span>  <span class=\"number\">100</span>  <span class=\"number\">1478</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">946</span>      <span class=\"number\">0</span>  <span class=\"number\">0</span><span class=\"string\">:00:01</span>  <span class=\"number\">0</span><span class=\"string\">:00:01</span> <span class=\"string\">--:--:--</span>   <span class=\"number\">946</span></span><br><span class=\"line\">  <span class=\"string\">%</span> <span class=\"string\">Total</span>    <span class=\"string\">%</span> <span class=\"string\">Received</span> <span class=\"string\">%</span> <span class=\"string\">Xferd</span>  <span class=\"string\">Average</span> <span class=\"string\">Speed</span>   <span class=\"string\">Time</span>    <span class=\"string\">Time</span>     <span class=\"string\">Time</span>  <span class=\"string\">Current</span></span><br><span class=\"line\">                                 <span class=\"string\">Dload</span>  <span class=\"string\">Upload</span>   <span class=\"string\">Total</span>   <span class=\"string\">Spent</span>    <span class=\"string\">Left</span>  <span class=\"string\">Speed</span></span><br><span class=\"line\"><span class=\"number\">100</span>   <span class=\"number\">642</span>  <span class=\"number\">100</span>   <span class=\"number\">642</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">992</span>      <span class=\"number\">0</span> <span class=\"string\">--:--:--</span> <span class=\"string\">--:--:--</span> <span class=\"string\">--:--:--</span>   <span class=\"number\">990</span></span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"number\">11.</span><span class=\"string\">5M</span>  <span class=\"number\">100</span> <span class=\"number\">11.</span><span class=\"string\">5M</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>  <span class=\"string\">3183k</span>      <span class=\"number\">0</span>  <span class=\"number\">0</span><span class=\"string\">:00:03</span>  <span class=\"number\">0</span><span class=\"string\">:00:03</span> <span class=\"string\">--:--:--</span> <span class=\"string\">5304k</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Package</span>           <span class=\"string\">|</span> <span class=\"string\">github.com/txthinking/nami</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span>                   <span class=\"string\">|</span>                            <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Version</span> <span class=\"string\">|</span> <span class=\"string\">v20201101</span>                  <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Files</span>   <span class=\"string\">|</span> <span class=\"string\">nami</span>                       <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">☁</span>  <span class=\"string\">jermainenee</span>  <span class=\"string\">nami</span> <span class=\"string\">install</span> <span class=\"string\">github.com/txthinking/nami</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Package</span>           <span class=\"string\">|</span> <span class=\"string\">github.com/txthinking/nami</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span>                   <span class=\"string\">|</span>                            <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Version</span> <span class=\"string\">|</span> <span class=\"string\">v20201101</span>                  <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Files</span>   <span class=\"string\">|</span> <span class=\"string\">nami</span>                       <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"安装brook\">安装brook</span></h4>\n<p>命令: <code>$ nami install github.com/txthinking/brook</code></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  nami install github.com/txthinking/brook</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br><span class=\"line\">| Package           | github.com/txthinking/brook |</span><br><span class=\"line\">|                   |                             |</span><br><span class=\"line\">| Installed Version | v20210101                   |</span><br><span class=\"line\">| Installed Files   | brook                       |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br></pre></td></tr></table></figure>\n<h3><span id=\"brook的使用\">Brook的使用</span></h3>\n<p>命令: <code>brook server -l :9999 -p hello</code></p>\n<p>:9999 是端口暴露</p>\n<p>-p hello 是密码</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  brook<span class=\"built_in\"> server </span>-l :8004 -p hello</span><br><span class=\"line\">^C2020/12/26 21:43:47 main.go:928: accept tcp [::]:8004: use of closed<span class=\"built_in\"> network </span>connection</span><br></pre></td></tr></table></figure>\n<p>测试连接</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/QQ%E6%88%AA%E5%9B%BE20201226223304.png\" alt=\"QQ截图20201226223304\"></p>\n<p>网速测试</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201226221856.png\" alt=\"微信图片_20201226221856\"></p>\n<p>这里一旦关掉terminal的话brook服务就会停止, 所以按照官方文档开启守护进程</p>\n<h4><span id=\"安装joker-开启守护进程\">安装joker 开启守护进程</span></h4>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  nami install github.com/txthinking/joker</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br><span class=\"line\">| Package           | github.com/txthinking/joker |</span><br><span class=\"line\">|                   |                             |</span><br><span class=\"line\">| Installed Version | v20200902                   |</span><br><span class=\"line\">| Installed Files   | joker                       |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br></pre></td></tr></table></figure>\n<h4><span id=\"配置brook\">配置brook</span></h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  joker brook<span class=\"built_in\"> server </span>-l :8004 -p ziming</span><br><span class=\"line\">☁  jermainenee  joker list</span><br><span class=\"line\">17298 pts/0    Sl     0:00 brook<span class=\"built_in\"> server </span>-l :8004 -p ziming</span><br><span class=\"line\">☁  jermainenee  </span><br><span class=\"line\">☁  jermainenee  ./shadowsocks-all.sh uninstall</span><br><span class=\"line\">Which Shadowsocks<span class=\"built_in\"> server </span>you want <span class=\"keyword\">to</span> uninstall?</span><br><span class=\"line\">1) Shadowsocks-Python</span><br><span class=\"line\">2) ShadowsocksR</span><br><span class=\"line\">3) Shadowsocks-Go</span><br><span class=\"line\">4) Shadowsocks-libev</span><br><span class=\"line\">Please enter a number [1-4]:2</span><br><span class=\"line\"></span><br><span class=\"line\">You choose = ShadowsocksR</span><br><span class=\"line\"></span><br><span class=\"line\">Are you sure uninstall ShadowsocksR? [y/n]</span><br><span class=\"line\">(default: n):y</span><br><span class=\"line\">IPv6 support</span><br><span class=\"line\">2020-12-26 21:45:02 <span class=\"builtin-name\">INFO</span>     shell.py:74 ShadowsocksR SSRR 3.2.2 2018-05-22</span><br><span class=\"line\">stopped</span><br><span class=\"line\">Stopping ShadowsocksR success</span><br><span class=\"line\">[<span class=\"builtin-name\">Info</span>] ShadowsocksR uninstall success</span><br></pre></td></tr></table></figure>\n<h4><span id=\"windows-client-brook客户端下载\">windows client Brook客户端下载</span></h4>\n<blockquote>\n<p>下载地址</p>\n<p><a href=\"https://github.com/txthinking/brook/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/txthinking/brook/releases</a></p>\n</blockquote>\n<h4><span id=\"ios-移动端-下载\">IOS 移动端 下载</span></h4>\n<blockquote>\n<p><a href=\"https://apps.apple.com/us/app/brook-undetectable-proxy-vpn/id1216002642\" target=\"_blank\" rel=\"noopener\">https://apps.apple.com/us/app/brook-undetectable-proxy-vpn/id1216002642</a></p>\n</blockquote>\n<p>目前还是免费的,而且是官方开发的app</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/IMG_4987.PNG\" alt></p>\n<h4><span id=\"总结\">总结</span></h4>\n<p>brook 的配置十分简单, 使用起来比ssr服务还要简单.</p>\n<p>brook 总共4总协议, 新的协议名称为server,这里采用server协议</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/QQ%E6%88%AA%E5%9B%BE20201226223632.png\" alt=\"QQ截图20201226223632\"></p>\n<p>打开YouTube</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/QQ%E6%88%AA%E5%9B%BE20201226223743.png\" alt=\"QQ截图20201226223743\"></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://txthinking.github.io/brook/#/\" target=\"_blank\" rel=\"noopener\">https://txthinking.github.io/brook/#/</a></p>\n<p><a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">https://github.com/txthinking/brook</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>为什么使用Brook</h1>\n<p>起因是因为在谷歌云平台使用了SSR科学上网后, 一小时不到IP被识别了…</p>\n<p>查询相关资料后发现Brook是一个比较偏门的技术, 用这个来科学上网应该比较难被GFW甄别出来</p>\n<p>SSR 已经停止更新一段时间了. 相关应该开源已久 GFW团队 也可以针对该技术识别.</p>\n<h1>Brook服务搭建前提</h1>\n<ul>\n<li>一台可连接的墙外服务器 推荐GCP\n<ul>\n<li>服务器地点可选, IP成服务可以销毁再新建挂载, 相关教程自己去找. 这里不再赘述.</li>\n</ul>\n</li>\n</ul>\n<h2>Brook是什么</h2>\n<p>官方github介绍</p>\n<blockquote>\n<p>Brook is a cross-platform strong encryption and not detectable proxy.<br>\nBrook’s goal is to keep it <strong>simple</strong>, <strong>stupid</strong> and <strong>not detectable</strong>.</p>\n</blockquote>\n<p>跨平台 强加密 无法被检测</p>\n<h2>Brook使用</h2>\n<h3>命令行安装 brook</h3>\n<h4>下载Brook</h4>\n<p>命令: <code>$ curl -L https://github.com/txthinking/brook/releases/download/v20200909/brook_linux_amd64 -o /usr/bin/brook $ chmod +x /usr/bin/brook</code></p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  curl -L <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/txthinking</span><span class=\"regexp\">/brook/releases</span><span class=\"regexp\">/download/v</span>20210101/brook_linux_amd64 -o /usr/b</span><br><span class=\"line\"><span class=\"keyword\">in</span>/brook</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\"><span class=\"number\">100</span>   <span class=\"number\">641</span>  <span class=\"number\">100</span>   <span class=\"number\">641</span>    0     0    <span class=\"number\">981</span>      0 --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span>   <span class=\"number\">981</span></span><br><span class=\"line\"><span class=\"number\">100 10</span>.<span class=\"number\">8</span>M  <span class=\"number\">100 10</span>.<span class=\"number\">8</span>M    0     0  <span class=\"number\">3062</span>k      0  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span>03  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span>03 --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> <span class=\"number\">5206</span>k</span><br><span class=\"line\">☁  jermainenee  chmod +x /usr/bin/brook</span><br></pre></td></tr></table></figure>\n<h4>安装 nami</h4>\n<p>应该是一个包管理器, 官方推荐使用nami安装</p>\n<p>命令:<code>$ curl -L https://git.io/getnami | bash &amp;&amp; sleep 6 &amp;&amp; exec -l $SHELL</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">☁</span>  <span class=\"string\">jermainenee</span>  <span class=\"string\">nami</span> <span class=\"string\">install</span> <span class=\"string\">github.com/txthinking/brook</span></span><br><span class=\"line\"><span class=\"attr\">zsh: command not found:</span> <span class=\"string\">nami</span></span><br><span class=\"line\"><span class=\"string\">☁</span>  <span class=\"string\">jermainenee</span>  <span class=\"string\">curl</span> <span class=\"string\">-L</span> <span class=\"string\">https://git.io/getnami</span> <span class=\"string\">|</span> <span class=\"string\">bash</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">sleep</span> <span class=\"number\">6</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">exec</span> <span class=\"string\">-l</span> <span class=\"string\">$SHELL</span></span><br><span class=\"line\">  <span class=\"string\">%</span> <span class=\"string\">Total</span>    <span class=\"string\">%</span> <span class=\"string\">Received</span> <span class=\"string\">%</span> <span class=\"string\">Xferd</span>  <span class=\"string\">Average</span> <span class=\"string\">Speed</span>   <span class=\"string\">Time</span>    <span class=\"string\">Time</span>     <span class=\"string\">Time</span>  <span class=\"string\">Current</span></span><br><span class=\"line\">                                 <span class=\"string\">Dload</span>  <span class=\"string\">Upload</span>   <span class=\"string\">Total</span>   <span class=\"string\">Spent</span>    <span class=\"string\">Left</span>  <span class=\"string\">Speed</span></span><br><span class=\"line\">  <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>      <span class=\"number\">0</span>      <span class=\"number\">0</span> <span class=\"string\">--:--:--</span>  <span class=\"number\">0</span><span class=\"string\">:00:01</span> <span class=\"string\">--:--:--</span>     <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">100</span>  <span class=\"number\">1478</span>  <span class=\"number\">100</span>  <span class=\"number\">1478</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">946</span>      <span class=\"number\">0</span>  <span class=\"number\">0</span><span class=\"string\">:00:01</span>  <span class=\"number\">0</span><span class=\"string\">:00:01</span> <span class=\"string\">--:--:--</span>   <span class=\"number\">946</span></span><br><span class=\"line\">  <span class=\"string\">%</span> <span class=\"string\">Total</span>    <span class=\"string\">%</span> <span class=\"string\">Received</span> <span class=\"string\">%</span> <span class=\"string\">Xferd</span>  <span class=\"string\">Average</span> <span class=\"string\">Speed</span>   <span class=\"string\">Time</span>    <span class=\"string\">Time</span>     <span class=\"string\">Time</span>  <span class=\"string\">Current</span></span><br><span class=\"line\">                                 <span class=\"string\">Dload</span>  <span class=\"string\">Upload</span>   <span class=\"string\">Total</span>   <span class=\"string\">Spent</span>    <span class=\"string\">Left</span>  <span class=\"string\">Speed</span></span><br><span class=\"line\"><span class=\"number\">100</span>   <span class=\"number\">642</span>  <span class=\"number\">100</span>   <span class=\"number\">642</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>    <span class=\"number\">992</span>      <span class=\"number\">0</span> <span class=\"string\">--:--:--</span> <span class=\"string\">--:--:--</span> <span class=\"string\">--:--:--</span>   <span class=\"number\">990</span></span><br><span class=\"line\"><span class=\"number\">100</span> <span class=\"number\">11.</span><span class=\"string\">5M</span>  <span class=\"number\">100</span> <span class=\"number\">11.</span><span class=\"string\">5M</span>    <span class=\"number\">0</span>     <span class=\"number\">0</span>  <span class=\"string\">3183k</span>      <span class=\"number\">0</span>  <span class=\"number\">0</span><span class=\"string\">:00:03</span>  <span class=\"number\">0</span><span class=\"string\">:00:03</span> <span class=\"string\">--:--:--</span> <span class=\"string\">5304k</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Package</span>           <span class=\"string\">|</span> <span class=\"string\">github.com/txthinking/nami</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span>                   <span class=\"string\">|</span>                            <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Version</span> <span class=\"string\">|</span> <span class=\"string\">v20201101</span>                  <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Files</span>   <span class=\"string\">|</span> <span class=\"string\">nami</span>                       <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">☁</span>  <span class=\"string\">jermainenee</span>  <span class=\"string\">nami</span> <span class=\"string\">install</span> <span class=\"string\">github.com/txthinking/nami</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Package</span>           <span class=\"string\">|</span> <span class=\"string\">github.com/txthinking/nami</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span>                   <span class=\"string\">|</span>                            <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Version</span> <span class=\"string\">|</span> <span class=\"string\">v20201101</span>                  <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">|</span> <span class=\"string\">Installed</span> <span class=\"string\">Files</span>   <span class=\"string\">|</span> <span class=\"string\">nami</span>                       <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">+-------------------+----------------------------+</span></span><br></pre></td></tr></table></figure>\n<h4>安装brook</h4>\n<p>命令: <code>$ nami install github.com/txthinking/brook</code></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  nami install github.com/txthinking/brook</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br><span class=\"line\">| Package           | github.com/txthinking/brook |</span><br><span class=\"line\">|                   |                             |</span><br><span class=\"line\">| Installed Version | v20210101                   |</span><br><span class=\"line\">| Installed Files   | brook                       |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br></pre></td></tr></table></figure>\n<h3>Brook的使用</h3>\n<p>命令: <code>brook server -l :9999 -p hello</code></p>\n<p>:9999 是端口暴露</p>\n<p>-p hello 是密码</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  brook<span class=\"built_in\"> server </span>-l :8004 -p hello</span><br><span class=\"line\">^C2020/12/26 21:43:47 main.go:928: accept tcp [::]:8004: use of closed<span class=\"built_in\"> network </span>connection</span><br></pre></td></tr></table></figure>\n<p>测试连接</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/QQ%E6%88%AA%E5%9B%BE20201226223304.png\" alt=\"QQ截图20201226223304\"></p>\n<p>网速测试</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201226221856.png\" alt=\"微信图片_20201226221856\"></p>\n<p>这里一旦关掉terminal的话brook服务就会停止, 所以按照官方文档开启守护进程</p>\n<h4>安装joker 开启守护进程</h4>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  nami install github.com/txthinking/joker</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br><span class=\"line\">| Package           | github.com/txthinking/joker |</span><br><span class=\"line\">|                   |                             |</span><br><span class=\"line\">| Installed Version | v20200902                   |</span><br><span class=\"line\">| Installed Files   | joker                       |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span>-----------------------------+</span><br></pre></td></tr></table></figure>\n<h4>配置brook</h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">☁  jermainenee  joker brook<span class=\"built_in\"> server </span>-l :8004 -p ziming</span><br><span class=\"line\">☁  jermainenee  joker list</span><br><span class=\"line\">17298 pts/0    Sl     0:00 brook<span class=\"built_in\"> server </span>-l :8004 -p ziming</span><br><span class=\"line\">☁  jermainenee  </span><br><span class=\"line\">☁  jermainenee  ./shadowsocks-all.sh uninstall</span><br><span class=\"line\">Which Shadowsocks<span class=\"built_in\"> server </span>you want <span class=\"keyword\">to</span> uninstall?</span><br><span class=\"line\">1) Shadowsocks-Python</span><br><span class=\"line\">2) ShadowsocksR</span><br><span class=\"line\">3) Shadowsocks-Go</span><br><span class=\"line\">4) Shadowsocks-libev</span><br><span class=\"line\">Please enter a number [1-4]:2</span><br><span class=\"line\"></span><br><span class=\"line\">You choose = ShadowsocksR</span><br><span class=\"line\"></span><br><span class=\"line\">Are you sure uninstall ShadowsocksR? [y/n]</span><br><span class=\"line\">(default: n):y</span><br><span class=\"line\">IPv6 support</span><br><span class=\"line\">2020-12-26 21:45:02 <span class=\"builtin-name\">INFO</span>     shell.py:74 ShadowsocksR SSRR 3.2.2 2018-05-22</span><br><span class=\"line\">stopped</span><br><span class=\"line\">Stopping ShadowsocksR success</span><br><span class=\"line\">[<span class=\"builtin-name\">Info</span>] ShadowsocksR uninstall success</span><br></pre></td></tr></table></figure>\n<h4>windows client Brook客户端下载</h4>\n<blockquote>\n<p>下载地址</p>\n<p><a href=\"https://github.com/txthinking/brook/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/txthinking/brook/releases</a></p>\n</blockquote>\n<h4>IOS 移动端 下载</h4>\n<blockquote>\n<p><a href=\"https://apps.apple.com/us/app/brook-undetectable-proxy-vpn/id1216002642\" target=\"_blank\" rel=\"noopener\">https://apps.apple.com/us/app/brook-undetectable-proxy-vpn/id1216002642</a></p>\n</blockquote>\n<p>目前还是免费的,而且是官方开发的app</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/IMG_4987.PNG\" alt></p>\n<h4>总结</h4>\n<p>brook 的配置十分简单, 使用起来比ssr服务还要简单.</p>\n<p>brook 总共4总协议, 新的协议名称为server,这里采用server协议</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/QQ%E6%88%AA%E5%9B%BE20201226223632.png\" alt=\"QQ截图20201226223632\"></p>\n<p>打开YouTube</p>\n<p><img src=\"/2020/12/26/Brook科学上网必备/QQ%E6%88%AA%E5%9B%BE20201226223743.png\" alt=\"QQ截图20201226223743\"></p>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://txthinking.github.io/brook/#/\" target=\"_blank\" rel=\"noopener\">https://txthinking.github.io/brook/#/</a></p>\n<p><a href=\"https://github.com/txthinking/brook\" target=\"_blank\" rel=\"noopener\">https://github.com/txthinking/brook</a></p>\n</blockquote>\n"},{"title":"Docker-Registry学习2-简介与安装","catalog":true,"date":"2019-10-27T02:20:36.000Z","subtitle":null,"header-img":null,"_content":"# Docker-Registry学习2-简介与安装\n官方的 Docker Hub 是一个用于管理公共镜像的地方，我们可以在上面找到我们想要的镜像，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么你就需要 Docker Registry，它可以用来存储和管理自己的镜像.\n~~~\n➜  ~ cd /usr/local/\n➜  local mkdir docker\n➜  local mkdir registry\n➜  local cd registry\n➜  registry vim docker-compose.yml\n~~~\n\n## 配置`docker-compose.yml`\n~~~\nversion: '3.1'\nservices:\n  registry:\n    image: registry\n    restart: always\n    container_name: registry\n    ports:\n      - 5000:5000\n    volumes:\n      - /usr/local/docker/registry/data:/var/lib/registry\n~~~\n~~~\n➜  registry mkdir data\n➜  registry chmod 777 data\n➜  registry ls\ndata  docker-compose.yml\n➜  registry docker-compose up -d\nCreating network \"registry_default\" with the default driver\nPulling registry (registry:)...\nlatest: Pulling from library/registry\nc87736221ed0: Pull complete\n1cc8e0bb44df: Pull complete\n54d33bcb37f5: Pull complete\ne8afc091c171: Pull complete\nb4541f6d3db6: Pull complete\nDigest: sha256:8004747f1e8cd820a148fb7499d71a76d45ff66bac6a29129bfdbfdc0154d146\nStatus: Downloaded newer image for registry:latest\nCreating registry ... done\n➜  registry docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nregistry            latest              f32a97de94e1        7 months ago        25.8MB\nhello-world         latest              fce289e99eb9        9 months ago        1.84kB\n~~~\n安装运行成功\n## 查看结果\n![](Docker-Registry学习2-简介与安装/1.png)\n## 参考资料\n> \n","source":"_posts/Docker-Registry学习2-简介与安装.md","raw":"---\ntitle: Docker-Registry学习2-简介与安装\ncatalog: true\ntags: []\ndate: 2019-10-27 10:20:36\nsubtitle:\nheader-img:\n---\n# Docker-Registry学习2-简介与安装\n官方的 Docker Hub 是一个用于管理公共镜像的地方，我们可以在上面找到我们想要的镜像，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么你就需要 Docker Registry，它可以用来存储和管理自己的镜像.\n~~~\n➜  ~ cd /usr/local/\n➜  local mkdir docker\n➜  local mkdir registry\n➜  local cd registry\n➜  registry vim docker-compose.yml\n~~~\n\n## 配置`docker-compose.yml`\n~~~\nversion: '3.1'\nservices:\n  registry:\n    image: registry\n    restart: always\n    container_name: registry\n    ports:\n      - 5000:5000\n    volumes:\n      - /usr/local/docker/registry/data:/var/lib/registry\n~~~\n~~~\n➜  registry mkdir data\n➜  registry chmod 777 data\n➜  registry ls\ndata  docker-compose.yml\n➜  registry docker-compose up -d\nCreating network \"registry_default\" with the default driver\nPulling registry (registry:)...\nlatest: Pulling from library/registry\nc87736221ed0: Pull complete\n1cc8e0bb44df: Pull complete\n54d33bcb37f5: Pull complete\ne8afc091c171: Pull complete\nb4541f6d3db6: Pull complete\nDigest: sha256:8004747f1e8cd820a148fb7499d71a76d45ff66bac6a29129bfdbfdc0154d146\nStatus: Downloaded newer image for registry:latest\nCreating registry ... done\n➜  registry docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nregistry            latest              f32a97de94e1        7 months ago        25.8MB\nhello-world         latest              fce289e99eb9        9 months ago        1.84kB\n~~~\n安装运行成功\n## 查看结果\n![](Docker-Registry学习2-简介与安装/1.png)\n## 参考资料\n> \n","slug":"Docker-Registry学习2-简介与安装","published":1,"updated":"2021-04-20T13:28:10.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1n0008zgl1p34zc2m0","content":"<h1><span id=\"docker-registry学习2-简介与安装\">Docker-Registry学习2-简介与安装</span></h1>\n<p>官方的 Docker Hub 是一个用于管理公共镜像的地方，我们可以在上面找到我们想要的镜像，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么你就需要 Docker Registry，它可以用来存储和管理自己的镜像.</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ <span class=\"keyword\">cd</span> /usr/<span class=\"keyword\">local</span>/</span><br><span class=\"line\">➜  <span class=\"keyword\">local</span> <span class=\"keyword\">mkdir</span> docker</span><br><span class=\"line\">➜  <span class=\"keyword\">local</span> <span class=\"keyword\">mkdir</span> registry</span><br><span class=\"line\">➜  <span class=\"keyword\">local</span> <span class=\"keyword\">cd</span> registry</span><br><span class=\"line\">➜  registry vim docker-compose.yml</span><br></pre></td></tr></table></figure>\n<h2><span id=\"配置docker-composeyml\">配置<code>docker-compose.yml</code></span></h2>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">version</span>: <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"attribute\">services</span>:</span><br><span class=\"line\">  <span class=\"attribute\">registry</span>:</span><br><span class=\"line\">    <span class=\"attribute\">image</span>: registry</span><br><span class=\"line\">    <span class=\"attribute\">restart</span>: always</span><br><span class=\"line\">    <span class=\"attribute\">container_name</span>: registry</span><br><span class=\"line\">    <span class=\"attribute\">ports</span>:</span><br><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">5000</span></span><br><span class=\"line\">    <span class=\"attribute\">volumes</span>:</span><br><span class=\"line\">      - /usr/local/docker/registry/<span class=\"attribute\">data</span>:/var/lib/registry</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  registry mkdir data</span><br><span class=\"line\">➜  registry chmod 777 data</span><br><span class=\"line\">➜  registry ls</span><br><span class=\"line\">data  docker-compose.yml</span><br><span class=\"line\">➜  registry docker-compose up -d</span><br><span class=\"line\">Creating<span class=\"built_in\"> network </span><span class=\"string\">\"registry_default\"</span> with the<span class=\"built_in\"> default </span>driver</span><br><span class=\"line\">Pulling registry (registry:)<span class=\"built_in\">..</span>.</span><br><span class=\"line\">latest: Pulling <span class=\"keyword\">from</span> library/registry</span><br><span class=\"line\">c87736221ed0: Pull complete</span><br><span class=\"line\">1cc8e0bb44df: Pull complete</span><br><span class=\"line\">54d33bcb37f5: Pull complete</span><br><span class=\"line\">e8afc091c171: Pull complete</span><br><span class=\"line\">b4541f6d3db6: Pull complete</span><br><span class=\"line\">Digest: sha256:8004747f1e8cd820a148fb7499d71a76d45ff66bac6a29129bfdbfdc0154d146</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> registry:latest</span><br><span class=\"line\">Creating registry <span class=\"built_in\">..</span>. done</span><br><span class=\"line\">➜  registry docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">registry            latest              f32a97de94e1        7 months ago        25.8MB</span><br><span class=\"line\">hello-world         latest              fce289e99eb9        9 months ago        1.84kB</span><br></pre></td></tr></table></figure>\n<p>安装运行成功</p>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习2-简介与安装/1.png\" alt></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker-Registry学习2-简介与安装</h1>\n<p>官方的 Docker Hub 是一个用于管理公共镜像的地方，我们可以在上面找到我们想要的镜像，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么你就需要 Docker Registry，它可以用来存储和管理自己的镜像.</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ <span class=\"keyword\">cd</span> /usr/<span class=\"keyword\">local</span>/</span><br><span class=\"line\">➜  <span class=\"keyword\">local</span> <span class=\"keyword\">mkdir</span> docker</span><br><span class=\"line\">➜  <span class=\"keyword\">local</span> <span class=\"keyword\">mkdir</span> registry</span><br><span class=\"line\">➜  <span class=\"keyword\">local</span> <span class=\"keyword\">cd</span> registry</span><br><span class=\"line\">➜  registry vim docker-compose.yml</span><br></pre></td></tr></table></figure>\n<h2>配置<code>docker-compose.yml</code></h2>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">version</span>: <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"attribute\">services</span>:</span><br><span class=\"line\">  <span class=\"attribute\">registry</span>:</span><br><span class=\"line\">    <span class=\"attribute\">image</span>: registry</span><br><span class=\"line\">    <span class=\"attribute\">restart</span>: always</span><br><span class=\"line\">    <span class=\"attribute\">container_name</span>: registry</span><br><span class=\"line\">    <span class=\"attribute\">ports</span>:</span><br><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">5000</span></span><br><span class=\"line\">    <span class=\"attribute\">volumes</span>:</span><br><span class=\"line\">      - /usr/local/docker/registry/<span class=\"attribute\">data</span>:/var/lib/registry</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  registry mkdir data</span><br><span class=\"line\">➜  registry chmod 777 data</span><br><span class=\"line\">➜  registry ls</span><br><span class=\"line\">data  docker-compose.yml</span><br><span class=\"line\">➜  registry docker-compose up -d</span><br><span class=\"line\">Creating<span class=\"built_in\"> network </span><span class=\"string\">\"registry_default\"</span> with the<span class=\"built_in\"> default </span>driver</span><br><span class=\"line\">Pulling registry (registry:)<span class=\"built_in\">..</span>.</span><br><span class=\"line\">latest: Pulling <span class=\"keyword\">from</span> library/registry</span><br><span class=\"line\">c87736221ed0: Pull complete</span><br><span class=\"line\">1cc8e0bb44df: Pull complete</span><br><span class=\"line\">54d33bcb37f5: Pull complete</span><br><span class=\"line\">e8afc091c171: Pull complete</span><br><span class=\"line\">b4541f6d3db6: Pull complete</span><br><span class=\"line\">Digest: sha256:8004747f1e8cd820a148fb7499d71a76d45ff66bac6a29129bfdbfdc0154d146</span><br><span class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> registry:latest</span><br><span class=\"line\">Creating registry <span class=\"built_in\">..</span>. done</span><br><span class=\"line\">➜  registry docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">registry            latest              f32a97de94e1        7 months ago        25.8MB</span><br><span class=\"line\">hello-world         latest              fce289e99eb9        9 months ago        1.84kB</span><br></pre></td></tr></table></figure>\n<p>安装运行成功</p>\n<h2>查看结果</h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习2-简介与安装/1.png\" alt></p>\n<h2>参考资料</h2>\n<blockquote></blockquote>\n"},{"title":"Docker-Registry学习3-配置WebUI与客户端","catalog":true,"date":"2019-10-27T03:49:21.000Z","subtitle":null,"header-img":null,"_content":"# Docker-Registry学习3-配置WebUI与客户端 \n## 停止并删除原来的registry\ndocker docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\na9d6cba04f16        registry            \"/entrypoint.sh /etc…\"   2 hours ago         Up About an hour    0.0.0.0:5000->5000/tcp   registry\n➜  docker docker stop a9\na9\n➜  docker docker rm a9\na9\n➜  docker vim registry/docker-compose.yml\n➜  docker cd registry\n➜  registry ls\ndata\n➜  registry vim docker-compose.yml\n\n## 配置docker-registry-frontend\n我们使用 docker-compose 来安装和运行，docker-compose.yml 配置如下\n~~~\nversion: '3.1'\nservices:\n  registry:\n    image: registry\n    restart: always\n    container_name: registry\n    ports:\n      - 5000:5000\n    volumes:\n      - /usr/local/docker/registry/data:/var/lib/registry\n  frontend:\n    image: konradkleine/docker-registry-frontend:v2\n    ports:\n      - 8080:80\n    volumes:\n      - ./certs/frontend.crt:/etc/apache2/server.crt:ro\n      - ./certs/frontend.key:/etc/apache2/server.key:ro\n    environment:\n      - ENV_DOCKER_REGISTRY_HOST=192.168.75.133\n      - ENV_DOCKER_REGISTRY_PORT=5000\n~~~\n## 启动容器\n~~~\n➜  registry docker-compose up -d\nPulling frontend (konradkleine/docker-registry-frontend:v2)...\nv2: Pulling from konradkleine/docker-registry-frontend\n85b1f47fba49: Pulling fs layer\ne3c64813de17: Pulling fs layer\n6e61107884ac: Pulling fs layer\n411f14e0e0fd: Waiting\n987d1071cd71: Waiting\n95913db6ef30: Waiting\n1eb7ee3fbde2: Pull complete\n9b6f26b1b1a1: Pull complete\ndaa6941a3108: Pull complete\n86cc842193a6: Pull complete\n024ab6890532: Pull complete\naf9b7d0cb338: Pull complete\n02f33fb0dcad: Pull complete\ne8275670ee05: Pull complete\n1c1a56903b01: Pull complete\nafc4e94602b9: Pull complete\ndf1a95efa681: Pull complete\nd8bcb7be9e08: Pull complete\nd9c69b7bcc4f: Pull complete\n2a14b209069e: Pull complete\ne7c2bcdf63d5: Pull complete\nefc16e6bbbea: Pull complete\n552460069ca8: Pull complete\ne6b075740da3: Pull complete\n9976bc800046: Pull complete\nDigest: sha256:181aad54ee64312a57f8ccba5247c67358de18886d5e2f383b8c4b80a7a5edf6\nStatus: Downloaded newer image for konradkleine/docker-registry-frontend:v2\nCreating registry_frontend_1 ... done\nCreating registry            ... done\n~~~\n\n## 查看结果\n![](Docker-Registry学习3-配置WebUI与客户端/1.png)\n![](Docker-Registry学习3-配置WebUI与客户端/2.png)\n![](Docker-Registry学习3-配置WebUI与客户端/3.png)\n![](Docker-Registry学习3-配置WebUI与客户端/4.png)\n\n## 参考资料\n> \n","source":"_posts/Docker-Registry学习3-配置WebUI与客户端.md","raw":"---\ntitle: Docker-Registry学习3-配置WebUI与客户端\ncatalog: true\ntags: []\ndate: 2019-10-27 11:49:21\nsubtitle:\nheader-img:\n---\n# Docker-Registry学习3-配置WebUI与客户端 \n## 停止并删除原来的registry\ndocker docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\na9d6cba04f16        registry            \"/entrypoint.sh /etc…\"   2 hours ago         Up About an hour    0.0.0.0:5000->5000/tcp   registry\n➜  docker docker stop a9\na9\n➜  docker docker rm a9\na9\n➜  docker vim registry/docker-compose.yml\n➜  docker cd registry\n➜  registry ls\ndata\n➜  registry vim docker-compose.yml\n\n## 配置docker-registry-frontend\n我们使用 docker-compose 来安装和运行，docker-compose.yml 配置如下\n~~~\nversion: '3.1'\nservices:\n  registry:\n    image: registry\n    restart: always\n    container_name: registry\n    ports:\n      - 5000:5000\n    volumes:\n      - /usr/local/docker/registry/data:/var/lib/registry\n  frontend:\n    image: konradkleine/docker-registry-frontend:v2\n    ports:\n      - 8080:80\n    volumes:\n      - ./certs/frontend.crt:/etc/apache2/server.crt:ro\n      - ./certs/frontend.key:/etc/apache2/server.key:ro\n    environment:\n      - ENV_DOCKER_REGISTRY_HOST=192.168.75.133\n      - ENV_DOCKER_REGISTRY_PORT=5000\n~~~\n## 启动容器\n~~~\n➜  registry docker-compose up -d\nPulling frontend (konradkleine/docker-registry-frontend:v2)...\nv2: Pulling from konradkleine/docker-registry-frontend\n85b1f47fba49: Pulling fs layer\ne3c64813de17: Pulling fs layer\n6e61107884ac: Pulling fs layer\n411f14e0e0fd: Waiting\n987d1071cd71: Waiting\n95913db6ef30: Waiting\n1eb7ee3fbde2: Pull complete\n9b6f26b1b1a1: Pull complete\ndaa6941a3108: Pull complete\n86cc842193a6: Pull complete\n024ab6890532: Pull complete\naf9b7d0cb338: Pull complete\n02f33fb0dcad: Pull complete\ne8275670ee05: Pull complete\n1c1a56903b01: Pull complete\nafc4e94602b9: Pull complete\ndf1a95efa681: Pull complete\nd8bcb7be9e08: Pull complete\nd9c69b7bcc4f: Pull complete\n2a14b209069e: Pull complete\ne7c2bcdf63d5: Pull complete\nefc16e6bbbea: Pull complete\n552460069ca8: Pull complete\ne6b075740da3: Pull complete\n9976bc800046: Pull complete\nDigest: sha256:181aad54ee64312a57f8ccba5247c67358de18886d5e2f383b8c4b80a7a5edf6\nStatus: Downloaded newer image for konradkleine/docker-registry-frontend:v2\nCreating registry_frontend_1 ... done\nCreating registry            ... done\n~~~\n\n## 查看结果\n![](Docker-Registry学习3-配置WebUI与客户端/1.png)\n![](Docker-Registry学习3-配置WebUI与客户端/2.png)\n![](Docker-Registry学习3-配置WebUI与客户端/3.png)\n![](Docker-Registry学习3-配置WebUI与客户端/4.png)\n\n## 参考资料\n> \n","slug":"Docker-Registry学习3-配置WebUI与客户端","published":1,"updated":"2021-04-20T13:28:10.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1o0009zgl15sg56jhh","content":"<h1><span id=\"docker-registry学习3-配置webui与客户端\">Docker-Registry学习3-配置WebUI与客户端</span></h1>\n<h2><span id=\"停止并删除原来的registry\">停止并删除原来的registry</span></h2>\n<p>docker docker ps<br>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES<br>\na9d6cba04f16        registry            “/entrypoint.sh /etc…”   2 hours ago         Up About an hour    0.0.0.0:5000-&gt;5000/tcp   registry<br>\n➜  docker docker stop a9<br>\na9<br>\n➜  docker docker rm a9<br>\na9<br>\n➜  docker vim registry/docker-compose.yml<br>\n➜  docker cd registry<br>\n➜  registry ls<br>\ndata<br>\n➜  registry vim docker-compose.yml</p>\n<h2><span id=\"配置docker-registry-frontend\">配置docker-registry-frontend</span></h2>\n<p>我们使用 docker-compose 来安装和运行，docker-compose.yml 配置如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"string\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  registry:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> registry</span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> registry</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span></span><br><span class=\"line\">      - <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>registry<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>registry</span><br><span class=\"line\"><span class=\"symbol\">  frontend:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> konradkleine/docker-registry-<span class=\"string\">frontend:</span>v2</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">8080</span>:<span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span></span><br><span class=\"line\">      - .<span class=\"regexp\">/certs/</span>frontend.<span class=\"string\">crt:</span><span class=\"regexp\">/etc/</span>apache2/server.<span class=\"string\">crt:</span>ro</span><br><span class=\"line\">      - .<span class=\"regexp\">/certs/</span>frontend.<span class=\"string\">key:</span><span class=\"regexp\">/etc/</span>apache2/server.<span class=\"string\">key:</span>ro</span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\">      - ENV_DOCKER_REGISTRY_HOST=<span class=\"number\">192.168</span><span class=\"number\">.75</span><span class=\"number\">.133</span></span><br><span class=\"line\">      - ENV_DOCKER_REGISTRY_PORT=<span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"启动容器\">启动容器</span></h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  registry docker-compose up -d</span><br><span class=\"line\">Pulling frontend (konradkleine/docker-registry-<span class=\"string\">frontend:</span>v2)...</span><br><span class=\"line\"><span class=\"string\">v2:</span> Pulling from konradkleine/docker-registry-frontend</span><br><span class=\"line\"><span class=\"number\">85</span><span class=\"string\">b1f47fba49:</span> Pulling fs layer</span><br><span class=\"line\"><span class=\"string\">e3c64813de17:</span> Pulling fs layer</span><br><span class=\"line\"><span class=\"number\">6e61107884</span><span class=\"string\">ac:</span> Pulling fs layer</span><br><span class=\"line\"><span class=\"number\">411</span><span class=\"string\">f14e0e0fd:</span> Waiting</span><br><span class=\"line\"><span class=\"number\">987</span><span class=\"string\">d1071cd71:</span> Waiting</span><br><span class=\"line\"><span class=\"number\">95913</span><span class=\"string\">db6ef30:</span> Waiting</span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">eb7ee3fbde2:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">9</span><span class=\"string\">b6f26b1b1a1:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">daa6941a3108:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">86</span><span class=\"string\">cc842193a6:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">024</span><span class=\"string\">ab6890532:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">af9b7d0cb338:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">02</span><span class=\"string\">f33fb0dcad:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e8275670ee05:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">c1a56903b01:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">afc4e94602b9:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">df1a95efa681:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">d8bcb7be9e08:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">d9c69b7bcc4f:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">a14b209069e:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e7c2bcdf63d5:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">efc16e6bbbea:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">552460069</span><span class=\"string\">ca8:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e6b075740da3:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">9976</span><span class=\"string\">bc800046:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">Digest:</span> <span class=\"string\">sha256:</span><span class=\"number\">181</span>aad54ee64312a57f8ccba5247c67358de18886d5e2f383b8c4b80a7a5edf6</span><br><span class=\"line\"><span class=\"string\">Status:</span> Downloaded newer image <span class=\"keyword\">for</span> konradkleine/docker-registry-<span class=\"string\">frontend:</span>v2</span><br><span class=\"line\">Creating registry_frontend_1 ... done</span><br><span class=\"line\">Creating registry            ... done</span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/1.png\" alt><br>\n<img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/2.png\" alt><br>\n<img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/3.png\" alt><br>\n<img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/4.png\" alt></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker-Registry学习3-配置WebUI与客户端</h1>\n<h2>停止并删除原来的registry</h2>\n<p>docker docker ps<br>\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES<br>\na9d6cba04f16        registry            “/entrypoint.sh /etc…”   2 hours ago         Up About an hour    0.0.0.0:5000-&gt;5000/tcp   registry<br>\n➜  docker docker stop a9<br>\na9<br>\n➜  docker docker rm a9<br>\na9<br>\n➜  docker vim registry/docker-compose.yml<br>\n➜  docker cd registry<br>\n➜  registry ls<br>\ndata<br>\n➜  registry vim docker-compose.yml</p>\n<h2>配置docker-registry-frontend</h2>\n<p>我们使用 docker-compose 来安装和运行，docker-compose.yml 配置如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"string\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  registry:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> registry</span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> registry</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">5000</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span></span><br><span class=\"line\">      - <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>registry<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>registry</span><br><span class=\"line\"><span class=\"symbol\">  frontend:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> konradkleine/docker-registry-<span class=\"string\">frontend:</span>v2</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">8080</span>:<span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span></span><br><span class=\"line\">      - .<span class=\"regexp\">/certs/</span>frontend.<span class=\"string\">crt:</span><span class=\"regexp\">/etc/</span>apache2/server.<span class=\"string\">crt:</span>ro</span><br><span class=\"line\">      - .<span class=\"regexp\">/certs/</span>frontend.<span class=\"string\">key:</span><span class=\"regexp\">/etc/</span>apache2/server.<span class=\"string\">key:</span>ro</span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\">      - ENV_DOCKER_REGISTRY_HOST=<span class=\"number\">192.168</span><span class=\"number\">.75</span><span class=\"number\">.133</span></span><br><span class=\"line\">      - ENV_DOCKER_REGISTRY_PORT=<span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n<h2>启动容器</h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  registry docker-compose up -d</span><br><span class=\"line\">Pulling frontend (konradkleine/docker-registry-<span class=\"string\">frontend:</span>v2)...</span><br><span class=\"line\"><span class=\"string\">v2:</span> Pulling from konradkleine/docker-registry-frontend</span><br><span class=\"line\"><span class=\"number\">85</span><span class=\"string\">b1f47fba49:</span> Pulling fs layer</span><br><span class=\"line\"><span class=\"string\">e3c64813de17:</span> Pulling fs layer</span><br><span class=\"line\"><span class=\"number\">6e61107884</span><span class=\"string\">ac:</span> Pulling fs layer</span><br><span class=\"line\"><span class=\"number\">411</span><span class=\"string\">f14e0e0fd:</span> Waiting</span><br><span class=\"line\"><span class=\"number\">987</span><span class=\"string\">d1071cd71:</span> Waiting</span><br><span class=\"line\"><span class=\"number\">95913</span><span class=\"string\">db6ef30:</span> Waiting</span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">eb7ee3fbde2:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">9</span><span class=\"string\">b6f26b1b1a1:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">daa6941a3108:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">86</span><span class=\"string\">cc842193a6:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">024</span><span class=\"string\">ab6890532:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">af9b7d0cb338:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">02</span><span class=\"string\">f33fb0dcad:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e8275670ee05:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">c1a56903b01:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">afc4e94602b9:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">df1a95efa681:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">d8bcb7be9e08:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">d9c69b7bcc4f:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">a14b209069e:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e7c2bcdf63d5:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">efc16e6bbbea:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">552460069</span><span class=\"string\">ca8:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e6b075740da3:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">9976</span><span class=\"string\">bc800046:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">Digest:</span> <span class=\"string\">sha256:</span><span class=\"number\">181</span>aad54ee64312a57f8ccba5247c67358de18886d5e2f383b8c4b80a7a5edf6</span><br><span class=\"line\"><span class=\"string\">Status:</span> Downloaded newer image <span class=\"keyword\">for</span> konradkleine/docker-registry-<span class=\"string\">frontend:</span>v2</span><br><span class=\"line\">Creating registry_frontend_1 ... done</span><br><span class=\"line\">Creating registry            ... done</span><br></pre></td></tr></table></figure>\n<h2>查看结果</h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/1.png\" alt><br>\n<img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/2.png\" alt><br>\n<img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/3.png\" alt><br>\n<img src=\"/2019/10/27/Docker-Registry学习3-配置WebUI与客户端/4.png\" alt></p>\n<h2>参考资料</h2>\n<blockquote></blockquote>\n"},{"title":"Docker学习11-部署项目到容器","catalog":true,"date":"2019-09-25T03:06:25.000Z","subtitle":null,"header-img":null,"_content":"# 部署项目到容器\n\n## 打包项目的war包\n这里用的是我毕业设计的项目,基于SSM的旅游项目网站.\n`mvn package'\n![](Docker学习11-部署项目到容器/1.png)\n\n## 在本地测试项目是否可以正常启动\n- 将项目解压到ROOT中\n![](Docker学习11-部署项目到容器/2.png)\n\n- 启动tomcat\n![](Docker学习11-部署项目到容器/3.png)\n\n- 浏览器端查看\n![](Docker学习11-部署项目到容器/4.png)\n\n- 查看控制台\n![](Docker学习11-部署项目到容器/5.png)\n\n## server端操作\n\n### 上传war到ECS中\n![](Docker学习11-部署项目到容器/6.png)\n\n### 将war移动到ROOT中做数据卷挂载\n~~~\n[root@MyCentOS]~# cd /root\n[root@MyCentOS]~# ls\nauthorized_keys\nmysql57-community-release-el7-10.noarch.rpm\nmysql57-community-release-el7-11.noarch.rpm\nmysql-community-release-el7-5.noarch.rpm\nmysql-community-release-el7-5.noarch.rpm.1\nmysql-community-release-el7-5.noarch.rpm.2\ntrip-web.war\n[root@MyCentOS]~# mv trip-web.war /usr/local/docker/tomcat/ROOT\n[root@MyCentOS]~# cd /usr/local/docker/tomcat/ROOT\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ll\ntotal 45080\n-rw-r--r-- 1 root root      172 Sep 23 16:57 index.html\n-rw-r--r-- 1 root root 46155747 Sep 25 14:44 trip-web.war\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# rm index.html\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# tar\n~~~\n\n### 解压并修改数据库端口\n- 解压\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# unzip -oq trip-web.war\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ls\nMETA-INF  static  trip-web.war  WEB-INF\n~~~\n- 修改\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB-INF/classes# ls\ncn                   mybatis-config.xml          spring-context.xml\ngeneratorConfig.xml  rebel.xml                   spring-mvc.xml\nlog4j.properties     spring-context-druid.xml    trip_web_db.sql\nmapper               spring-context-mybatis.xml  tripweb.properties\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB-INF/classes# vim tripweb.properties\n~~~\n![](Docker学习11-部署项目到容器/7.png)\n\n### 移走war包\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB-INF/classes# cd ../..\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ls\nMETA-INF  static  trip-web.war  WEB-INF\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# mv trip-web.war /root\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ls\nMETA-INF  static  WEB-INF\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT#\n~~~\n## docker数据库\n\n![](Docker学习11-部署项目到容器/8.png)\n\n\n## 修改项目数据库ip及端口和用户\n~~~\n# JDBC\n# MySQL 8.x: com.mysql.cj.jdbc.Driver\njdbc.driverClass=com.mysql.jdbc.Driver\njdbc.connectionURL=jdbc:mysql://116.62.110.99:3307/trip_web_db?useUnicode=true&characterEncoding=UTF-8\njdbc.username=root\njdbc.password=root\n~~~\n\n### 挂载数据卷运行\n- 挂载数据卷运行\n`docker run -p 8080:8080 --name myshop -v /usr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT -d tomcat`\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# docker run -p 8086:8080 --name tripweb -v /usr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT -d tomcat\n4df4ef7a219385ebbb818f65f238bfdd0d54f1d65249e2afd653394ccdffb901\n~~~\n\n`docker logs myshop`\n查看docker容器的日志\n~~~\n➜  ROOT sudo docker logs myshop\n25-Sep-2019 03:11:48.843 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.45\n25-Sep-2019 03:11:48.902 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Aug 14 2019 22:21:25 UTC\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.45.0\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=0027\n25-# JDBC\n# MySQL 8.x: com.mysql.cj.jdbc.Driver\njdbc.driverClass=com.mysql.jdbc.Driver\njdbc.connectionURL=jdbc:mysql://116.62.110.99:3307/trip_web_db?useUnicode=true&characterEncoding=UTF-8\njdbc.username=root\njdbc.password=rootSep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]\n25-Sep-2019 03:11:48.922 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]\n25-Sep-2019 03:11:49.150 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"http-nio-8080\"]\n25-Sep-2019 03:11:49.182 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n25-Sep-2019 03:11:49.228 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"ajp-nio-8009\"]\n25-Sep-2019 03:11:49.230 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n25-Sep-2019 03:11:49.237 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 1809 ms\n25-Sep-2019 03:11:49.299 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\n25-Sep-2019 03:11:49.299 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45\n25-Sep-2019 03:11:49.333 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]\n25-Sep-2019 03:12:14.400 WARNING [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [24,548] milliseconds.\n25-Sep-2019 03:12:14.531 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/docs] has finished in [25,197] ms\n25-Sep-2019 03:12:14.531 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/manager]\n25-Sep-2019 03:12:14.597 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/manager] has finished in [66] ms\n25-Sep-2019 03:12:14.598 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/host-manager]\n25-Sep-2019 03:12:14.637 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/host-manager] has finished in [39] ms\n25-Sep-2019 03:12:14.637 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/ROOT]\n25-Sep-2019 03:12:14.756 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/ROOT] has finished in [119] ms\n25-Sep-2019 03:12:14.756 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/examples]\n25-Sep-2019 03:12:15.189 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/examples] has finished in [433] ms\n25-Sep-2019 03:12:15.218 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-nio-8080\"]\n25-Sep-2019 03:12:15.267 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"ajp-nio-8009\"]\n25-Sep-2019 03:12:15.270 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 26033 ms\n~~~\n\ndocker logs -f myshop\n会一直监听日志的变化\n\n## 查看项目\n\n![](Docker学习11-部署项目到容器/9.png)\n\n## 参考资料\n> https://www.funtl.com/zh/guide/%E8%B5%B0%E5%90%91%E5%8D%95%E4%BD%93%E5%9C%B0%E7%8B%B1.html#%E8%A7%86%E9%A2%91%E5%90%88%E9%9B%86\n\n\n\n\n","source":"_posts/Docker学习11-部署项目到容器.md","raw":"---\ntitle: Docker学习11-部署项目到容器\ncatalog: true\ndate: 2019-09-25 11:06:25\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# 部署项目到容器\n\n## 打包项目的war包\n这里用的是我毕业设计的项目,基于SSM的旅游项目网站.\n`mvn package'\n![](Docker学习11-部署项目到容器/1.png)\n\n## 在本地测试项目是否可以正常启动\n- 将项目解压到ROOT中\n![](Docker学习11-部署项目到容器/2.png)\n\n- 启动tomcat\n![](Docker学习11-部署项目到容器/3.png)\n\n- 浏览器端查看\n![](Docker学习11-部署项目到容器/4.png)\n\n- 查看控制台\n![](Docker学习11-部署项目到容器/5.png)\n\n## server端操作\n\n### 上传war到ECS中\n![](Docker学习11-部署项目到容器/6.png)\n\n### 将war移动到ROOT中做数据卷挂载\n~~~\n[root@MyCentOS]~# cd /root\n[root@MyCentOS]~# ls\nauthorized_keys\nmysql57-community-release-el7-10.noarch.rpm\nmysql57-community-release-el7-11.noarch.rpm\nmysql-community-release-el7-5.noarch.rpm\nmysql-community-release-el7-5.noarch.rpm.1\nmysql-community-release-el7-5.noarch.rpm.2\ntrip-web.war\n[root@MyCentOS]~# mv trip-web.war /usr/local/docker/tomcat/ROOT\n[root@MyCentOS]~# cd /usr/local/docker/tomcat/ROOT\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ll\ntotal 45080\n-rw-r--r-- 1 root root      172 Sep 23 16:57 index.html\n-rw-r--r-- 1 root root 46155747 Sep 25 14:44 trip-web.war\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# rm index.html\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# tar\n~~~\n\n### 解压并修改数据库端口\n- 解压\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# unzip -oq trip-web.war\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ls\nMETA-INF  static  trip-web.war  WEB-INF\n~~~\n- 修改\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB-INF/classes# ls\ncn                   mybatis-config.xml          spring-context.xml\ngeneratorConfig.xml  rebel.xml                   spring-mvc.xml\nlog4j.properties     spring-context-druid.xml    trip_web_db.sql\nmapper               spring-context-mybatis.xml  tripweb.properties\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB-INF/classes# vim tripweb.properties\n~~~\n![](Docker学习11-部署项目到容器/7.png)\n\n### 移走war包\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB-INF/classes# cd ../..\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ls\nMETA-INF  static  trip-web.war  WEB-INF\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# mv trip-web.war /root\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# ls\nMETA-INF  static  WEB-INF\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT#\n~~~\n## docker数据库\n\n![](Docker学习11-部署项目到容器/8.png)\n\n\n## 修改项目数据库ip及端口和用户\n~~~\n# JDBC\n# MySQL 8.x: com.mysql.cj.jdbc.Driver\njdbc.driverClass=com.mysql.jdbc.Driver\njdbc.connectionURL=jdbc:mysql://116.62.110.99:3307/trip_web_db?useUnicode=true&characterEncoding=UTF-8\njdbc.username=root\njdbc.password=root\n~~~\n\n### 挂载数据卷运行\n- 挂载数据卷运行\n`docker run -p 8080:8080 --name myshop -v /usr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT -d tomcat`\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat/ROOT# docker run -p 8086:8080 --name tripweb -v /usr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT -d tomcat\n4df4ef7a219385ebbb818f65f238bfdd0d54f1d65249e2afd653394ccdffb901\n~~~\n\n`docker logs myshop`\n查看docker容器的日志\n~~~\n➜  ROOT sudo docker logs myshop\n25-Sep-2019 03:11:48.843 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.45\n25-Sep-2019 03:11:48.902 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Aug 14 2019 22:21:25 UTC\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.45.0\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat\n25-Sep-2019 03:11:48.903 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=0027\n25-# JDBC\n# MySQL 8.x: com.mysql.cj.jdbc.Driver\njdbc.driverClass=com.mysql.jdbc.Driver\njdbc.connectionURL=jdbc:mysql://116.62.110.99:3307/trip_web_db?useUnicode=true&characterEncoding=UTF-8\njdbc.username=root\njdbc.password=rootSep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\n25-Sep-2019 03:11:48.904 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]\n25-Sep-2019 03:11:48.922 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]\n25-Sep-2019 03:11:49.150 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"http-nio-8080\"]\n25-Sep-2019 03:11:49.182 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n25-Sep-2019 03:11:49.228 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"ajp-nio-8009\"]\n25-Sep-2019 03:11:49.230 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n25-Sep-2019 03:11:49.237 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 1809 ms\n25-Sep-2019 03:11:49.299 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\n25-Sep-2019 03:11:49.299 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45\n25-Sep-2019 03:11:49.333 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]\n25-Sep-2019 03:12:14.400 WARNING [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [24,548] milliseconds.\n25-Sep-2019 03:12:14.531 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/docs] has finished in [25,197] ms\n25-Sep-2019 03:12:14.531 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/manager]\n25-Sep-2019 03:12:14.597 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/manager] has finished in [66] ms\n25-Sep-2019 03:12:14.598 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/host-manager]\n25-Sep-2019 03:12:14.637 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/host-manager] has finished in [39] ms\n25-Sep-2019 03:12:14.637 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/ROOT]\n25-Sep-2019 03:12:14.756 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/ROOT] has finished in [119] ms\n25-Sep-2019 03:12:14.756 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/examples]\n25-Sep-2019 03:12:15.189 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/examples] has finished in [433] ms\n25-Sep-2019 03:12:15.218 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-nio-8080\"]\n25-Sep-2019 03:12:15.267 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"ajp-nio-8009\"]\n25-Sep-2019 03:12:15.270 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 26033 ms\n~~~\n\ndocker logs -f myshop\n会一直监听日志的变化\n\n## 查看项目\n\n![](Docker学习11-部署项目到容器/9.png)\n\n## 参考资料\n> https://www.funtl.com/zh/guide/%E8%B5%B0%E5%90%91%E5%8D%95%E4%BD%93%E5%9C%B0%E7%8B%B1.html#%E8%A7%86%E9%A2%91%E5%90%88%E9%9B%86\n\n\n\n\n","slug":"Docker学习11-部署项目到容器","published":1,"updated":"2021-04-20T13:28:10.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1q000bzgl1bsvjpink","content":"<h1><span id=\"部署项目到容器\">部署项目到容器</span></h1>\n<h2><span id=\"打包项目的war包\">打包项目的war包</span></h2>\n<p>这里用的是我毕业设计的项目,基于SSM的旅游项目网站.<br>\n`mvn package’<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/1.png\" alt></p>\n<h2><span id=\"在本地测试项目是否可以正常启动\">在本地测试项目是否可以正常启动</span></h2>\n<ul>\n<li>\n<p>将项目解压到ROOT中<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/2.png\" alt></p>\n</li>\n<li>\n<p>启动tomcat<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/3.png\" alt></p>\n</li>\n<li>\n<p>浏览器端查看<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/4.png\" alt></p>\n</li>\n<li>\n<p>查看控制台<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/5.png\" alt></p>\n</li>\n</ul>\n<h2><span id=\"server端操作\">server端操作</span></h2>\n<h3><span id=\"上传war到ecs中\">上传war到ECS中</span></h3>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/6.png\" alt></p>\n<h3><span id=\"将war移动到root中做数据卷挂载\">将war移动到ROOT中做数据卷挂载</span></h3>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /root</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># ls</span></span><br><span class=\"line\">authorized_keys</span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-10.</span>noarch.rpm</span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-11.</span>noarch.rpm</span><br><span class=\"line\">mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm</span><br><span class=\"line\">mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.1</span></span><br><span class=\"line\">mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.2</span></span><br><span class=\"line\">trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># mv trip-web.war /usr/local/docker/tomcat/ROOT</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /usr/local/docker/tomcat/ROOT</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ll</span></span><br><span class=\"line\">total <span class=\"number\">45080</span></span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root      <span class=\"number\">172</span> Sep <span class=\"number\">23</span> <span class=\"number\">16</span>:<span class=\"number\">57</span> index.html</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root <span class=\"number\">46155747</span> Sep <span class=\"number\">25</span> <span class=\"number\">14</span>:<span class=\"number\">44</span> trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># rm index.html</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># tar</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"解压并修改数据库端口\">解压并修改数据库端口</span></h3>\n<ul>\n<li>解压</li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># unzip -oq trip-web.war</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  trip-web.war  WEB-INF</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB<span class=\"literal\">-INF</span>/classes<span class=\"comment\"># ls</span></span><br><span class=\"line\">cn                   mybatis-config.<span class=\"keyword\">xml</span>          <span class=\"title\">spring-context</span>.xml</span><br><span class=\"line\">generatorConfig.<span class=\"keyword\">xml</span>  <span class=\"title\">rebel</span>.<span class=\"keyword\">xml</span>                   <span class=\"title\">spring-mvc</span>.xml</span><br><span class=\"line\">log4j.properties     spring-context-druid.<span class=\"keyword\">xml</span>    <span class=\"title\">trip_web_db</span>.sql</span><br><span class=\"line\">mapper               spring-context-mybatis.<span class=\"keyword\">xml</span>  <span class=\"title\">tripweb</span>.properties</span><br><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB<span class=\"literal\">-INF</span>/classes<span class=\"comment\"># vim tripweb.properties</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/7.png\" alt></p>\n<h3><span id=\"移走war包\">移走war包</span></h3>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT/WEB-INF/classes<span class=\"meta\"># cd ../..</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  trip-web.war  WEB-INF</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># mv trip-web.war /root</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  WEB-INF</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"docker数据库\">docker数据库</span></h2>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/8.png\" alt></p>\n<h2><span id=\"修改项目数据库ip及端口和用户\">修改项目数据库ip及端口和用户</span></h2>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JDBC</span></span><br><span class=\"line\"><span class=\"comment\"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.driverClass</span>=com.mysql.jdbc.Driver</span><br><span class=\"line\"><span class=\"attr\">jdbc.connectionURL</span>=jdbc:mysql://<span class=\"number\">116.62</span>.<span class=\"number\">110.99</span>:<span class=\"number\">3307</span>/trip_web_db?useUnicode=<span class=\"literal\">true</span>&amp;characterEncoding=UTF-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.username</span>=root</span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=root</span><br></pre></td></tr></table></figure>\n<h3><span id=\"挂载数据卷运行\">挂载数据卷运行</span></h3>\n<ul>\n<li>挂载数据卷运行<br>\n<code>docker run -p 8080:8080 --name myshop -v /usr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT -d tomcat</code></li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"meta\">@MyCentOS</span>]<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"regexp\">/ROOT# docker run -p 8086:8080 --name tripweb -v /</span>usr<span class=\"regexp\">/local/</span>docker<span class=\"regexp\">/tomcat/</span>ROOT<span class=\"regexp\">/:/</span>usr<span class=\"regexp\">/local/</span>tomcat<span class=\"regexp\">/webapps/</span>ROOT -d tomcat</span><br><span class=\"line\"><span class=\"number\">4</span>df4ef7a219385ebbb818f65f238bfdd0d54f1d65249e2afd653394ccdffb901</span><br></pre></td></tr></table></figure>\n<p><code>docker logs myshop</code><br>\n查看docker容器的日志</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ROOT sudo docker logs myshop</span><br><span class=\"line\">25-Sep-2019 03:11:48.843 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>version:        Apache Tomcat/8.5.45</span><br><span class=\"line\">25-Sep-2019 03:11:48.902 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>built:          Aug 14 2019 22:21:25 UTC</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>number:         8.5.45.0</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.<span class=\"attribute\">file</span>=/usr/local/tomcat/conf/logging.properties</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.<span class=\"attribute\">manager</span>=org.apache.juli.ClassLoaderLogManager</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.<span class=\"attribute\">ephemeralDHKeySize</span>=2048</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.<span class=\"attribute\">pkgs</span>=org.apache.catalina.webresources</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.<span class=\"attribute\">UMASK</span>=0027</span><br><span class=\"line\">25-# JDBC</span><br><span class=\"line\"><span class=\"comment\"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">jdbc.<span class=\"attribute\">driverClass</span>=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.<span class=\"attribute\">connectionURL</span>=jdbc:mysql://116.62.110.99:3307/trip_web_db?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">jdbc.<span class=\"attribute\">username</span>=root</span><br><span class=\"line\">jdbc.<span class=\"attribute\">password</span>=rootSep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">base</span>=/usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">home</span>=/usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.<span class=\"attribute\">tmpdir</span>=/usr/local/tomcat/temp</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities:<span class=\"built_in\"> IPv6 </span>[<span class=\"literal\">true</span>], sendfile [<span class=\"literal\">true</span>], accept filters [<span class=\"literal\">false</span>], random [<span class=\"literal\">true</span>].</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [<span class=\"literal\">false</span>], useOpenSSL [<span class=\"literal\">true</span>]</span><br><span class=\"line\">25-Sep-2019 03:11:48.922 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]</span><br><span class=\"line\">25-Sep-2019 03:11:49.150 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:11:49.182 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">25-Sep-2019 03:11:49.228 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:11:49.230 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">25-Sep-2019 03:11:49.237 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.Catalina.load Initialization processed <span class=\"keyword\">in</span> 1809 ms</span><br><span class=\"line\">25-Sep-2019 03:11:49.299 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardService.startInternal Starting<span class=\"built_in\"> service </span>[Catalina]</span><br><span class=\"line\">25-Sep-2019 03:11:49.299 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45</span><br><span class=\"line\">25-Sep-2019 03:11:49.333 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]</span><br><span class=\"line\">25-Sep-2019 03:12:14.400 <span class=\"builtin-name\">WARNING</span> [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom<span class=\"built_in\"> instance </span><span class=\"keyword\">for</span> session ID generation using [SHA1PRNG] took [24,548] milliseconds.</span><br><span class=\"line\">25-Sep-2019 03:12:14.531 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/docs] has finished <span class=\"keyword\">in</span> [25,197] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.531 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/manager]</span><br><span class=\"line\">25-Sep-2019 03:12:14.597 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/manager] has finished <span class=\"keyword\">in</span> [66] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.598 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/host-manager]</span><br><span class=\"line\">25-Sep-2019 03:12:14.637 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/host-manager] has finished <span class=\"keyword\">in</span> [39] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.637 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/ROOT]</span><br><span class=\"line\">25-Sep-2019 03:12:14.756 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/ROOT] has finished <span class=\"keyword\">in</span> [119] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.756 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/examples]</span><br><span class=\"line\">25-Sep-2019 03:12:15.189 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/examples] has finished <span class=\"keyword\">in</span> [433] ms</span><br><span class=\"line\">25-Sep-2019 03:12:15.218 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:12:15.267 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:12:15.270 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.Catalina.start<span class=\"built_in\"> Server </span>startup <span class=\"keyword\">in</span> 26033 ms</span><br></pre></td></tr></table></figure>\n<p>docker logs -f myshop<br>\n会一直监听日志的变化</p>\n<h2><span id=\"查看项目\">查看项目</span></h2>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/9.png\" alt></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/guide/%E8%B5%B0%E5%90%91%E5%8D%95%E4%BD%93%E5%9C%B0%E7%8B%B1.html#%E8%A7%86%E9%A2%91%E5%90%88%E9%9B%86\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/guide/走向单体地狱.html#视频合集</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>部署项目到容器</h1>\n<h2>打包项目的war包</h2>\n<p>这里用的是我毕业设计的项目,基于SSM的旅游项目网站.<br>\n`mvn package’<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/1.png\" alt></p>\n<h2>在本地测试项目是否可以正常启动</h2>\n<ul>\n<li>\n<p>将项目解压到ROOT中<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/2.png\" alt></p>\n</li>\n<li>\n<p>启动tomcat<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/3.png\" alt></p>\n</li>\n<li>\n<p>浏览器端查看<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/4.png\" alt></p>\n</li>\n<li>\n<p>查看控制台<br>\n<img src=\"/2019/09/25/Docker学习11-部署项目到容器/5.png\" alt></p>\n</li>\n</ul>\n<h2>server端操作</h2>\n<h3>上传war到ECS中</h3>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/6.png\" alt></p>\n<h3>将war移动到ROOT中做数据卷挂载</h3>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /root</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># ls</span></span><br><span class=\"line\">authorized_keys</span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-10.</span>noarch.rpm</span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-11.</span>noarch.rpm</span><br><span class=\"line\">mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm</span><br><span class=\"line\">mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.1</span></span><br><span class=\"line\">mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.2</span></span><br><span class=\"line\">trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># mv trip-web.war /usr/local/docker/tomcat/ROOT</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /usr/local/docker/tomcat/ROOT</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ll</span></span><br><span class=\"line\">total <span class=\"number\">45080</span></span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root      <span class=\"number\">172</span> Sep <span class=\"number\">23</span> <span class=\"number\">16</span>:<span class=\"number\">57</span> index.html</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root <span class=\"number\">46155747</span> Sep <span class=\"number\">25</span> <span class=\"number\">14</span>:<span class=\"number\">44</span> trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># rm index.html</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># tar</span></span><br></pre></td></tr></table></figure>\n<h3>解压并修改数据库端口</h3>\n<ul>\n<li>解压</li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># unzip -oq trip-web.war</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  trip-web.war  WEB-INF</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB<span class=\"literal\">-INF</span>/classes<span class=\"comment\"># ls</span></span><br><span class=\"line\">cn                   mybatis-config.<span class=\"keyword\">xml</span>          <span class=\"title\">spring-context</span>.xml</span><br><span class=\"line\">generatorConfig.<span class=\"keyword\">xml</span>  <span class=\"title\">rebel</span>.<span class=\"keyword\">xml</span>                   <span class=\"title\">spring-mvc</span>.xml</span><br><span class=\"line\">log4j.properties     spring-context-druid.<span class=\"keyword\">xml</span>    <span class=\"title\">trip_web_db</span>.sql</span><br><span class=\"line\">mapper               spring-context-mybatis.<span class=\"keyword\">xml</span>  <span class=\"title\">tripweb</span>.properties</span><br><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat/ROOT/WEB<span class=\"literal\">-INF</span>/classes<span class=\"comment\"># vim tripweb.properties</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/7.png\" alt></p>\n<h3>移走war包</h3>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT/WEB-INF/classes<span class=\"meta\"># cd ../..</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  trip-web.war  WEB-INF</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># mv trip-web.war /root</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  WEB-INF</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat/ROOT<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<h2>docker数据库</h2>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/8.png\" alt></p>\n<h2>修改项目数据库ip及端口和用户</h2>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JDBC</span></span><br><span class=\"line\"><span class=\"comment\"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.driverClass</span>=com.mysql.jdbc.Driver</span><br><span class=\"line\"><span class=\"attr\">jdbc.connectionURL</span>=jdbc:mysql://<span class=\"number\">116.62</span>.<span class=\"number\">110.99</span>:<span class=\"number\">3307</span>/trip_web_db?useUnicode=<span class=\"literal\">true</span>&amp;characterEncoding=UTF-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.username</span>=root</span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=root</span><br></pre></td></tr></table></figure>\n<h3>挂载数据卷运行</h3>\n<ul>\n<li>挂载数据卷运行<br>\n<code>docker run -p 8080:8080 --name myshop -v /usr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT -d tomcat</code></li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"meta\">@MyCentOS</span>]<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"regexp\">/ROOT# docker run -p 8086:8080 --name tripweb -v /</span>usr<span class=\"regexp\">/local/</span>docker<span class=\"regexp\">/tomcat/</span>ROOT<span class=\"regexp\">/:/</span>usr<span class=\"regexp\">/local/</span>tomcat<span class=\"regexp\">/webapps/</span>ROOT -d tomcat</span><br><span class=\"line\"><span class=\"number\">4</span>df4ef7a219385ebbb818f65f238bfdd0d54f1d65249e2afd653394ccdffb901</span><br></pre></td></tr></table></figure>\n<p><code>docker logs myshop</code><br>\n查看docker容器的日志</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ROOT sudo docker logs myshop</span><br><span class=\"line\">25-Sep-2019 03:11:48.843 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>version:        Apache Tomcat/8.5.45</span><br><span class=\"line\">25-Sep-2019 03:11:48.902 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>built:          Aug 14 2019 22:21:25 UTC</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>number:         8.5.45.0</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.903 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.<span class=\"attribute\">file</span>=/usr/local/tomcat/conf/logging.properties</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.<span class=\"attribute\">manager</span>=org.apache.juli.ClassLoaderLogManager</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.<span class=\"attribute\">ephemeralDHKeySize</span>=2048</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.<span class=\"attribute\">pkgs</span>=org.apache.catalina.webresources</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.<span class=\"attribute\">UMASK</span>=0027</span><br><span class=\"line\">25-# JDBC</span><br><span class=\"line\"><span class=\"comment\"># MySQL 8.x: com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">jdbc.<span class=\"attribute\">driverClass</span>=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.<span class=\"attribute\">connectionURL</span>=jdbc:mysql://116.62.110.99:3307/trip_web_db?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">jdbc.<span class=\"attribute\">username</span>=root</span><br><span class=\"line\">jdbc.<span class=\"attribute\">password</span>=rootSep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">base</span>=/usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">home</span>=/usr/local/tomcat</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.<span class=\"attribute\">tmpdir</span>=/usr/local/tomcat/temp</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities:<span class=\"built_in\"> IPv6 </span>[<span class=\"literal\">true</span>], sendfile [<span class=\"literal\">true</span>], accept filters [<span class=\"literal\">false</span>], random [<span class=\"literal\">true</span>].</span><br><span class=\"line\">25-Sep-2019 03:11:48.904 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [<span class=\"literal\">false</span>], useOpenSSL [<span class=\"literal\">true</span>]</span><br><span class=\"line\">25-Sep-2019 03:11:48.922 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]</span><br><span class=\"line\">25-Sep-2019 03:11:49.150 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:11:49.182 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">25-Sep-2019 03:11:49.228 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:11:49.230 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">25-Sep-2019 03:11:49.237 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.Catalina.load Initialization processed <span class=\"keyword\">in</span> 1809 ms</span><br><span class=\"line\">25-Sep-2019 03:11:49.299 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardService.startInternal Starting<span class=\"built_in\"> service </span>[Catalina]</span><br><span class=\"line\">25-Sep-2019 03:11:49.299 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45</span><br><span class=\"line\">25-Sep-2019 03:11:49.333 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]</span><br><span class=\"line\">25-Sep-2019 03:12:14.400 <span class=\"builtin-name\">WARNING</span> [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom<span class=\"built_in\"> instance </span><span class=\"keyword\">for</span> session ID generation using [SHA1PRNG] took [24,548] milliseconds.</span><br><span class=\"line\">25-Sep-2019 03:12:14.531 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/docs] has finished <span class=\"keyword\">in</span> [25,197] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.531 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/manager]</span><br><span class=\"line\">25-Sep-2019 03:12:14.597 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/manager] has finished <span class=\"keyword\">in</span> [66] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.598 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/host-manager]</span><br><span class=\"line\">25-Sep-2019 03:12:14.637 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/host-manager] has finished <span class=\"keyword\">in</span> [39] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.637 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/ROOT]</span><br><span class=\"line\">25-Sep-2019 03:12:14.756 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/ROOT] has finished <span class=\"keyword\">in</span> [119] ms</span><br><span class=\"line\">25-Sep-2019 03:12:14.756 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/examples]</span><br><span class=\"line\">25-Sep-2019 03:12:15.189 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/examples] has finished <span class=\"keyword\">in</span> [433] ms</span><br><span class=\"line\">25-Sep-2019 03:12:15.218 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:12:15.267 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">25-Sep-2019 03:12:15.270 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.Catalina.start<span class=\"built_in\"> Server </span>startup <span class=\"keyword\">in</span> 26033 ms</span><br></pre></td></tr></table></figure>\n<p>docker logs -f myshop<br>\n会一直监听日志的变化</p>\n<h2>查看项目</h2>\n<p><img src=\"/2019/09/25/Docker学习11-部署项目到容器/9.png\" alt></p>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/guide/%E8%B5%B0%E5%90%91%E5%8D%95%E4%BD%93%E5%9C%B0%E7%8B%B1.html#%E8%A7%86%E9%A2%91%E5%90%88%E9%9B%86\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/guide/走向单体地狱.html#视频合集</a></p>\n</blockquote>\n"},{"title":"Docker学习10-部署数据库","catalog":true,"date":"2019-09-24T01:19:36.000Z","subtitle":null,"header-img":null,"_content":"# Docker部署数据库\n容器化部署的持久化\n\n## 拉取MySQL\n~~~\n➜  ~ docker pull mysql\nUsing default tag: latest\nGot permission denied while trying to connect to the Dock/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.4=latest: dial unix /var/run/docker.sock: connect: permiss\n➜  ~ sudo docker pull mysql\nUsing default tag: latest\nlatest: Pulling from library/mysql\n8f91359f1fff: Pull complete\n6bbb1c853362: Pull complete\ne6e554c0af6f: Pull complete\nf391c1a77330: Pull complete\n414a8a88eabc: Pull complete\nfee78658f4dd: Pull complete\n9568f6bff01b: Pull complete\n5a026d8bbe50: Pull complete\n07f193b54ae1: Pull complete\n1e404375a275: Pull complete\nb81b2ef0e430: Pull complete\n2f499f36bd40: Pull complete\nDigest: sha256:6d95fa56e008425121e24d2c01b76ebbf51ca1df0bafb1edbe1a46937f4a149d\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n~~~\n\n可以看到最新的mysql是8.0,这个版本取消了MyISAM 支持实务,效率低\n支持InnoDB支持实务,效率也提高了\n互联网企业的开发技能真正需要的技能,微服务架构,也就是分布式系统开发,数据库要支持分布式,目前的大多数企业是通过第三方方案支持,也就是互联网企业的需要原生分布式.\n8.0的MySQL支持原生分布式数据库的解决方案\n\n## 本博客使用5.7版本\n5.7的mysql 支持NoSQL 效率方面是比之前版本快的.\n`➜  ~ sudo docker pull mysql:5.7.22`\n\n## 运行容器\n如果这里直接启动mysql是启动的latest版本的mysql也就是8.0以上的.但是这样是启动不了的,因为最新版的启动方式已经改变.所有我们需要启动的是5.7版本的mysql.\n\n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n68161a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244\n~~~\n\n### 命令参数：\n\n- p 3307:3306：将容器的 3306 端口映射到主机的 3307 端口\n- v /usr/local/docker/mysql/conf:/etc/mysql：将主机当前目录下的 conf 挂载到容器的 /etc/mysql\n- v /usr/local/docker/mysql/logs:/var/log/mysql：将主机当前目录下的 logs 目录挂载到容器的 /var/log/mysql\n- v /usr/local/docker/mysql/data:/var/lib/mysql：将主机当前目录下的 data 目录挂载到容器的 /var/lib/mysql\n- e MYSQL\\_ROOT\\_PASSWORD=root：初始化 root 用户的密码\n- d 守护态运行\n### ECS服务器开放端口\n3306-3316开放10个端口供给docker容器使用\n![](Docker学习10-部署数据库/1.png)\n\n### 查看容器启动情况\n~~~\n➜  ~ sudo docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nf352fd16f729        mysql:5.7.22        \"docker-entrypoint.s…\"   14 seconds ago      Up 13 seconds       0.0.0.0:3307->3306/tcp   mysql\ne74b9cc8e192        tomcat              \"catalina.sh run\"        16 hours ago        Up 16 hours         0.0.0.0:8084->8080/tcp   volumeDemo1\na569649fcc5a        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8083->8080/tcp   volumeDemo\nd53272c36764        tomcat              \"catalina.sh run\"        19 hours ago        Up 19 hours         0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        23 hours ago        Up 19 hours         0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n## 使用客户端工具连接 MySQL\n测试连接成功\n\n![](Docker学习10-部署数据库/2.png)\n\n查看数据库\n![](Docker学习10-部署数据库/3.png)\n\n## 查看docker目录下的文件\n~~~\n➜  docker ls\nmysql  tomcat\n➜  mysql ls\nconf  data  logs\n➜  mysql conf\n➜  conf ls\n➜  conf cd ..\n➜  mysql cd data\n➜  data ls\nauto.cnf          ib_buffer_pool  performance_schema\nca-key.pem        ibdata1         private_key.pem\nca.pem            ib_logfile0     public_key.pem\nclient-cert.pem   ib_logfile1     server-cert.pem\nclient-key.pem    ibtmp1          server-key.pem\nf352fd16f729.pid  mysql           sys\n~~~\n\ndocker帮我创建了mysql文件夹,和window和linux下的目录一样的.\n### 一点小问题\n- 以交互方式启动docker\n~~~\n➜  data sudo docker run -it --rm mysql:5.7.22 bash\nroot@fc1072850e62:/# \n➜  data sudo docker run -it --rm mysql:5.7.22 bash\nroot@fc1072850e62:/# ls\nbin\t\t\t    etc    mnt\t sbin  var\nboot\t\t\t    home   opt\t srv\ndev\t\t\t    lib    proc  sys\ndocker-entrypoint-initdb.d  lib64  root  tmp\nentrypoint.sh\t\t    media  run\t usr\nroot@fc1072850e62:/# whereis mysql\nmysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql\nroot@fc1072850e62:/# cd /etc/mysql/\nroot@fc1072850e62:/etc/mysql# ls\nconf.d\tmy.cnf.fallback  mysql.conf.d\nmy.cnf\tmysql.cnf\nroot@fc1072850e62:/etc/mysql# ll\n\n# 查看配置文件\nroot@fc1072850e62:/etc/mysql# cd mysql.conf.d/\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# ls\nmysqld.cnf\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# cat mysqld.cnf\n# 配置文件详细\n[mysqld]\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\ndatadir\t\t= /var/lib/mysql\n#log-error\t= /var/log/mysql/error.log\n# By default we only accept connections from localhost\n#bind-address\t= 127.0.0.1\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# \n~~~\n- 之前启动时候的参数\n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n68161a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244\n~~~\n与启动后的mysql的配置文件一对比,就发现相同之处了.\n\n## 导入数据库数据\n\nmysql默认情况下可导入的数据库大小为: 16MB\n~~~\nroot@fc1072850e62:/etc/mysql# ls -a\n.   conf.d  my.cnf.fallback  mysql.conf.d\n..  my.cnf  mysql.cnf\nroot@fc1072850e62:/etc/mysql# cd conf.d/\nroot@fc1072850e62:/etc/mysql/conf.d# ls -al\ntotal 20\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 4 root root 4096 Jul 27  2018 ..\n-rw-r--r-- 1 root root   43 Jul 27  2018 docker.cnf\n-rw-r--r-- 1 root root    8 Jul  9  2016 mysql.cnf\n-rw-r--r-- 1 root root   55 Jul  9  2016 mysqldump.cnf\nroot@fc1072850e62:/etc/mysql/conf.d# cat mysqldump.cnf\n[mysqldump]\nquick\nquote-names\n# 数据库初始时可设置的文件大小\nmax_allowed_packet\t= 16M\nroot@fc1072850e62:/etc/mysql/conf.d#\n~~~\n\n实际上需要把`max_allowed_packet      = 16M` 这个配置放到\n~~~\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# ls\nmysqld.cnf\n~~~\nmysql.cnf下.\n\n但是这个容器如果删除掉,这个配置文件也会消失,所以需要使用数据卷将这个配置文件做成共享文件.这样就算这个mysql容器被销毁,下一次新建mysql容器时也会共享数据卷里面的mysql.cnf文件\n\n## 数据卷共享mysql.cnf\n~~~\n➜  mysql cd conf\n➜  conf pwd\n/usr/local/docker/mysql/conf\n➜  conf ls\n➜  conf ll\ntotal 0\n~~~\n退出容器后进入conf目录发现没有任何文件,需要拉取配置文件到这里\n\n### 停止删除原先的容器\n~~~\n➜  conf sudo docker ps\n[sudo] password for ziming:\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nf352fd16f729        mysql:5.7.22        \"docker-entrypoint.s…\"   25 minutes ago      Up 25 minutes       0.0.0.0:3307->3306/tcp   mysql\ne74b9cc8e192        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8084->8080/tcp   volumeDemo1\na569649fcc5a        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8083->8080/tcp   volumeDemo\nd53272c36764        tomcat              \"catalina.sh run\"        19 hours ago        Up 19 hours         0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        23 hours ago        Up 19 hours         0.0.0.0:8081->8080/tcp   elastic_panini\n➜  conf sudo docker stop f352\nf352\n➜  conf sudo docker rm f352\nf352\n~~~\n\n### 修改原先启动配置\n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n~~~\n\n**notice**:\n交互的方式启动容器. run -it\n交互的方式进入容器. exec -it\n\n~~~\n➜  conf sudo docker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n2fbdec92f87ac3c9fb53801476f31fa1a0a66c31a050f8138daa4d5614e886cf\n➜  conf sudo docker exec -it mysql bash\nroot@2fbdec92f87a:/# cd /etc/mysql/mysql.conf.d/\nroot@2fbdec92f87a:/etc/mysql/mysql.conf.d# ls -la\ntotal 12\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 4 root root 4096 Jul 27  2018 ..\n-rw-r--r-- 1 root root 1191 Jul 27  2018 mysqld.cnf\n~~~\n\n### 将文件限制大小追加进次配置文件\n\n~~~\nroot@2fbdec92f87a:/etc/mysql/mysql.conf.d# echo \"max_allowed_packet      = 128M\" >> mysqld.cnf\nroot@2fbdec92f87a:/etc/mysql/mysql.conf.d# cat mysqld.cnf\n\n[mysqld]\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\ndatadir\t\t= /var/lib/mysql\n#log-error\t= /var/log/mysql/error.log\n# By default we only accept connections from localhost\n#bind-address\t= 127.0.0.1\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nmax_allowed_packet      = 128M\n~~~\n追加成功\n\n### 重启docker\n~~~\n➜  conf sudo docker restart mysql\nmysql\n➜  conf\n~~~~\n\n### 导入数据库\n略\n\n### 将容器的文件复制到宿主机\n- 新建一个连接进入容器\n~~~\n[root@MyCentOS]~# docker exec -it mysql bash\nroot@2fbdec92f87a:/# cd /e\nentrypoint.sh  etc/\nroot@2fbdec92f87a:/# cd /etc/mysql/\nroot@2fbdec92f87a:/etc/mysql# ls -al\ntotal 36\ndrwxr-xr-x 1 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 1 root root 4096 Sep 24 02:34 ..\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 conf.d\nlrwxrwxrwx 1 root root   24 Jul 27  2018 my.cnf -> /etc/alternatives/my.cnf\n-rw-r--r-- 1 root root  839 Jul  9  2016 my.cnf.fallback\n-rw-r--r-- 1 root root  796 Mar  4  2018 mysql.cnf\ndrwxr-xr-x 1 root root 4096 Jul 27  2018 mysql.conf.d\n~~~\n\n- 将容器的文件拷贝出来\n`sudo docker cp mysql:/etc/mysql .`\n此时查看拷贝文件已经存在\n~~~\n➜  conf ls\nmysql\n➜  conf cd mysql\n➜  mysql ls\nconf.d  my.cnf.fallback  mysql.conf.d\nmy.cnf  mysql.cnf\n➜  mysql\n# 删除mysql文件夹\n➜  conf sudo rm -fr mysql\n➜  conf ls\nconf.d  my.cnf.fallback  mysql.conf.d\nmy.cnf  mysql.cnf\n# 退回上一级\n➜  conf cd ..\n# 停掉mysql容器\n\nmysql sudo docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n2fbdec92f87a        mysql:5.7.22        \"docker-entrypoint.s…\"   14 minutes ago      Up 9 minutes        0.0.0.0:3307->3306/tcp   mysql\ne74b9cc8e192        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8084->8080/tcp   volumeDemo1\na569649fcc5a        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8083->8080/tcp   volumeDemo\nd53272c36764        tomcat              \"catalina.sh run\"        20 hours ago        Up 20 hours         0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        24 hours ago        Up 20 hours         0.0.0.0:8081->8080/tcp   elastic_panini\n➜  mysql sudo docker stop 2\n2\n➜  mysql sudo docker rm 2  \n2\n~~~\n### 运行带着数据卷的配置命令 \n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n~~~\n- 再进入/etc/mysql/mysql.conf.d查看文件\n\n~~~\n➜  mysql docker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\ndocker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create?name=mysql: dial unix /var/run/docker.sock: connect: permission denied.\nSee 'docker run --help'.\n➜  mysql sudo docker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n00e3d56be3658b26e11ec7d045843638fcba8a938aa2877bd8f9f6e2aa950408\n➜  mysql sudo docker exec -it mysql bash\nroot@00e3d56be365:/# cd /etc/mysql/\nroot@00e3d56be365:/etc/mysql# ls -la\ntotal 24\ndrwxr-xr-x 4 root root 4096 Sep 24 02:46 .\ndrwxr-xr-x 1 root root 4096 Sep 24 02:52 ..\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 conf.d\nlrwxrwxrwx 1 root root   24 Jul 27  2018 my.cnf -> /etc/alternatives/my.cnf\n-rw-r--r-- 1 root root  839 Jul  9  2016 my.cnf.fallback\n-rw-r--r-- 1 root root  796 Mar  4  2018 mysql.cnf\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 mysql.conf.d\nroot@00e3d56be365:/etc/mysql# cd mysql.conf.d/\nroot@00e3d56be365:/etc/mysql/mysql.conf.d# ls -la\ntotal 12\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 4 root root 4096 Sep 24 02:46 ..\n-rw-r--r-- 1 root root 1222 Sep 24 02:36 mysqld.cnf\nroot@00e3d56be365:/etc/mysql/mysql.conf.d# cat mysqld.cnf\n\n[mysqld]\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\ndatadir\t\t= /var/lib/mysql\n#log-error\t= /var/log/mysql/error.log\n# By default we only accept connections from localhost\n#bind-address\t= 127.0.0.1\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nmax_allowed_packet      = 128M\nroot@00e3d56be365:/etc/mysql/mysql.conf.d#\n~~~\n发现配置变化了,追加进去的数据成功.\n\n- 查看宿主机上的数据卷\n就算删除了原先的容器,但是里面的数据库数据并不会被删除,因为这些数据都存放在数据卷里面的,数据卷是生效的\n~~~\n➜  mysql ls\nconf  data  logs\n➜  mysql\n~~~\n\n以上为数据卷的数据库容器化部署\n\n### 参考资料\n> https://www.bilibili.com/video/av29384041/?p=42\n> https://www.funtl.com/zh/docker/Docker-%E6%9E%84%E5%BB%BA-MySQL.html\n\n\n\n","source":"_posts/Docker学习10-部署数据库.md","raw":"---\ntitle: Docker学习10-部署数据库\ncatalog: true\ndate: 2019-09-24 09:19:36\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# Docker部署数据库\n容器化部署的持久化\n\n## 拉取MySQL\n~~~\n➜  ~ docker pull mysql\nUsing default tag: latest\nGot permission denied while trying to connect to the Dock/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.4=latest: dial unix /var/run/docker.sock: connect: permiss\n➜  ~ sudo docker pull mysql\nUsing default tag: latest\nlatest: Pulling from library/mysql\n8f91359f1fff: Pull complete\n6bbb1c853362: Pull complete\ne6e554c0af6f: Pull complete\nf391c1a77330: Pull complete\n414a8a88eabc: Pull complete\nfee78658f4dd: Pull complete\n9568f6bff01b: Pull complete\n5a026d8bbe50: Pull complete\n07f193b54ae1: Pull complete\n1e404375a275: Pull complete\nb81b2ef0e430: Pull complete\n2f499f36bd40: Pull complete\nDigest: sha256:6d95fa56e008425121e24d2c01b76ebbf51ca1df0bafb1edbe1a46937f4a149d\nStatus: Downloaded newer image for mysql:latest\ndocker.io/library/mysql:latest\n~~~\n\n可以看到最新的mysql是8.0,这个版本取消了MyISAM 支持实务,效率低\n支持InnoDB支持实务,效率也提高了\n互联网企业的开发技能真正需要的技能,微服务架构,也就是分布式系统开发,数据库要支持分布式,目前的大多数企业是通过第三方方案支持,也就是互联网企业的需要原生分布式.\n8.0的MySQL支持原生分布式数据库的解决方案\n\n## 本博客使用5.7版本\n5.7的mysql 支持NoSQL 效率方面是比之前版本快的.\n`➜  ~ sudo docker pull mysql:5.7.22`\n\n## 运行容器\n如果这里直接启动mysql是启动的latest版本的mysql也就是8.0以上的.但是这样是启动不了的,因为最新版的启动方式已经改变.所有我们需要启动的是5.7版本的mysql.\n\n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n68161a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244\n~~~\n\n### 命令参数：\n\n- p 3307:3306：将容器的 3306 端口映射到主机的 3307 端口\n- v /usr/local/docker/mysql/conf:/etc/mysql：将主机当前目录下的 conf 挂载到容器的 /etc/mysql\n- v /usr/local/docker/mysql/logs:/var/log/mysql：将主机当前目录下的 logs 目录挂载到容器的 /var/log/mysql\n- v /usr/local/docker/mysql/data:/var/lib/mysql：将主机当前目录下的 data 目录挂载到容器的 /var/lib/mysql\n- e MYSQL\\_ROOT\\_PASSWORD=root：初始化 root 用户的密码\n- d 守护态运行\n### ECS服务器开放端口\n3306-3316开放10个端口供给docker容器使用\n![](Docker学习10-部署数据库/1.png)\n\n### 查看容器启动情况\n~~~\n➜  ~ sudo docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nf352fd16f729        mysql:5.7.22        \"docker-entrypoint.s…\"   14 seconds ago      Up 13 seconds       0.0.0.0:3307->3306/tcp   mysql\ne74b9cc8e192        tomcat              \"catalina.sh run\"        16 hours ago        Up 16 hours         0.0.0.0:8084->8080/tcp   volumeDemo1\na569649fcc5a        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8083->8080/tcp   volumeDemo\nd53272c36764        tomcat              \"catalina.sh run\"        19 hours ago        Up 19 hours         0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        23 hours ago        Up 19 hours         0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n## 使用客户端工具连接 MySQL\n测试连接成功\n\n![](Docker学习10-部署数据库/2.png)\n\n查看数据库\n![](Docker学习10-部署数据库/3.png)\n\n## 查看docker目录下的文件\n~~~\n➜  docker ls\nmysql  tomcat\n➜  mysql ls\nconf  data  logs\n➜  mysql conf\n➜  conf ls\n➜  conf cd ..\n➜  mysql cd data\n➜  data ls\nauto.cnf          ib_buffer_pool  performance_schema\nca-key.pem        ibdata1         private_key.pem\nca.pem            ib_logfile0     public_key.pem\nclient-cert.pem   ib_logfile1     server-cert.pem\nclient-key.pem    ibtmp1          server-key.pem\nf352fd16f729.pid  mysql           sys\n~~~\n\ndocker帮我创建了mysql文件夹,和window和linux下的目录一样的.\n### 一点小问题\n- 以交互方式启动docker\n~~~\n➜  data sudo docker run -it --rm mysql:5.7.22 bash\nroot@fc1072850e62:/# \n➜  data sudo docker run -it --rm mysql:5.7.22 bash\nroot@fc1072850e62:/# ls\nbin\t\t\t    etc    mnt\t sbin  var\nboot\t\t\t    home   opt\t srv\ndev\t\t\t    lib    proc  sys\ndocker-entrypoint-initdb.d  lib64  root  tmp\nentrypoint.sh\t\t    media  run\t usr\nroot@fc1072850e62:/# whereis mysql\nmysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql\nroot@fc1072850e62:/# cd /etc/mysql/\nroot@fc1072850e62:/etc/mysql# ls\nconf.d\tmy.cnf.fallback  mysql.conf.d\nmy.cnf\tmysql.cnf\nroot@fc1072850e62:/etc/mysql# ll\n\n# 查看配置文件\nroot@fc1072850e62:/etc/mysql# cd mysql.conf.d/\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# ls\nmysqld.cnf\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# cat mysqld.cnf\n# 配置文件详细\n[mysqld]\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\ndatadir\t\t= /var/lib/mysql\n#log-error\t= /var/log/mysql/error.log\n# By default we only accept connections from localhost\n#bind-address\t= 127.0.0.1\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# \n~~~\n- 之前启动时候的参数\n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n68161a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244\n~~~\n与启动后的mysql的配置文件一对比,就发现相同之处了.\n\n## 导入数据库数据\n\nmysql默认情况下可导入的数据库大小为: 16MB\n~~~\nroot@fc1072850e62:/etc/mysql# ls -a\n.   conf.d  my.cnf.fallback  mysql.conf.d\n..  my.cnf  mysql.cnf\nroot@fc1072850e62:/etc/mysql# cd conf.d/\nroot@fc1072850e62:/etc/mysql/conf.d# ls -al\ntotal 20\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 4 root root 4096 Jul 27  2018 ..\n-rw-r--r-- 1 root root   43 Jul 27  2018 docker.cnf\n-rw-r--r-- 1 root root    8 Jul  9  2016 mysql.cnf\n-rw-r--r-- 1 root root   55 Jul  9  2016 mysqldump.cnf\nroot@fc1072850e62:/etc/mysql/conf.d# cat mysqldump.cnf\n[mysqldump]\nquick\nquote-names\n# 数据库初始时可设置的文件大小\nmax_allowed_packet\t= 16M\nroot@fc1072850e62:/etc/mysql/conf.d#\n~~~\n\n实际上需要把`max_allowed_packet      = 16M` 这个配置放到\n~~~\nroot@fc1072850e62:/etc/mysql/mysql.conf.d# ls\nmysqld.cnf\n~~~\nmysql.cnf下.\n\n但是这个容器如果删除掉,这个配置文件也会消失,所以需要使用数据卷将这个配置文件做成共享文件.这样就算这个mysql容器被销毁,下一次新建mysql容器时也会共享数据卷里面的mysql.cnf文件\n\n## 数据卷共享mysql.cnf\n~~~\n➜  mysql cd conf\n➜  conf pwd\n/usr/local/docker/mysql/conf\n➜  conf ls\n➜  conf ll\ntotal 0\n~~~\n退出容器后进入conf目录发现没有任何文件,需要拉取配置文件到这里\n\n### 停止删除原先的容器\n~~~\n➜  conf sudo docker ps\n[sudo] password for ziming:\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nf352fd16f729        mysql:5.7.22        \"docker-entrypoint.s…\"   25 minutes ago      Up 25 minutes       0.0.0.0:3307->3306/tcp   mysql\ne74b9cc8e192        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8084->8080/tcp   volumeDemo1\na569649fcc5a        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8083->8080/tcp   volumeDemo\nd53272c36764        tomcat              \"catalina.sh run\"        19 hours ago        Up 19 hours         0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        23 hours ago        Up 19 hours         0.0.0.0:8081->8080/tcp   elastic_panini\n➜  conf sudo docker stop f352\nf352\n➜  conf sudo docker rm f352\nf352\n~~~\n\n### 修改原先启动配置\n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n~~~\n\n**notice**:\n交互的方式启动容器. run -it\n交互的方式进入容器. exec -it\n\n~~~\n➜  conf sudo docker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n2fbdec92f87ac3c9fb53801476f31fa1a0a66c31a050f8138daa4d5614e886cf\n➜  conf sudo docker exec -it mysql bash\nroot@2fbdec92f87a:/# cd /etc/mysql/mysql.conf.d/\nroot@2fbdec92f87a:/etc/mysql/mysql.conf.d# ls -la\ntotal 12\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 4 root root 4096 Jul 27  2018 ..\n-rw-r--r-- 1 root root 1191 Jul 27  2018 mysqld.cnf\n~~~\n\n### 将文件限制大小追加进次配置文件\n\n~~~\nroot@2fbdec92f87a:/etc/mysql/mysql.conf.d# echo \"max_allowed_packet      = 128M\" >> mysqld.cnf\nroot@2fbdec92f87a:/etc/mysql/mysql.conf.d# cat mysqld.cnf\n\n[mysqld]\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\ndatadir\t\t= /var/lib/mysql\n#log-error\t= /var/log/mysql/error.log\n# By default we only accept connections from localhost\n#bind-address\t= 127.0.0.1\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nmax_allowed_packet      = 128M\n~~~\n追加成功\n\n### 重启docker\n~~~\n➜  conf sudo docker restart mysql\nmysql\n➜  conf\n~~~~\n\n### 导入数据库\n略\n\n### 将容器的文件复制到宿主机\n- 新建一个连接进入容器\n~~~\n[root@MyCentOS]~# docker exec -it mysql bash\nroot@2fbdec92f87a:/# cd /e\nentrypoint.sh  etc/\nroot@2fbdec92f87a:/# cd /etc/mysql/\nroot@2fbdec92f87a:/etc/mysql# ls -al\ntotal 36\ndrwxr-xr-x 1 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 1 root root 4096 Sep 24 02:34 ..\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 conf.d\nlrwxrwxrwx 1 root root   24 Jul 27  2018 my.cnf -> /etc/alternatives/my.cnf\n-rw-r--r-- 1 root root  839 Jul  9  2016 my.cnf.fallback\n-rw-r--r-- 1 root root  796 Mar  4  2018 mysql.cnf\ndrwxr-xr-x 1 root root 4096 Jul 27  2018 mysql.conf.d\n~~~\n\n- 将容器的文件拷贝出来\n`sudo docker cp mysql:/etc/mysql .`\n此时查看拷贝文件已经存在\n~~~\n➜  conf ls\nmysql\n➜  conf cd mysql\n➜  mysql ls\nconf.d  my.cnf.fallback  mysql.conf.d\nmy.cnf  mysql.cnf\n➜  mysql\n# 删除mysql文件夹\n➜  conf sudo rm -fr mysql\n➜  conf ls\nconf.d  my.cnf.fallback  mysql.conf.d\nmy.cnf  mysql.cnf\n# 退回上一级\n➜  conf cd ..\n# 停掉mysql容器\n\nmysql sudo docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n2fbdec92f87a        mysql:5.7.22        \"docker-entrypoint.s…\"   14 minutes ago      Up 9 minutes        0.0.0.0:3307->3306/tcp   mysql\ne74b9cc8e192        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8084->8080/tcp   volumeDemo1\na569649fcc5a        tomcat              \"catalina.sh run\"        17 hours ago        Up 17 hours         0.0.0.0:8083->8080/tcp   volumeDemo\nd53272c36764        tomcat              \"catalina.sh run\"        20 hours ago        Up 20 hours         0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        24 hours ago        Up 20 hours         0.0.0.0:8081->8080/tcp   elastic_panini\n➜  mysql sudo docker stop 2\n2\n➜  mysql sudo docker rm 2  \n2\n~~~\n### 运行带着数据卷的配置命令 \n~~~\ndocker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n~~~\n- 再进入/etc/mysql/mysql.conf.d查看文件\n\n~~~\n➜  mysql docker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\ndocker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create?name=mysql: dial unix /var/run/docker.sock: connect: permission denied.\nSee 'docker run --help'.\n➜  mysql sudo docker run -p 3307:3306 --name mysql \\\n-v /usr/local/docker/mysql/conf:/etc/mysql \\\n-v /usr/local/docker/mysql/logs:/var/log/mysql \\\n-v /usr/local/docker/mysql/data:/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=root \\\n-d mysql:5.7.22\n00e3d56be3658b26e11ec7d045843638fcba8a938aa2877bd8f9f6e2aa950408\n➜  mysql sudo docker exec -it mysql bash\nroot@00e3d56be365:/# cd /etc/mysql/\nroot@00e3d56be365:/etc/mysql# ls -la\ntotal 24\ndrwxr-xr-x 4 root root 4096 Sep 24 02:46 .\ndrwxr-xr-x 1 root root 4096 Sep 24 02:52 ..\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 conf.d\nlrwxrwxrwx 1 root root   24 Jul 27  2018 my.cnf -> /etc/alternatives/my.cnf\n-rw-r--r-- 1 root root  839 Jul  9  2016 my.cnf.fallback\n-rw-r--r-- 1 root root  796 Mar  4  2018 mysql.cnf\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 mysql.conf.d\nroot@00e3d56be365:/etc/mysql# cd mysql.conf.d/\nroot@00e3d56be365:/etc/mysql/mysql.conf.d# ls -la\ntotal 12\ndrwxr-xr-x 2 root root 4096 Jul 27  2018 .\ndrwxr-xr-x 4 root root 4096 Sep 24 02:46 ..\n-rw-r--r-- 1 root root 1222 Sep 24 02:36 mysqld.cnf\nroot@00e3d56be365:/etc/mysql/mysql.conf.d# cat mysqld.cnf\n\n[mysqld]\npid-file\t= /var/run/mysqld/mysqld.pid\nsocket\t\t= /var/run/mysqld/mysqld.sock\ndatadir\t\t= /var/lib/mysql\n#log-error\t= /var/log/mysql/error.log\n# By default we only accept connections from localhost\n#bind-address\t= 127.0.0.1\n# Disabling symbolic-links is recommended to prevent assorted security risks\nsymbolic-links=0\nmax_allowed_packet      = 128M\nroot@00e3d56be365:/etc/mysql/mysql.conf.d#\n~~~\n发现配置变化了,追加进去的数据成功.\n\n- 查看宿主机上的数据卷\n就算删除了原先的容器,但是里面的数据库数据并不会被删除,因为这些数据都存放在数据卷里面的,数据卷是生效的\n~~~\n➜  mysql ls\nconf  data  logs\n➜  mysql\n~~~\n\n以上为数据卷的数据库容器化部署\n\n### 参考资料\n> https://www.bilibili.com/video/av29384041/?p=42\n> https://www.funtl.com/zh/docker/Docker-%E6%9E%84%E5%BB%BA-MySQL.html\n\n\n\n","slug":"Docker学习10-部署数据库","published":1,"updated":"2021-04-20T13:28:10.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1r000czgl1lpe05o4v","content":"<h1><span id=\"docker部署数据库\">Docker部署数据库</span></h1>\n<p>容器化部署的持久化</p>\n<h2><span id=\"拉取mysql\">拉取MySQL</span></h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ docker pull mysql</span><br><span class=\"line\">Using <span class=\"keyword\">default</span> <span class=\"string\">tag:</span> latest</span><br><span class=\"line\">Got permission denied <span class=\"keyword\">while</span> trying to connect to the Dock<span class=\"regexp\">/docker.sock: Post http:/</span><span class=\"regexp\">/%2Fvar%2Frun%2Fdocker.sock/</span>v1<span class=\"number\">.4</span>=<span class=\"string\">latest:</span> dial unix <span class=\"regexp\">/var/</span>run/docker.<span class=\"string\">sock:</span> <span class=\"string\">connect:</span> permiss</span><br><span class=\"line\">➜  ~ sudo docker pull mysql</span><br><span class=\"line\">Using <span class=\"keyword\">default</span> <span class=\"string\">tag:</span> latest</span><br><span class=\"line\"><span class=\"string\">latest:</span> Pulling from library/mysql</span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">f91359f1fff:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">6</span><span class=\"string\">bbb1c853362:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e6e554c0af6f:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">f391c1a77330:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">414</span><span class=\"string\">a8a88eabc:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">fee78658f4dd:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">9568</span><span class=\"string\">f6bff01b:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">a026d8bbe50:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">07</span><span class=\"string\">f193b54ae1:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">1e404375</span><span class=\"string\">a275:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">b81b2ef0e430:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">f499f36bd40:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">Digest:</span> <span class=\"string\">sha256:</span><span class=\"number\">6</span>d95fa56e008425121e24d2c01b76ebbf51ca1df0bafb1edbe1a46937f4a149d</span><br><span class=\"line\"><span class=\"string\">Status:</span> Downloaded newer image <span class=\"keyword\">for</span> <span class=\"string\">mysql:</span>latest</span><br><span class=\"line\">docker.io<span class=\"regexp\">/library/</span><span class=\"string\">mysql:</span>latest</span><br></pre></td></tr></table></figure>\n<p>可以看到最新的mysql是8.0,这个版本取消了MyISAM 支持实务,效率低<br>\n支持InnoDB支持实务,效率也提高了<br>\n互联网企业的开发技能真正需要的技能,微服务架构,也就是分布式系统开发,数据库要支持分布式,目前的大多数企业是通过第三方方案支持,也就是互联网企业的需要原生分布式.<br>\n8.0的MySQL支持原生分布式数据库的解决方案</p>\n<h2><span id=\"本博客使用57版本\">本博客使用5.7版本</span></h2>\n<p>5.7的mysql 支持NoSQL 效率方面是比之前版本快的.<br>\n<code>➜ ~ sudo docker pull mysql:5.7.22</code></p>\n<h2><span id=\"运行容器\">运行容器</span></h2>\n<p>如果这里直接启动mysql是启动的latest版本的mysql也就是8.0以上的.但是这样是启动不了的,因为最新版的启动方式已经改变.所有我们需要启动的是5.7版本的mysql.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/conf:/</span>etc/mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/logs:/</span>var<span class=\"regexp\">/log/</span>mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"string\">mysql:</span><span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"number\">68161</span>a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244</span><br></pre></td></tr></table></figure>\n<h3><span id=\"命令参数\">命令参数：</span></h3>\n<ul>\n<li>p 3307:3306：将容器的 3306 端口映射到主机的 3307 端口</li>\n<li>v /usr/local/docker/mysql/conf:/etc/mysql：将主机当前目录下的 conf 挂载到容器的 /etc/mysql</li>\n<li>v /usr/local/docker/mysql/logs:/var/log/mysql：将主机当前目录下的 logs 目录挂载到容器的 /var/log/mysql</li>\n<li>v /usr/local/docker/mysql/data:/var/lib/mysql：将主机当前目录下的 data 目录挂载到容器的 /var/lib/mysql</li>\n<li>e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码</li>\n<li>d 守护态运行</li>\n</ul>\n<h3><span id=\"ecs服务器开放端口\">ECS服务器开放端口</span></h3>\n<p>3306-3316开放10个端口供给docker容器使用<br>\n<img src=\"/2019/09/24/Docker学习10-部署数据库/1.png\" alt></p>\n<h3><span id=\"查看容器启动情况\">查看容器启动情况</span></h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">f352fd16f729</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">14</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">13</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">e74b9cc8e192</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">16</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">16</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8084-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo1</span></span><br><span class=\"line\"><span class=\"string\">a569649fcc5a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">19</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">23</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"使用客户端工具连接-mysql\">使用客户端工具连接 MySQL</span></h2>\n<p>测试连接成功</p>\n<p><img src=\"/2019/09/24/Docker学习10-部署数据库/2.png\" alt></p>\n<p>查看数据库<br>\n<img src=\"/2019/09/24/Docker学习10-部署数据库/3.png\" alt></p>\n<h2><span id=\"查看docker目录下的文件\">查看docker目录下的文件</span></h2>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  docker <span class=\"keyword\">ls</span></span><br><span class=\"line\">mysql  tomcat</span><br><span class=\"line\">➜  mysql <span class=\"keyword\">ls</span></span><br><span class=\"line\"><span class=\"keyword\">conf</span>  data  logs</span><br><span class=\"line\">➜  mysql <span class=\"keyword\">conf</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">ls</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">cd</span> ..</span><br><span class=\"line\">➜  mysql <span class=\"keyword\">cd</span> data</span><br><span class=\"line\">➜  data <span class=\"keyword\">ls</span></span><br><span class=\"line\">auto.<span class=\"keyword\">cnf</span>          ib_buffer_pool  performance_schema</span><br><span class=\"line\"><span class=\"keyword\">ca</span>-key.pem        ibdata1         private_key.pem</span><br><span class=\"line\"><span class=\"keyword\">ca</span>.pem            ib_logfile0     public_key.pem</span><br><span class=\"line\">client-cert.pem   ib_logfile1     server-cert.pem</span><br><span class=\"line\">client-key.pem    ibtmp1          server-key.pem</span><br><span class=\"line\">f352fd16f729.pid  mysql           sys</span><br></pre></td></tr></table></figure>\n<p>docker帮我创建了mysql文件夹,和window和linux下的目录一样的.</p>\n<h3><span id=\"一点小问题\">一点小问题</span></h3>\n<ul>\n<li>以交互方式启动docker</li>\n</ul>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  data sudo docker run -it --rm <span class=\"symbol\">mysql:</span><span class=\"number\">5.7</span>.<span class=\"number\">22</span> bash</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># </span></span><br><span class=\"line\">➜  data sudo docker run -it --rm <span class=\"symbol\">mysql:</span><span class=\"number\">5.7</span>.<span class=\"number\">22</span> bash</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin\t\t\t    etc    mnt\t sbin  var</span><br><span class=\"line\">boot\t\t\t    home   opt\t srv</span><br><span class=\"line\">dev\t\t\t    <span class=\"class\"><span class=\"keyword\">lib</span>    <span class=\"title\">proc</span>  <span class=\"title\">sys</span></span></span><br><span class=\"line\">docker-entrypoint-initdb.d  lib64  root  tmp</span><br><span class=\"line\">entrypoint.sh\t\t    media  run\t usr</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># whereis mysql</span></span><br><span class=\"line\"><span class=\"symbol\">mysql:</span> /usr/bin/mysql /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span> /<span class=\"title\">etc</span>/<span class=\"title\">mysql</span> /<span class=\"title\">usr</span>/<span class=\"title\">share</span>/<span class=\"title\">mysql</span></span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># cd /etc/mysql/</span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.d\tmy.cnf.fallback  mysql.conf.d</span><br><span class=\"line\">my.cnf\tmysql.cnf</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql<span class=\"comment\"># ll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置文件</span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql<span class=\"comment\"># cd mysql.conf.d/</span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql/mysql.conf.d<span class=\"comment\"># ls</span></span><br><span class=\"line\">mysqld.cnf</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql/mysql.conf.d<span class=\"comment\"># cat mysqld.cnf</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件详细</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">pid-file\t= <span class=\"regexp\">/var/run</span><span class=\"regexp\">/mysqld/mysqld</span>.pid</span><br><span class=\"line\">socket\t\t= <span class=\"regexp\">/var/run</span><span class=\"regexp\">/mysqld/mysqld</span>.sock</span><br><span class=\"line\">datadir\t\t= <span class=\"regexp\">/var/lib</span><span class=\"regexp\">/mysql</span></span><br><span class=\"line\"><span class=\"regexp\">#log-error\t= /var</span><span class=\"regexp\">/log/mysql</span><span class=\"regexp\">/error.log</span></span><br><span class=\"line\"><span class=\"regexp\"># By default we only accept connections from localhost</span></span><br><span class=\"line\"><span class=\"regexp\">#bind-address\t= 127.0.0.1</span></span><br><span class=\"line\"><span class=\"regexp\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"regexp\">symbolic-links=0</span></span><br><span class=\"line\"><span class=\"regexp\">root@fc1072850e62:/etc</span><span class=\"regexp\">/mysql/mysql</span>.conf.d<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>之前启动时候的参数</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/conf:/</span>etc/mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/logs:/</span>var<span class=\"regexp\">/log/</span>mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"string\">mysql:</span><span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"number\">68161</span>a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244</span><br></pre></td></tr></table></figure>\n<p>与启动后的mysql的配置文件一对比,就发现相同之处了.</p>\n<h2><span id=\"导入数据库数据\">导入数据库数据</span></h2>\n<p>mysql默认情况下可导入的数据库大小为: 16MB</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql</span><span class=\"comment\"># ls -a</span></span><br><span class=\"line\">.   conf.d  my.cnf.fallback  mysql.conf.d</span><br><span class=\"line\">..  my.cnf  mysql.cnf</span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql</span><span class=\"comment\"># cd conf.d/</span></span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/conf</span>.d<span class=\"comment\"># ls -al</span></span><br><span class=\"line\">total <span class=\"number\">20</span></span><br><span class=\"line\">drwxr-xr-x <span class=\"number\">2</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> .</span><br><span class=\"line\">drwxr-xr-x <span class=\"number\">4</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> ..</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root   <span class=\"number\">43</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> docker.cnf</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root    <span class=\"number\">8</span> Jul  <span class=\"number\">9</span>  <span class=\"number\">2016</span> mysql.cnf</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root   <span class=\"number\">55</span> Jul  <span class=\"number\">9</span>  <span class=\"number\">2016</span> mysqldump.cnf</span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/conf</span>.d<span class=\"comment\"># cat mysqldump.cnf</span></span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\"><span class=\"keyword\">quote</span>-names</span><br><span class=\"line\"><span class=\"comment\"># 数据库初始时可设置的文件大小</span></span><br><span class=\"line\">max_allowed_packet\t= <span class=\"number\">16</span>M</span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/conf</span>.d<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>实际上需要把<code>max_allowed_packet = 16M</code> 这个配置放到</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/mysql</span>.conf.d<span class=\"comment\"># ls</span></span><br><span class=\"line\">mysqld.cnf</span><br></pre></td></tr></table></figure>\n<p>mysql.cnf下.</p>\n<p>但是这个容器如果删除掉,这个配置文件也会消失,所以需要使用数据卷将这个配置文件做成共享文件.这样就算这个mysql容器被销毁,下一次新建mysql容器时也会共享数据卷里面的mysql.cnf文件</p>\n<h2><span id=\"数据卷共享mysqlcnf\">数据卷共享mysql.cnf</span></h2>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  mysql <span class=\"keyword\">cd</span> <span class=\"keyword\">conf</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">pwd</span></span><br><span class=\"line\">/usr/<span class=\"keyword\">local</span>/docker/mysql/<span class=\"keyword\">conf</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">ls</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> ll</span><br><span class=\"line\"><span class=\"keyword\">total</span> 0</span><br></pre></td></tr></table></figure>\n<p>退出容器后进入conf目录发现没有任何文件,需要拉取配置文件到这里</p>\n<h3><span id=\"停止删除原先的容器\">停止删除原先的容器</span></h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">f352fd16f729</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">25</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">25</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">e74b9cc8e192</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8084-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo1</span></span><br><span class=\"line\"><span class=\"string\">a569649fcc5a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">19</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">23</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">f352</span></span><br><span class=\"line\"><span class=\"string\">f352</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">f352</span></span><br><span class=\"line\"><span class=\"string\">f352</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"修改原先启动配置\">修改原先启动配置</span></h3>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/<span class=\"symbol\">logs:</span>/var/log/mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span> \\</span></span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"symbol\">mysql:</span><span class=\"number\">5.7</span>.<span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<p><strong>notice</strong>:<br>\n交互的方式启动容器. run -it<br>\n交互的方式进入容器. exec -it</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  <span class=\"keyword\">conf</span> sudo docker run -<span class=\"keyword\">p</span> <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/<span class=\"built_in\">log</span><span class=\"variable\">s:</span>/var/<span class=\"built_in\">log</span>/mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/dat<span class=\"variable\">a:</span>/var/lib/mysql \\</span><br><span class=\"line\">-<span class=\"keyword\">e</span> MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d mysq<span class=\"variable\">l:5</span>.<span class=\"number\">7.22</span></span><br><span class=\"line\"><span class=\"number\">2</span>fbdec92f87ac3c9fb53801476f31fa1a0a66c31a050f8138daa4d5614e886cf</span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> sudo docker exec -it mysql bash</span><br><span class=\"line\">root@<span class=\"number\">2</span>fbdec92f87<span class=\"variable\">a:</span>/# <span class=\"keyword\">cd</span> /etc/mysql/mysql.<span class=\"keyword\">conf</span>.d/</span><br><span class=\"line\">root@<span class=\"number\">2</span>fbdec92f87<span class=\"variable\">a:</span>/etc/mysql/mysql.<span class=\"keyword\">conf</span>.d# <span class=\"keyword\">ls</span> -<span class=\"keyword\">la</span></span><br><span class=\"line\">total <span class=\"number\">12</span></span><br><span class=\"line\">drwxr-xr-<span class=\"keyword\">x</span> <span class=\"number\">2</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> .</span><br><span class=\"line\">drwxr-xr-<span class=\"keyword\">x</span> <span class=\"number\">4</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> ..</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root <span class=\"number\">1191</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> mysqld.<span class=\"keyword\">cnf</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"将文件限制大小追加进次配置文件\">将文件限制大小追加进次配置文件</span></h3>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@2fbdec92f87a:/etc/mysql/mysql.<span class=\"keyword\">conf</span>.<span class=\"keyword\">d</span># echo <span class=\"string\">\"max_allowed_packet      = 128M\"</span> &gt;&gt; mysqld.cnf</span><br><span class=\"line\">root@2fbdec92f87a:/etc/mysql/mysql.<span class=\"keyword\">conf</span>.<span class=\"keyword\">d</span># <span class=\"keyword\">cat</span> mysqld.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">pid-<span class=\"keyword\">file</span>\t= /<span class=\"keyword\">var</span>/<span class=\"keyword\">run</span>/mysqld/mysqld.pid</span><br><span class=\"line\">socket\t\t= /<span class=\"keyword\">var</span>/<span class=\"keyword\">run</span>/mysqld/mysqld.sock</span><br><span class=\"line\">datadir\t\t= /<span class=\"keyword\">var</span>/lib/mysql</span><br><span class=\"line\">#<span class=\"keyword\">log</span>-<span class=\"keyword\">error</span>\t= /<span class=\"keyword\">var</span>/<span class=\"keyword\">log</span>/mysql/<span class=\"keyword\">error</span>.<span class=\"keyword\">log</span></span><br><span class=\"line\"># <span class=\"keyword\">By</span> default we only accept connections from localhost</span><br><span class=\"line\">#bind-address\t= 127.0.0.1</span><br><span class=\"line\"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\">max_allowed_packet      = 128M</span><br></pre></td></tr></table></figure>\n<p>追加成功</p>\n<h3><span id=\"重启docker\">重启docker</span></h3>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  <span class=\"keyword\">conf</span> sudo docker restart mysql</span><br><span class=\"line\">mysql</span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h3><span id=\"导入数据库\">导入数据库</span></h3>\n<p>略</p>\n<h3><span id=\"将容器的文件复制到宿主机\">将容器的文件复制到宿主机</span></h3>\n<ul>\n<li>新建一个连接进入容器</li>\n</ul>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]~<span class=\"comment\"># docker exec -it mysql bash</span></span><br><span class=\"line\">root@2fbdec92f87a:/<span class=\"comment\"># cd /e</span></span><br><span class=\"line\">entrypoint.sh  etc/</span><br><span class=\"line\">root@2fbdec92f87a:/<span class=\"comment\"># cd /etc/mysql/</span></span><br><span class=\"line\">root@2fbdec92f87a:/etc/mysql<span class=\"comment\"># ls -al</span></span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 1 </span>root root<span class=\"number\"> 4096 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>.</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 1 </span>root root<span class=\"number\"> 4096 </span>Sep<span class=\"number\"> 24 </span>02:34 ..</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 2 </span>root root<span class=\"number\"> 4096 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>conf.d</span><br><span class=\"line\">lrwxrwxrwx<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 24 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>my.cnf -&gt; /etc/alternatives/my.cnf</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root <span class=\"number\"> 839 </span>Jul <span class=\"number\"> 9 </span><span class=\"number\"> 2016 </span>my.cnf.fallback</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root <span class=\"number\"> 796 </span>Mar <span class=\"number\"> 4 </span><span class=\"number\"> 2018 </span>mysql.cnf</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 1 </span>root root<span class=\"number\"> 4096 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>mysql.conf.d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将容器的文件拷贝出来<br>\n<code>sudo docker cp mysql:/etc/mysql .</code><br>\n此时查看拷贝文件已经存在</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">cd</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">conf.d</span>  <span class=\"string\">my.cnf.fallback</span>  <span class=\"string\">mysql.conf.d</span></span><br><span class=\"line\"><span class=\"string\">my.cnf</span>  <span class=\"string\">mysql.cnf</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"comment\"># 删除mysql文件夹</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">rm</span> <span class=\"string\">-fr</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">conf.d</span>  <span class=\"string\">my.cnf.fallback</span>  <span class=\"string\">mysql.conf.d</span></span><br><span class=\"line\"><span class=\"string\">my.cnf</span>  <span class=\"string\">mysql.cnf</span></span><br><span class=\"line\"><span class=\"comment\"># 退回上一级</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">cd</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"comment\"># 停掉mysql容器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">2fbdec92f87a</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">14</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">9</span> <span class=\"string\">minutes</span>        <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">e74b9cc8e192</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8084-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo1</span></span><br><span class=\"line\"><span class=\"string\">a569649fcc5a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">20</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">20</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">24</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">20</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"number\">2</span>  </span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"运行带着数据卷的配置命令\">运行带着数据卷的配置命令</span></h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/conf:/</span>etc/mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/logs:/</span>var<span class=\"regexp\">/log/</span>mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"string\">mysql:</span><span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>再进入/etc/mysql/mysql.conf.d查看文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-p</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span> <span class=\"string\">--name</span> <span class=\"string\">mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/conf:/etc/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/logs:/var/log/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/data:/var/lib/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-e</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-d</span> <span class=\"string\">mysql:5.7.22</span></span><br><span class=\"line\"><span class=\"attr\">docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock:</span> <span class=\"string\">Post</span> <span class=\"string\">http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create?name=mysql:</span> <span class=\"attr\">dial unix /var/run/docker.sock: connect:</span> <span class=\"string\">permission</span> <span class=\"string\">denied.</span></span><br><span class=\"line\"><span class=\"string\">See</span> <span class=\"string\">'docker run --help'</span><span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-p</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span> <span class=\"string\">--name</span> <span class=\"string\">mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/conf:/etc/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/logs:/var/log/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/data:/var/lib/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-e</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-d</span> <span class=\"string\">mysql:5.7.22</span></span><br><span class=\"line\"><span class=\"string\">00e3d56be3658b26e11ec7d045843638fcba8a938aa2877bd8f9f6e2aa950408</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">exec</span> <span class=\"string\">-it</span> <span class=\"string\">mysql</span> <span class=\"string\">bash</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/#</span> <span class=\"string\">cd</span> <span class=\"string\">/etc/mysql/</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql#</span> <span class=\"string\">ls</span> <span class=\"string\">-la</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">4</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:46</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:52</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">conf.d</span></span><br><span class=\"line\"><span class=\"string\">lrwxrwxrwx</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">24</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">my.cnf</span> <span class=\"string\">-&gt;</span> <span class=\"string\">/etc/alternatives/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">839</span> <span class=\"string\">Jul</span>  <span class=\"number\">9</span>  <span class=\"number\">2016</span> <span class=\"string\">my.cnf.fallback</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">796</span> <span class=\"string\">Mar</span>  <span class=\"number\">4</span>  <span class=\"number\">2018</span> <span class=\"string\">mysql.cnf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">mysql.conf.d</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql#</span> <span class=\"string\">cd</span> <span class=\"string\">mysql.conf.d/</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql/mysql.conf.d#</span> <span class=\"string\">ls</span> <span class=\"string\">-la</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">4</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:46</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">1222</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:36</span> <span class=\"string\">mysqld.cnf</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql/mysql.conf.d#</span> <span class=\"string\">cat</span> <span class=\"string\">mysqld.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">pid-file</span>\t<span class=\"string\">=</span> <span class=\"string\">/var/run/mysqld/mysqld.pid</span></span><br><span class=\"line\"><span class=\"string\">socket</span>\t\t<span class=\"string\">=</span> <span class=\"string\">/var/run/mysqld/mysqld.sock</span></span><br><span class=\"line\"><span class=\"string\">datadir</span>\t\t<span class=\"string\">=</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"comment\">#log-error\t= /var/log/mysql/error.log</span></span><br><span class=\"line\"><span class=\"comment\"># By default we only accept connections from localhost</span></span><br><span class=\"line\"><span class=\"comment\">#bind-address\t= 127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"string\">symbolic-links=0</span></span><br><span class=\"line\"><span class=\"string\">max_allowed_packet</span>      <span class=\"string\">=</span> <span class=\"string\">128M</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql/mysql.conf.d#</span></span><br></pre></td></tr></table></figure>\n<p>发现配置变化了,追加进去的数据成功.</p>\n<ul>\n<li>查看宿主机上的数据卷<br>\n就算删除了原先的容器,但是里面的数据库数据并不会被删除,因为这些数据都存放在数据卷里面的,数据卷是生效的</li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  mysql ls</span><br><span class=\"line\"><span class=\"title\">conf</span>  <span class=\"class\"><span class=\"keyword\">data</span>  logs</span></span><br><span class=\"line\">➜  mysql</span><br></pre></td></tr></table></figure>\n<p>以上为数据卷的数据库容器化部署</p>\n<h3><span id=\"参考资料\">参考资料</span></h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/av29384041/?p=42\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=42</a><br>\n<a href=\"https://www.funtl.com/zh/docker/Docker-%E6%9E%84%E5%BB%BA-MySQL.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker/Docker-构建-MySQL.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker部署数据库</h1>\n<p>容器化部署的持久化</p>\n<h2>拉取MySQL</h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ docker pull mysql</span><br><span class=\"line\">Using <span class=\"keyword\">default</span> <span class=\"string\">tag:</span> latest</span><br><span class=\"line\">Got permission denied <span class=\"keyword\">while</span> trying to connect to the Dock<span class=\"regexp\">/docker.sock: Post http:/</span><span class=\"regexp\">/%2Fvar%2Frun%2Fdocker.sock/</span>v1<span class=\"number\">.4</span>=<span class=\"string\">latest:</span> dial unix <span class=\"regexp\">/var/</span>run/docker.<span class=\"string\">sock:</span> <span class=\"string\">connect:</span> permiss</span><br><span class=\"line\">➜  ~ sudo docker pull mysql</span><br><span class=\"line\">Using <span class=\"keyword\">default</span> <span class=\"string\">tag:</span> latest</span><br><span class=\"line\"><span class=\"string\">latest:</span> Pulling from library/mysql</span><br><span class=\"line\"><span class=\"number\">8</span><span class=\"string\">f91359f1fff:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">6</span><span class=\"string\">bbb1c853362:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">e6e554c0af6f:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">f391c1a77330:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">414</span><span class=\"string\">a8a88eabc:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">fee78658f4dd:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">9568</span><span class=\"string\">f6bff01b:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">a026d8bbe50:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">07</span><span class=\"string\">f193b54ae1:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">1e404375</span><span class=\"string\">a275:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">b81b2ef0e430:</span> Pull complete</span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">f499f36bd40:</span> Pull complete</span><br><span class=\"line\"><span class=\"string\">Digest:</span> <span class=\"string\">sha256:</span><span class=\"number\">6</span>d95fa56e008425121e24d2c01b76ebbf51ca1df0bafb1edbe1a46937f4a149d</span><br><span class=\"line\"><span class=\"string\">Status:</span> Downloaded newer image <span class=\"keyword\">for</span> <span class=\"string\">mysql:</span>latest</span><br><span class=\"line\">docker.io<span class=\"regexp\">/library/</span><span class=\"string\">mysql:</span>latest</span><br></pre></td></tr></table></figure>\n<p>可以看到最新的mysql是8.0,这个版本取消了MyISAM 支持实务,效率低<br>\n支持InnoDB支持实务,效率也提高了<br>\n互联网企业的开发技能真正需要的技能,微服务架构,也就是分布式系统开发,数据库要支持分布式,目前的大多数企业是通过第三方方案支持,也就是互联网企业的需要原生分布式.<br>\n8.0的MySQL支持原生分布式数据库的解决方案</p>\n<h2>本博客使用5.7版本</h2>\n<p>5.7的mysql 支持NoSQL 效率方面是比之前版本快的.<br>\n<code>➜ ~ sudo docker pull mysql:5.7.22</code></p>\n<h2>运行容器</h2>\n<p>如果这里直接启动mysql是启动的latest版本的mysql也就是8.0以上的.但是这样是启动不了的,因为最新版的启动方式已经改变.所有我们需要启动的是5.7版本的mysql.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/conf:/</span>etc/mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/logs:/</span>var<span class=\"regexp\">/log/</span>mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"string\">mysql:</span><span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"number\">68161</span>a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244</span><br></pre></td></tr></table></figure>\n<h3>命令参数：</h3>\n<ul>\n<li>p 3307:3306：将容器的 3306 端口映射到主机的 3307 端口</li>\n<li>v /usr/local/docker/mysql/conf:/etc/mysql：将主机当前目录下的 conf 挂载到容器的 /etc/mysql</li>\n<li>v /usr/local/docker/mysql/logs:/var/log/mysql：将主机当前目录下的 logs 目录挂载到容器的 /var/log/mysql</li>\n<li>v /usr/local/docker/mysql/data:/var/lib/mysql：将主机当前目录下的 data 目录挂载到容器的 /var/lib/mysql</li>\n<li>e MYSQL_ROOT_PASSWORD=root：初始化 root 用户的密码</li>\n<li>d 守护态运行</li>\n</ul>\n<h3>ECS服务器开放端口</h3>\n<p>3306-3316开放10个端口供给docker容器使用<br>\n<img src=\"/2019/09/24/Docker学习10-部署数据库/1.png\" alt></p>\n<h3>查看容器启动情况</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">f352fd16f729</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">14</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">13</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">e74b9cc8e192</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">16</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">16</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8084-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo1</span></span><br><span class=\"line\"><span class=\"string\">a569649fcc5a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">19</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">23</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<h2>使用客户端工具连接 MySQL</h2>\n<p>测试连接成功</p>\n<p><img src=\"/2019/09/24/Docker学习10-部署数据库/2.png\" alt></p>\n<p>查看数据库<br>\n<img src=\"/2019/09/24/Docker学习10-部署数据库/3.png\" alt></p>\n<h2>查看docker目录下的文件</h2>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  docker <span class=\"keyword\">ls</span></span><br><span class=\"line\">mysql  tomcat</span><br><span class=\"line\">➜  mysql <span class=\"keyword\">ls</span></span><br><span class=\"line\"><span class=\"keyword\">conf</span>  data  logs</span><br><span class=\"line\">➜  mysql <span class=\"keyword\">conf</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">ls</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">cd</span> ..</span><br><span class=\"line\">➜  mysql <span class=\"keyword\">cd</span> data</span><br><span class=\"line\">➜  data <span class=\"keyword\">ls</span></span><br><span class=\"line\">auto.<span class=\"keyword\">cnf</span>          ib_buffer_pool  performance_schema</span><br><span class=\"line\"><span class=\"keyword\">ca</span>-key.pem        ibdata1         private_key.pem</span><br><span class=\"line\"><span class=\"keyword\">ca</span>.pem            ib_logfile0     public_key.pem</span><br><span class=\"line\">client-cert.pem   ib_logfile1     server-cert.pem</span><br><span class=\"line\">client-key.pem    ibtmp1          server-key.pem</span><br><span class=\"line\">f352fd16f729.pid  mysql           sys</span><br></pre></td></tr></table></figure>\n<p>docker帮我创建了mysql文件夹,和window和linux下的目录一样的.</p>\n<h3>一点小问题</h3>\n<ul>\n<li>以交互方式启动docker</li>\n</ul>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  data sudo docker run -it --rm <span class=\"symbol\">mysql:</span><span class=\"number\">5.7</span>.<span class=\"number\">22</span> bash</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># </span></span><br><span class=\"line\">➜  data sudo docker run -it --rm <span class=\"symbol\">mysql:</span><span class=\"number\">5.7</span>.<span class=\"number\">22</span> bash</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin\t\t\t    etc    mnt\t sbin  var</span><br><span class=\"line\">boot\t\t\t    home   opt\t srv</span><br><span class=\"line\">dev\t\t\t    <span class=\"class\"><span class=\"keyword\">lib</span>    <span class=\"title\">proc</span>  <span class=\"title\">sys</span></span></span><br><span class=\"line\">docker-entrypoint-initdb.d  lib64  root  tmp</span><br><span class=\"line\">entrypoint.sh\t\t    media  run\t usr</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># whereis mysql</span></span><br><span class=\"line\"><span class=\"symbol\">mysql:</span> /usr/bin/mysql /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span> /<span class=\"title\">etc</span>/<span class=\"title\">mysql</span> /<span class=\"title\">usr</span>/<span class=\"title\">share</span>/<span class=\"title\">mysql</span></span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/<span class=\"comment\"># cd /etc/mysql/</span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql<span class=\"comment\"># ls</span></span><br><span class=\"line\">conf.d\tmy.cnf.fallback  mysql.conf.d</span><br><span class=\"line\">my.cnf\tmysql.cnf</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql<span class=\"comment\"># ll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置文件</span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql<span class=\"comment\"># cd mysql.conf.d/</span></span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql/mysql.conf.d<span class=\"comment\"># ls</span></span><br><span class=\"line\">mysqld.cnf</span><br><span class=\"line\">root@<span class=\"symbol\">fc1072850e62:</span>/etc/mysql/mysql.conf.d<span class=\"comment\"># cat mysqld.cnf</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件详细</span></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">pid-file\t= <span class=\"regexp\">/var/run</span><span class=\"regexp\">/mysqld/mysqld</span>.pid</span><br><span class=\"line\">socket\t\t= <span class=\"regexp\">/var/run</span><span class=\"regexp\">/mysqld/mysqld</span>.sock</span><br><span class=\"line\">datadir\t\t= <span class=\"regexp\">/var/lib</span><span class=\"regexp\">/mysql</span></span><br><span class=\"line\"><span class=\"regexp\">#log-error\t= /var</span><span class=\"regexp\">/log/mysql</span><span class=\"regexp\">/error.log</span></span><br><span class=\"line\"><span class=\"regexp\"># By default we only accept connections from localhost</span></span><br><span class=\"line\"><span class=\"regexp\">#bind-address\t= 127.0.0.1</span></span><br><span class=\"line\"><span class=\"regexp\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"regexp\">symbolic-links=0</span></span><br><span class=\"line\"><span class=\"regexp\">root@fc1072850e62:/etc</span><span class=\"regexp\">/mysql/mysql</span>.conf.d<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>之前启动时候的参数</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/conf:/</span>etc/mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/logs:/</span>var<span class=\"regexp\">/log/</span>mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"string\">mysql:</span><span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"number\">68161</span>a1af1760cac2ca7eea5a5c71489b79b34eb834ca9cbae233b5c2daa2244</span><br></pre></td></tr></table></figure>\n<p>与启动后的mysql的配置文件一对比,就发现相同之处了.</p>\n<h2>导入数据库数据</h2>\n<p>mysql默认情况下可导入的数据库大小为: 16MB</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql</span><span class=\"comment\"># ls -a</span></span><br><span class=\"line\">.   conf.d  my.cnf.fallback  mysql.conf.d</span><br><span class=\"line\">..  my.cnf  mysql.cnf</span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql</span><span class=\"comment\"># cd conf.d/</span></span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/conf</span>.d<span class=\"comment\"># ls -al</span></span><br><span class=\"line\">total <span class=\"number\">20</span></span><br><span class=\"line\">drwxr-xr-x <span class=\"number\">2</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> .</span><br><span class=\"line\">drwxr-xr-x <span class=\"number\">4</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> ..</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root   <span class=\"number\">43</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> docker.cnf</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root    <span class=\"number\">8</span> Jul  <span class=\"number\">9</span>  <span class=\"number\">2016</span> mysql.cnf</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root   <span class=\"number\">55</span> Jul  <span class=\"number\">9</span>  <span class=\"number\">2016</span> mysqldump.cnf</span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/conf</span>.d<span class=\"comment\"># cat mysqldump.cnf</span></span><br><span class=\"line\">[mysqldump]</span><br><span class=\"line\">quick</span><br><span class=\"line\"><span class=\"keyword\">quote</span>-names</span><br><span class=\"line\"><span class=\"comment\"># 数据库初始时可设置的文件大小</span></span><br><span class=\"line\">max_allowed_packet\t= <span class=\"number\">16</span>M</span><br><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/conf</span>.d<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>实际上需要把<code>max_allowed_packet = 16M</code> 这个配置放到</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@fc1072850e62</span><span class=\"symbol\">:/etc/mysql/mysql</span>.conf.d<span class=\"comment\"># ls</span></span><br><span class=\"line\">mysqld.cnf</span><br></pre></td></tr></table></figure>\n<p>mysql.cnf下.</p>\n<p>但是这个容器如果删除掉,这个配置文件也会消失,所以需要使用数据卷将这个配置文件做成共享文件.这样就算这个mysql容器被销毁,下一次新建mysql容器时也会共享数据卷里面的mysql.cnf文件</p>\n<h2>数据卷共享mysql.cnf</h2>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  mysql <span class=\"keyword\">cd</span> <span class=\"keyword\">conf</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">pwd</span></span><br><span class=\"line\">/usr/<span class=\"keyword\">local</span>/docker/mysql/<span class=\"keyword\">conf</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> <span class=\"keyword\">ls</span></span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> ll</span><br><span class=\"line\"><span class=\"keyword\">total</span> 0</span><br></pre></td></tr></table></figure>\n<p>退出容器后进入conf目录发现没有任何文件,需要拉取配置文件到这里</p>\n<h3>停止删除原先的容器</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">f352fd16f729</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">25</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">25</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">e74b9cc8e192</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8084-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo1</span></span><br><span class=\"line\"><span class=\"string\">a569649fcc5a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">19</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">23</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">f352</span></span><br><span class=\"line\"><span class=\"string\">f352</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">f352</span></span><br><span class=\"line\"><span class=\"string\">f352</span></span><br></pre></td></tr></table></figure>\n<h3>修改原先启动配置</h3>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/<span class=\"symbol\">logs:</span>/var/log/mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span> \\</span></span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"symbol\">mysql:</span><span class=\"number\">5.7</span>.<span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<p><strong>notice</strong>:<br>\n交互的方式启动容器. run -it<br>\n交互的方式进入容器. exec -it</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  <span class=\"keyword\">conf</span> sudo docker run -<span class=\"keyword\">p</span> <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/<span class=\"built_in\">log</span><span class=\"variable\">s:</span>/var/<span class=\"built_in\">log</span>/mysql \\</span><br><span class=\"line\">-v /usr/local/docker/mysql/dat<span class=\"variable\">a:</span>/var/lib/mysql \\</span><br><span class=\"line\">-<span class=\"keyword\">e</span> MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d mysq<span class=\"variable\">l:5</span>.<span class=\"number\">7.22</span></span><br><span class=\"line\"><span class=\"number\">2</span>fbdec92f87ac3c9fb53801476f31fa1a0a66c31a050f8138daa4d5614e886cf</span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span> sudo docker exec -it mysql bash</span><br><span class=\"line\">root@<span class=\"number\">2</span>fbdec92f87<span class=\"variable\">a:</span>/# <span class=\"keyword\">cd</span> /etc/mysql/mysql.<span class=\"keyword\">conf</span>.d/</span><br><span class=\"line\">root@<span class=\"number\">2</span>fbdec92f87<span class=\"variable\">a:</span>/etc/mysql/mysql.<span class=\"keyword\">conf</span>.d# <span class=\"keyword\">ls</span> -<span class=\"keyword\">la</span></span><br><span class=\"line\">total <span class=\"number\">12</span></span><br><span class=\"line\">drwxr-xr-<span class=\"keyword\">x</span> <span class=\"number\">2</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> .</span><br><span class=\"line\">drwxr-xr-<span class=\"keyword\">x</span> <span class=\"number\">4</span> root root <span class=\"number\">4096</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> ..</span><br><span class=\"line\">-rw-r--r-- <span class=\"number\">1</span> root root <span class=\"number\">1191</span> Jul <span class=\"number\">27</span>  <span class=\"number\">2018</span> mysqld.<span class=\"keyword\">cnf</span></span><br></pre></td></tr></table></figure>\n<h3>将文件限制大小追加进次配置文件</h3>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@2fbdec92f87a:/etc/mysql/mysql.<span class=\"keyword\">conf</span>.<span class=\"keyword\">d</span># echo <span class=\"string\">\"max_allowed_packet      = 128M\"</span> &gt;&gt; mysqld.cnf</span><br><span class=\"line\">root@2fbdec92f87a:/etc/mysql/mysql.<span class=\"keyword\">conf</span>.<span class=\"keyword\">d</span># <span class=\"keyword\">cat</span> mysqld.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">pid-<span class=\"keyword\">file</span>\t= /<span class=\"keyword\">var</span>/<span class=\"keyword\">run</span>/mysqld/mysqld.pid</span><br><span class=\"line\">socket\t\t= /<span class=\"keyword\">var</span>/<span class=\"keyword\">run</span>/mysqld/mysqld.sock</span><br><span class=\"line\">datadir\t\t= /<span class=\"keyword\">var</span>/lib/mysql</span><br><span class=\"line\">#<span class=\"keyword\">log</span>-<span class=\"keyword\">error</span>\t= /<span class=\"keyword\">var</span>/<span class=\"keyword\">log</span>/mysql/<span class=\"keyword\">error</span>.<span class=\"keyword\">log</span></span><br><span class=\"line\"># <span class=\"keyword\">By</span> default we only accept connections from localhost</span><br><span class=\"line\">#bind-address\t= 127.0.0.1</span><br><span class=\"line\"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class=\"line\">symbolic-links=0</span><br><span class=\"line\">max_allowed_packet      = 128M</span><br></pre></td></tr></table></figure>\n<p>追加成功</p>\n<h3>重启docker</h3>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  <span class=\"keyword\">conf</span> sudo docker restart mysql</span><br><span class=\"line\">mysql</span><br><span class=\"line\">➜  <span class=\"keyword\">conf</span></span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h3>导入数据库</h3>\n<p>略</p>\n<h3>将容器的文件复制到宿主机</h3>\n<ul>\n<li>新建一个连接进入容器</li>\n</ul>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]~<span class=\"comment\"># docker exec -it mysql bash</span></span><br><span class=\"line\">root@2fbdec92f87a:/<span class=\"comment\"># cd /e</span></span><br><span class=\"line\">entrypoint.sh  etc/</span><br><span class=\"line\">root@2fbdec92f87a:/<span class=\"comment\"># cd /etc/mysql/</span></span><br><span class=\"line\">root@2fbdec92f87a:/etc/mysql<span class=\"comment\"># ls -al</span></span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 1 </span>root root<span class=\"number\"> 4096 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>.</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 1 </span>root root<span class=\"number\"> 4096 </span>Sep<span class=\"number\"> 24 </span>02:34 ..</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 2 </span>root root<span class=\"number\"> 4096 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>conf.d</span><br><span class=\"line\">lrwxrwxrwx<span class=\"number\"> 1 </span>root root  <span class=\"number\"> 24 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>my.cnf -&gt; /etc/alternatives/my.cnf</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root <span class=\"number\"> 839 </span>Jul <span class=\"number\"> 9 </span><span class=\"number\"> 2016 </span>my.cnf.fallback</span><br><span class=\"line\">-rw-r--r--<span class=\"number\"> 1 </span>root root <span class=\"number\"> 796 </span>Mar <span class=\"number\"> 4 </span><span class=\"number\"> 2018 </span>mysql.cnf</span><br><span class=\"line\">drwxr-xr-x<span class=\"number\"> 1 </span>root root<span class=\"number\"> 4096 </span>Jul<span class=\"number\"> 27 </span><span class=\"number\"> 2018 </span>mysql.conf.d</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将容器的文件拷贝出来<br>\n<code>sudo docker cp mysql:/etc/mysql .</code><br>\n此时查看拷贝文件已经存在</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">cd</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">conf.d</span>  <span class=\"string\">my.cnf.fallback</span>  <span class=\"string\">mysql.conf.d</span></span><br><span class=\"line\"><span class=\"string\">my.cnf</span>  <span class=\"string\">mysql.cnf</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"comment\"># 删除mysql文件夹</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">sudo</span> <span class=\"string\">rm</span> <span class=\"string\">-fr</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">conf.d</span>  <span class=\"string\">my.cnf.fallback</span>  <span class=\"string\">mysql.conf.d</span></span><br><span class=\"line\"><span class=\"string\">my.cnf</span>  <span class=\"string\">mysql.cnf</span></span><br><span class=\"line\"><span class=\"comment\"># 退回上一级</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">conf</span> <span class=\"string\">cd</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"comment\"># 停掉mysql容器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">2fbdec92f87a</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">14</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">9</span> <span class=\"string\">minutes</span>        <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">e74b9cc8e192</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8084-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo1</span></span><br><span class=\"line\"><span class=\"string\">a569649fcc5a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">17</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">volumeDemo</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">20</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">20</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">24</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>        <span class=\"string\">Up</span> <span class=\"number\">20</span> <span class=\"string\">hours</span>         <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"number\">2</span>  </span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3>运行带着数据卷的配置命令</h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p <span class=\"number\">3307</span>:<span class=\"number\">3306</span> --name mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/conf:/</span>etc/mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/logs:/</span>var<span class=\"regexp\">/log/</span>mysql \\</span><br><span class=\"line\">-v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>mysql<span class=\"regexp\">/data:/</span>var<span class=\"regexp\">/lib/</span>mysql \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=root \\</span><br><span class=\"line\">-d <span class=\"string\">mysql:</span><span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>再进入/etc/mysql/mysql.conf.d查看文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-p</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span> <span class=\"string\">--name</span> <span class=\"string\">mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/conf:/etc/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/logs:/var/log/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/data:/var/lib/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-e</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-d</span> <span class=\"string\">mysql:5.7.22</span></span><br><span class=\"line\"><span class=\"attr\">docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock:</span> <span class=\"string\">Post</span> <span class=\"string\">http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/create?name=mysql:</span> <span class=\"attr\">dial unix /var/run/docker.sock: connect:</span> <span class=\"string\">permission</span> <span class=\"string\">denied.</span></span><br><span class=\"line\"><span class=\"string\">See</span> <span class=\"string\">'docker run --help'</span><span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-p</span> <span class=\"number\">3307</span><span class=\"string\">:3306</span> <span class=\"string\">--name</span> <span class=\"string\">mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/conf:/etc/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/logs:/var/log/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-v</span> <span class=\"string\">/usr/local/docker/mysql/data:/var/lib/mysql</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-e</span> <span class=\"string\">MYSQL_ROOT_PASSWORD=root</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">-d</span> <span class=\"string\">mysql:5.7.22</span></span><br><span class=\"line\"><span class=\"string\">00e3d56be3658b26e11ec7d045843638fcba8a938aa2877bd8f9f6e2aa950408</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">mysql</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">exec</span> <span class=\"string\">-it</span> <span class=\"string\">mysql</span> <span class=\"string\">bash</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/#</span> <span class=\"string\">cd</span> <span class=\"string\">/etc/mysql/</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql#</span> <span class=\"string\">ls</span> <span class=\"string\">-la</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">4</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:46</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:52</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">conf.d</span></span><br><span class=\"line\"><span class=\"string\">lrwxrwxrwx</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">24</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">my.cnf</span> <span class=\"string\">-&gt;</span> <span class=\"string\">/etc/alternatives/my.cnf</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">839</span> <span class=\"string\">Jul</span>  <span class=\"number\">9</span>  <span class=\"number\">2016</span> <span class=\"string\">my.cnf.fallback</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">796</span> <span class=\"string\">Mar</span>  <span class=\"number\">4</span>  <span class=\"number\">2018</span> <span class=\"string\">mysql.cnf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">mysql.conf.d</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql#</span> <span class=\"string\">cd</span> <span class=\"string\">mysql.conf.d/</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql/mysql.conf.d#</span> <span class=\"string\">ls</span> <span class=\"string\">-la</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Jul</span> <span class=\"number\">27</span>  <span class=\"number\">2018</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">4</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:46</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">1222</span> <span class=\"string\">Sep</span> <span class=\"number\">24</span> <span class=\"number\">02</span><span class=\"string\">:36</span> <span class=\"string\">mysqld.cnf</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql/mysql.conf.d#</span> <span class=\"string\">cat</span> <span class=\"string\">mysqld.cnf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">[mysqld]</span></span><br><span class=\"line\"><span class=\"string\">pid-file</span>\t<span class=\"string\">=</span> <span class=\"string\">/var/run/mysqld/mysqld.pid</span></span><br><span class=\"line\"><span class=\"string\">socket</span>\t\t<span class=\"string\">=</span> <span class=\"string\">/var/run/mysqld/mysqld.sock</span></span><br><span class=\"line\"><span class=\"string\">datadir</span>\t\t<span class=\"string\">=</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\"><span class=\"comment\">#log-error\t= /var/log/mysql/error.log</span></span><br><span class=\"line\"><span class=\"comment\"># By default we only accept connections from localhost</span></span><br><span class=\"line\"><span class=\"comment\">#bind-address\t= 127.0.0.1</span></span><br><span class=\"line\"><span class=\"comment\"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class=\"line\"><span class=\"string\">symbolic-links=0</span></span><br><span class=\"line\"><span class=\"string\">max_allowed_packet</span>      <span class=\"string\">=</span> <span class=\"string\">128M</span></span><br><span class=\"line\"><span class=\"string\">root@00e3d56be365:/etc/mysql/mysql.conf.d#</span></span><br></pre></td></tr></table></figure>\n<p>发现配置变化了,追加进去的数据成功.</p>\n<ul>\n<li>查看宿主机上的数据卷<br>\n就算删除了原先的容器,但是里面的数据库数据并不会被删除,因为这些数据都存放在数据卷里面的,数据卷是生效的</li>\n</ul>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  mysql ls</span><br><span class=\"line\"><span class=\"title\">conf</span>  <span class=\"class\"><span class=\"keyword\">data</span>  logs</span></span><br><span class=\"line\">➜  mysql</span><br></pre></td></tr></table></figure>\n<p>以上为数据卷的数据库容器化部署</p>\n<h3>参考资料</h3>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/av29384041/?p=42\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=42</a><br>\n<a href=\"https://www.funtl.com/zh/docker/Docker-%E6%9E%84%E5%BB%BA-MySQL.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker/Docker-构建-MySQL.html</a></p>\n</blockquote>\n"},{"title":"Docker学习12-Docker-Compose-介绍","catalog":true,"date":"2019-09-27T09:51:00.000Z","subtitle":null,"header-img":null,"_content":"\n# 什么是Docker Compose?\nDocker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。\n\n## 概况\n\nCompose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 OpenStack 中的 Heat 十分类似。\n\n其代码目前在 https://github.com/docker/compose 上开源。\n\nCompose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。\n\n通过第一部分中的介绍，我们知道使用一个 Dockerfile 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。\n\nCompose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。\n\nCompose 中有两个重要的概念：\n\n服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。\nCompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。\n\nCompose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。\n\ndocke api是为了简化原生docker的操作.\n\n## 参考资料\n> https://www.funtl.com/zh/docker-compose/#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91\n> https://www.bilibili.com/video/av29384041\n","source":"_posts/Docker学习12-Docker-Compose-介绍.md","raw":"---\ntitle: Docker学习12-Docker-Compose-介绍\ncatalog: true\ndate: 2019-09-27 17:51:00\nsubtitle:\nheader-img:\ntags: [Docker, Docker Compose]\n---\n\n# 什么是Docker Compose?\nDocker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。\n\n## 概况\n\nCompose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 OpenStack 中的 Heat 十分类似。\n\n其代码目前在 https://github.com/docker/compose 上开源。\n\nCompose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。\n\n通过第一部分中的介绍，我们知道使用一个 Dockerfile 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。\n\nCompose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。\n\nCompose 中有两个重要的概念：\n\n服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。\n项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。\nCompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。\n\nCompose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。\n\ndocke api是为了简化原生docker的操作.\n\n## 参考资料\n> https://www.funtl.com/zh/docker-compose/#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91\n> https://www.bilibili.com/video/av29384041\n","slug":"Docker学习12-Docker-Compose-介绍","published":1,"updated":"2021-04-20T13:28:10.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1t000ezgl15svgro23","content":"<h1><span id=\"什么是docker-compose\">什么是Docker Compose?</span></h1>\n<p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。</p>\n<h2><span id=\"概况\">概况</span></h2>\n<p>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 OpenStack 中的 Heat 十分类似。</p>\n<p>其代码目前在 <a href=\"https://github.com/docker/compose\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose</a> 上开源。</p>\n<p>Compose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p>\n<p>通过第一部分中的介绍，我们知道使用一个 Dockerfile 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p>\n<p>Compose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>\n<p>Compose 中有两个重要的概念：</p>\n<p>服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。<br>\n项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。<br>\nCompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>\n<p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p>\n<p>docke api是为了简化原生docker的操作.</p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker-compose/#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/#本节视频</a><br>\n<a href=\"https://www.bilibili.com/video/av29384041\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>什么是Docker Compose?</h1>\n<p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。</p>\n<h2>概况</h2>\n<p>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 OpenStack 中的 Heat 十分类似。</p>\n<p>其代码目前在 <a href=\"https://github.com/docker/compose\" target=\"_blank\" rel=\"noopener\">https://github.com/docker/compose</a> 上开源。</p>\n<p>Compose 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p>\n<p>通过第一部分中的介绍，我们知道使用一个 Dockerfile 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p>\n<p>Compose 恰好满足了这样的需求。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>\n<p>Compose 中有两个重要的概念：</p>\n<p>服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。<br>\n项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。<br>\nCompose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>\n<p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p>\n<p>docke api是为了简化原生docker的操作.</p>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker-compose/#%E6%9C%AC%E8%8A%82%E8%A7%86%E9%A2%91\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/#本节视频</a><br>\n<a href=\"https://www.bilibili.com/video/av29384041\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041</a></p>\n</blockquote>\n"},{"title":"Docker-Registry学习1-Docker部署镜像","catalog":true,"date":"2019-10-27T03:41:33.000Z","subtitle":null,"header-img":null,"_content":"# Docker-Registry学习1-Docker部署镜像\n## 重新克隆一个虚拟机用于部署\n![](Docker-Registry学习1-Docker部署镜像/2.png)\n## 修改daemon.json\n~~~\n➜  ~ vim /etc/docker/daemon.json \n~~~\n内容如下:\n~~~\n{\n  \"registry-mirrors\": [\"https://87xm9zvi.mirror.aliyuncs.com\"],\n  \"insecure-registries\": [\"192.168.115.138:5000\"]\n}\n~~~\n重启docker\n~~~\n➜  ~ systemctl restart docker  \n~~~\n查看docker信息是否成功\n~~~\n➜  ~ docker info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 1\n  Running: 0\n  Paused: 0\n  Stopped: 1\n Images: 1\n Server Version: 19.03.4\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339\n runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657\n init version: fec3683\n Security Options:\n  apparmor\n  seccomp\n   Profile: default\n Kernel Version: 4.15.0-66-generic\n Operating System: Ubuntu 18.04.2 LTS\n OSType: linux\n Architecture: x86_64\n CPUs: 2\n Total Memory: 1.924GiB\n Name: ubuntu\n ID: UC5I:QDEG:QVOJ:UKQ7:XC2C:NDC6:UBV3:Y6ZU:JLXZ:O3QJ:NK4C:YWQF\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  192.168.115.138:5000\n  127.0.0.0/8\n Registry Mirrors:\n  https://87xm9zvi.mirror.aliyuncs.com/\n Live Restore Enabled: false\n~~~\n发现成功\n~~~\nWARNING: No swap limit support\n➜  ~ docker pull tomcat\nUsing default tag: latest\nlatest: Pulling from library/tomcat\n9a0b0ce99936: Pull complete \ndb3b6004c61a: Pull complete \nf8f075920295: Pull complete \n6ef14aff1139: Pull complete \n962785d3b7f9: Pull complete \n631589572f9b: Pull complete \nc55a0c6f4c7b: Pull complete \n379605d88e88: Pull complete \ne056aa10ded8: Pull complete \n6349a1c98d85: Pull complete \nDigest: sha256:77e41dbdf7854f03b9a933510e8852c99d836d42ae85cba4b3bc04e8710dc0f7\nStatus: Downloaded newer image for tomcat:latest\ndocker.io/library/tomcat:latest\n➜  ~ docker tag tomcat 192.168.115.138:5000/MyTomcat\nError parsing reference: \"192.168.115.138:5000/MyTomcat\" is not a valid repository/tag: invalid reference format: repository name must be lowercase\n➜  ~ docker tag tomcat 192.168.115.138:5000/tomcat\n➜  ~ docker push 192.168.115.138:5000/tomcat\nThe push refers to repository [192.168.115.138:5000/tomcat]\n65e5e74a1404: Pushed \n38d8d468142f: Pushed \n08579474bb30: Pushed \na8902d6047fe: Pushed \n99557920a7c5: Pushed \n7e3c900343d0: Pushed \nb8f8aeff56a8: Pushed \n687890749166: Pushed \n2f77733e9824: Pushed \n97041f29baff: Pushed \nlatest: digest: sha256:8aee1001456a722358557b9b1f6ee8eecad675b36e4be10f9238ccd8293bc856 size: 2422\n➜  ~ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.115.138:5000/tomcat   latest              882487b8be1d        8 days ago          507MB\ntomcat                        latest              882487b8be1d        8 days ago          507MB\nhello-world                   latest              fce289e99eb9        9 months ago        1.84kB\n➜  ~ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.115.138:5000/tomcat   latest              882487b8be1d        8 days ago          507MB\ntomcat                        latest              882487b8be1d        8 days ago          507MB\nhello-world                   latest              fce289e99eb9        9 months ago        1.84kB\n~~~\n## 查看结果\n\n![](Docker-Registry学习1-Docker部署镜像/1.png)\n\n# 参考资料\n>\n","source":"_posts/Docker-Registry学习1-Docker部署镜像.md","raw":"---\ntitle: Docker-Registry学习1-Docker部署镜像\ncatalog: true\ntags: []\ndate: 2019-10-27 11:41:33\nsubtitle:\nheader-img:\n---\n# Docker-Registry学习1-Docker部署镜像\n## 重新克隆一个虚拟机用于部署\n![](Docker-Registry学习1-Docker部署镜像/2.png)\n## 修改daemon.json\n~~~\n➜  ~ vim /etc/docker/daemon.json \n~~~\n内容如下:\n~~~\n{\n  \"registry-mirrors\": [\"https://87xm9zvi.mirror.aliyuncs.com\"],\n  \"insecure-registries\": [\"192.168.115.138:5000\"]\n}\n~~~\n重启docker\n~~~\n➜  ~ systemctl restart docker  \n~~~\n查看docker信息是否成功\n~~~\n➜  ~ docker info\nClient:\n Debug Mode: false\n\nServer:\n Containers: 1\n  Running: 0\n  Paused: 0\n  Stopped: 1\n Images: 1\n Server Version: 19.03.4\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339\n runc version: 3e425f80a8c931f88e6d94a8c831b9d5aa481657\n init version: fec3683\n Security Options:\n  apparmor\n  seccomp\n   Profile: default\n Kernel Version: 4.15.0-66-generic\n Operating System: Ubuntu 18.04.2 LTS\n OSType: linux\n Architecture: x86_64\n CPUs: 2\n Total Memory: 1.924GiB\n Name: ubuntu\n ID: UC5I:QDEG:QVOJ:UKQ7:XC2C:NDC6:UBV3:Y6ZU:JLXZ:O3QJ:NK4C:YWQF\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  192.168.115.138:5000\n  127.0.0.0/8\n Registry Mirrors:\n  https://87xm9zvi.mirror.aliyuncs.com/\n Live Restore Enabled: false\n~~~\n发现成功\n~~~\nWARNING: No swap limit support\n➜  ~ docker pull tomcat\nUsing default tag: latest\nlatest: Pulling from library/tomcat\n9a0b0ce99936: Pull complete \ndb3b6004c61a: Pull complete \nf8f075920295: Pull complete \n6ef14aff1139: Pull complete \n962785d3b7f9: Pull complete \n631589572f9b: Pull complete \nc55a0c6f4c7b: Pull complete \n379605d88e88: Pull complete \ne056aa10ded8: Pull complete \n6349a1c98d85: Pull complete \nDigest: sha256:77e41dbdf7854f03b9a933510e8852c99d836d42ae85cba4b3bc04e8710dc0f7\nStatus: Downloaded newer image for tomcat:latest\ndocker.io/library/tomcat:latest\n➜  ~ docker tag tomcat 192.168.115.138:5000/MyTomcat\nError parsing reference: \"192.168.115.138:5000/MyTomcat\" is not a valid repository/tag: invalid reference format: repository name must be lowercase\n➜  ~ docker tag tomcat 192.168.115.138:5000/tomcat\n➜  ~ docker push 192.168.115.138:5000/tomcat\nThe push refers to repository [192.168.115.138:5000/tomcat]\n65e5e74a1404: Pushed \n38d8d468142f: Pushed \n08579474bb30: Pushed \na8902d6047fe: Pushed \n99557920a7c5: Pushed \n7e3c900343d0: Pushed \nb8f8aeff56a8: Pushed \n687890749166: Pushed \n2f77733e9824: Pushed \n97041f29baff: Pushed \nlatest: digest: sha256:8aee1001456a722358557b9b1f6ee8eecad675b36e4be10f9238ccd8293bc856 size: 2422\n➜  ~ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.115.138:5000/tomcat   latest              882487b8be1d        8 days ago          507MB\ntomcat                        latest              882487b8be1d        8 days ago          507MB\nhello-world                   latest              fce289e99eb9        9 months ago        1.84kB\n➜  ~ docker images\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\n192.168.115.138:5000/tomcat   latest              882487b8be1d        8 days ago          507MB\ntomcat                        latest              882487b8be1d        8 days ago          507MB\nhello-world                   latest              fce289e99eb9        9 months ago        1.84kB\n~~~\n## 查看结果\n\n![](Docker-Registry学习1-Docker部署镜像/1.png)\n\n# 参考资料\n>\n","slug":"Docker-Registry学习1-Docker部署镜像","published":1,"updated":"2021-04-20T13:28:10.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1u000gzgl10jno5xmj","content":"<h1><span id=\"docker-registry学习1-docker部署镜像\">Docker-Registry学习1-Docker部署镜像</span></h1>\n<h2><span id=\"重新克隆一个虚拟机用于部署\">重新克隆一个虚拟机用于部署</span></h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习1-Docker部署镜像/2.png\" alt></p>\n<h2><span id=\"修改daemonjson\">修改daemon.json</span></h2>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ vim <span class=\"regexp\">/etc/</span>docker<span class=\"regexp\">/daemon.json</span></span><br></pre></td></tr></table></figure>\n<p>内容如下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://87xm9zvi.mirror.aliyuncs.com\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"insecure-registries\"</span>: [<span class=\"string\">\"192.168.115.138:5000\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启docker</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ systemctl <span class=\"built_in\">restart</span> docker</span><br></pre></td></tr></table></figure>\n<p>查看docker信息是否成功</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"><span class=\"attr\">Client:</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Server:</span></span><br><span class=\"line\"> <span class=\"attr\">Containers:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">Running:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Paused:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Stopped:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">Images:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">Server Version:</span> <span class=\"number\">19.03</span><span class=\"number\">.4</span></span><br><span class=\"line\"> <span class=\"attr\">Storage Driver:</span> <span class=\"string\">overlay2</span></span><br><span class=\"line\">  <span class=\"attr\">Backing Filesystem:</span> <span class=\"string\">extfs</span></span><br><span class=\"line\">  <span class=\"attr\">Supports d_type:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">Native Overlay Diff:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"attr\">Logging Driver:</span> <span class=\"string\">json-file</span></span><br><span class=\"line\"> <span class=\"attr\">Cgroup Driver:</span> <span class=\"string\">cgroupfs</span></span><br><span class=\"line\"> <span class=\"attr\">Plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">Volume:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">Network:</span> <span class=\"string\">bridge</span> <span class=\"string\">host</span> <span class=\"string\">ipvlan</span> <span class=\"string\">macvlan</span> <span class=\"literal\">null</span> <span class=\"string\">overlay</span></span><br><span class=\"line\">  <span class=\"attr\">Log:</span> <span class=\"string\">awslogs</span> <span class=\"string\">fluentd</span> <span class=\"string\">gcplogs</span> <span class=\"string\">gelf</span> <span class=\"string\">journald</span> <span class=\"string\">json-file</span> <span class=\"string\">local</span> <span class=\"string\">logentries</span> <span class=\"string\">splunk</span> <span class=\"string\">syslog</span></span><br><span class=\"line\"> <span class=\"attr\">Swarm:</span> <span class=\"string\">inactive</span></span><br><span class=\"line\"> <span class=\"attr\">Runtimes:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Default Runtime:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Init Binary:</span> <span class=\"string\">docker-init</span></span><br><span class=\"line\"> <span class=\"attr\">containerd version:</span> <span class=\"string\">b34a5c8af56e510852c35414db4c1f4fa6172339</span></span><br><span class=\"line\"> <span class=\"attr\">runc version:</span> <span class=\"string\">3e425f80a8c931f88e6d94a8c831b9d5aa481657</span></span><br><span class=\"line\"> <span class=\"attr\">init version:</span> <span class=\"string\">fec3683</span></span><br><span class=\"line\"> <span class=\"attr\">Security Options:</span></span><br><span class=\"line\">  <span class=\"string\">apparmor</span></span><br><span class=\"line\">  <span class=\"string\">seccomp</span></span><br><span class=\"line\">   <span class=\"attr\">Profile:</span> <span class=\"string\">default</span></span><br><span class=\"line\"> <span class=\"attr\">Kernel Version:</span> <span class=\"number\">4.15</span><span class=\"number\">.0</span><span class=\"number\">-66</span><span class=\"string\">-generic</span></span><br><span class=\"line\"> <span class=\"attr\">Operating System:</span> <span class=\"string\">Ubuntu</span> <span class=\"number\">18.04</span><span class=\"number\">.2</span> <span class=\"string\">LTS</span></span><br><span class=\"line\"> <span class=\"attr\">OSType:</span> <span class=\"string\">linux</span></span><br><span class=\"line\"> <span class=\"attr\">Architecture:</span> <span class=\"string\">x86_64</span></span><br><span class=\"line\"> <span class=\"attr\">CPUs:</span> <span class=\"number\">2</span></span><br><span class=\"line\"> <span class=\"attr\">Total Memory:</span> <span class=\"number\">1.</span><span class=\"string\">924GiB</span></span><br><span class=\"line\"> <span class=\"attr\">Name:</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\"> <span class=\"attr\">ID:</span> <span class=\"string\">UC5I:QDEG:QVOJ:UKQ7:XC2C:NDC6:UBV3:Y6ZU:JLXZ:O3QJ:NK4C:YWQF</span></span><br><span class=\"line\"> <span class=\"attr\">Docker Root Dir:</span> <span class=\"string\">/var/lib/docker</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">Registry:</span> <span class=\"string\">https://index.docker.io/v1/</span></span><br><span class=\"line\"> <span class=\"attr\">Labels:</span></span><br><span class=\"line\"> <span class=\"attr\">Experimental:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">Insecure Registries:</span></span><br><span class=\"line\">  <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/8</span></span><br><span class=\"line\"> <span class=\"attr\">Registry Mirrors:</span></span><br><span class=\"line\">  <span class=\"string\">https://87xm9zvi.mirror.aliyuncs.com/</span></span><br><span class=\"line\"> <span class=\"attr\">Live Restore Enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>发现成功</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">WARNING:</span> <span class=\"literal\">No</span> <span class=\"string\">swap</span> <span class=\"string\">limit</span> <span class=\"string\">support</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">pull</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\"><span class=\"attr\">Using default tag:</span> <span class=\"string\">latest</span></span><br><span class=\"line\"><span class=\"attr\">latest:</span> <span class=\"string\">Pulling</span> <span class=\"string\">from</span> <span class=\"string\">library/tomcat</span></span><br><span class=\"line\"><span class=\"attr\">9a0b0ce99936:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">db3b6004c61a:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">f8f075920295:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">6ef14aff1139:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">962785d3b7f9:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">631589572f9b:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">c55a0c6f4c7b:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">379605d88e88:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">e056aa10ded8:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">6349a1c98d85:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">Digest:</span> <span class=\"string\">sha256:77e41dbdf7854f03b9a933510e8852c99d836d42ae85cba4b3bc04e8710dc0f7</span></span><br><span class=\"line\"><span class=\"attr\">Status:</span> <span class=\"string\">Downloaded</span> <span class=\"string\">newer</span> <span class=\"string\">image</span> <span class=\"string\">for</span> <span class=\"string\">tomcat:latest</span></span><br><span class=\"line\"><span class=\"string\">docker.io/library/tomcat:latest</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">tag</span> <span class=\"string\">tomcat</span> <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/MyTomcat</span></span><br><span class=\"line\"><span class=\"attr\">Error parsing reference:</span> <span class=\"string\">\"192.168.115.138:5000/MyTomcat\"</span> <span class=\"attr\">is not a valid repository/tag: invalid reference format:</span> <span class=\"string\">repository</span> <span class=\"string\">name</span> <span class=\"string\">must</span> <span class=\"string\">be</span> <span class=\"string\">lowercase</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">tag</span> <span class=\"string\">tomcat</span> <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">push</span> <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span></span><br><span class=\"line\"><span class=\"string\">The</span> <span class=\"string\">push</span> <span class=\"string\">refers</span> <span class=\"string\">to</span> <span class=\"string\">repository</span> <span class=\"string\">[192.168.115.138:5000/tomcat]</span></span><br><span class=\"line\"><span class=\"attr\">65e5e74a1404:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">38d8d468142f:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">08579474bb30:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">a8902d6047fe:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">99557920a7c5:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">7e3c900343d0:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">b8f8aeff56a8:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">687890749166:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">2f77733e9824:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">97041f29baff:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">latest: digest: sha256:8aee1001456a722358557b9b1f6ee8eecad675b36e4be10f9238ccd8293bc856 size:</span> <span class=\"number\">2422</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>                    <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span>   <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>                        <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">hello-world</span>                   <span class=\"string\">latest</span>              <span class=\"string\">fce289e99eb9</span>        <span class=\"number\">9</span> <span class=\"string\">months</span> <span class=\"string\">ago</span>        <span class=\"number\">1.</span><span class=\"string\">84kB</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>                    <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span>   <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>                        <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">hello-world</span>                   <span class=\"string\">latest</span>              <span class=\"string\">fce289e99eb9</span>        <span class=\"number\">9</span> <span class=\"string\">months</span> <span class=\"string\">ago</span>        <span class=\"number\">1.</span><span class=\"string\">84kB</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习1-Docker部署镜像/1.png\" alt></p>\n<h1><span id=\"参考资料\">参考资料</span></h1>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker-Registry学习1-Docker部署镜像</h1>\n<h2>重新克隆一个虚拟机用于部署</h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习1-Docker部署镜像/2.png\" alt></p>\n<h2>修改daemon.json</h2>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ vim <span class=\"regexp\">/etc/</span>docker<span class=\"regexp\">/daemon.json</span></span><br></pre></td></tr></table></figure>\n<p>内容如下:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"https://87xm9zvi.mirror.aliyuncs.com\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"insecure-registries\"</span>: [<span class=\"string\">\"192.168.115.138:5000\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启docker</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ systemctl <span class=\"built_in\">restart</span> docker</span><br></pre></td></tr></table></figure>\n<p>查看docker信息是否成功</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"><span class=\"attr\">Client:</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Server:</span></span><br><span class=\"line\"> <span class=\"attr\">Containers:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">Running:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Paused:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">Stopped:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">Images:</span> <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"attr\">Server Version:</span> <span class=\"number\">19.03</span><span class=\"number\">.4</span></span><br><span class=\"line\"> <span class=\"attr\">Storage Driver:</span> <span class=\"string\">overlay2</span></span><br><span class=\"line\">  <span class=\"attr\">Backing Filesystem:</span> <span class=\"string\">extfs</span></span><br><span class=\"line\">  <span class=\"attr\">Supports d_type:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">Native Overlay Diff:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"> <span class=\"attr\">Logging Driver:</span> <span class=\"string\">json-file</span></span><br><span class=\"line\"> <span class=\"attr\">Cgroup Driver:</span> <span class=\"string\">cgroupfs</span></span><br><span class=\"line\"> <span class=\"attr\">Plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">Volume:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">Network:</span> <span class=\"string\">bridge</span> <span class=\"string\">host</span> <span class=\"string\">ipvlan</span> <span class=\"string\">macvlan</span> <span class=\"literal\">null</span> <span class=\"string\">overlay</span></span><br><span class=\"line\">  <span class=\"attr\">Log:</span> <span class=\"string\">awslogs</span> <span class=\"string\">fluentd</span> <span class=\"string\">gcplogs</span> <span class=\"string\">gelf</span> <span class=\"string\">journald</span> <span class=\"string\">json-file</span> <span class=\"string\">local</span> <span class=\"string\">logentries</span> <span class=\"string\">splunk</span> <span class=\"string\">syslog</span></span><br><span class=\"line\"> <span class=\"attr\">Swarm:</span> <span class=\"string\">inactive</span></span><br><span class=\"line\"> <span class=\"attr\">Runtimes:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Default Runtime:</span> <span class=\"string\">runc</span></span><br><span class=\"line\"> <span class=\"attr\">Init Binary:</span> <span class=\"string\">docker-init</span></span><br><span class=\"line\"> <span class=\"attr\">containerd version:</span> <span class=\"string\">b34a5c8af56e510852c35414db4c1f4fa6172339</span></span><br><span class=\"line\"> <span class=\"attr\">runc version:</span> <span class=\"string\">3e425f80a8c931f88e6d94a8c831b9d5aa481657</span></span><br><span class=\"line\"> <span class=\"attr\">init version:</span> <span class=\"string\">fec3683</span></span><br><span class=\"line\"> <span class=\"attr\">Security Options:</span></span><br><span class=\"line\">  <span class=\"string\">apparmor</span></span><br><span class=\"line\">  <span class=\"string\">seccomp</span></span><br><span class=\"line\">   <span class=\"attr\">Profile:</span> <span class=\"string\">default</span></span><br><span class=\"line\"> <span class=\"attr\">Kernel Version:</span> <span class=\"number\">4.15</span><span class=\"number\">.0</span><span class=\"number\">-66</span><span class=\"string\">-generic</span></span><br><span class=\"line\"> <span class=\"attr\">Operating System:</span> <span class=\"string\">Ubuntu</span> <span class=\"number\">18.04</span><span class=\"number\">.2</span> <span class=\"string\">LTS</span></span><br><span class=\"line\"> <span class=\"attr\">OSType:</span> <span class=\"string\">linux</span></span><br><span class=\"line\"> <span class=\"attr\">Architecture:</span> <span class=\"string\">x86_64</span></span><br><span class=\"line\"> <span class=\"attr\">CPUs:</span> <span class=\"number\">2</span></span><br><span class=\"line\"> <span class=\"attr\">Total Memory:</span> <span class=\"number\">1.</span><span class=\"string\">924GiB</span></span><br><span class=\"line\"> <span class=\"attr\">Name:</span> <span class=\"string\">ubuntu</span></span><br><span class=\"line\"> <span class=\"attr\">ID:</span> <span class=\"string\">UC5I:QDEG:QVOJ:UKQ7:XC2C:NDC6:UBV3:Y6ZU:JLXZ:O3QJ:NK4C:YWQF</span></span><br><span class=\"line\"> <span class=\"attr\">Docker Root Dir:</span> <span class=\"string\">/var/lib/docker</span></span><br><span class=\"line\"> <span class=\"attr\">Debug Mode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">Registry:</span> <span class=\"string\">https://index.docker.io/v1/</span></span><br><span class=\"line\"> <span class=\"attr\">Labels:</span></span><br><span class=\"line\"> <span class=\"attr\">Experimental:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">Insecure Registries:</span></span><br><span class=\"line\">  <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/8</span></span><br><span class=\"line\"> <span class=\"attr\">Registry Mirrors:</span></span><br><span class=\"line\">  <span class=\"string\">https://87xm9zvi.mirror.aliyuncs.com/</span></span><br><span class=\"line\"> <span class=\"attr\">Live Restore Enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>发现成功</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">WARNING:</span> <span class=\"literal\">No</span> <span class=\"string\">swap</span> <span class=\"string\">limit</span> <span class=\"string\">support</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">pull</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\"><span class=\"attr\">Using default tag:</span> <span class=\"string\">latest</span></span><br><span class=\"line\"><span class=\"attr\">latest:</span> <span class=\"string\">Pulling</span> <span class=\"string\">from</span> <span class=\"string\">library/tomcat</span></span><br><span class=\"line\"><span class=\"attr\">9a0b0ce99936:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">db3b6004c61a:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">f8f075920295:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">6ef14aff1139:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">962785d3b7f9:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">631589572f9b:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">c55a0c6f4c7b:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">379605d88e88:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">e056aa10ded8:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">6349a1c98d85:</span> <span class=\"string\">Pull</span> <span class=\"string\">complete</span> </span><br><span class=\"line\"><span class=\"attr\">Digest:</span> <span class=\"string\">sha256:77e41dbdf7854f03b9a933510e8852c99d836d42ae85cba4b3bc04e8710dc0f7</span></span><br><span class=\"line\"><span class=\"attr\">Status:</span> <span class=\"string\">Downloaded</span> <span class=\"string\">newer</span> <span class=\"string\">image</span> <span class=\"string\">for</span> <span class=\"string\">tomcat:latest</span></span><br><span class=\"line\"><span class=\"string\">docker.io/library/tomcat:latest</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">tag</span> <span class=\"string\">tomcat</span> <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/MyTomcat</span></span><br><span class=\"line\"><span class=\"attr\">Error parsing reference:</span> <span class=\"string\">\"192.168.115.138:5000/MyTomcat\"</span> <span class=\"attr\">is not a valid repository/tag: invalid reference format:</span> <span class=\"string\">repository</span> <span class=\"string\">name</span> <span class=\"string\">must</span> <span class=\"string\">be</span> <span class=\"string\">lowercase</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">tag</span> <span class=\"string\">tomcat</span> <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">push</span> <span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span></span><br><span class=\"line\"><span class=\"string\">The</span> <span class=\"string\">push</span> <span class=\"string\">refers</span> <span class=\"string\">to</span> <span class=\"string\">repository</span> <span class=\"string\">[192.168.115.138:5000/tomcat]</span></span><br><span class=\"line\"><span class=\"attr\">65e5e74a1404:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">38d8d468142f:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">08579474bb30:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">a8902d6047fe:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">99557920a7c5:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">7e3c900343d0:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">b8f8aeff56a8:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">687890749166:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">2f77733e9824:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">97041f29baff:</span> <span class=\"string\">Pushed</span> </span><br><span class=\"line\"><span class=\"attr\">latest: digest: sha256:8aee1001456a722358557b9b1f6ee8eecad675b36e4be10f9238ccd8293bc856 size:</span> <span class=\"number\">2422</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>                    <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span>   <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>                        <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">hello-world</span>                   <span class=\"string\">latest</span>              <span class=\"string\">fce289e99eb9</span>        <span class=\"number\">9</span> <span class=\"string\">months</span> <span class=\"string\">ago</span>        <span class=\"number\">1.</span><span class=\"string\">84kB</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>                    <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"number\">192.168</span><span class=\"number\">.115</span><span class=\"number\">.138</span><span class=\"string\">:5000/tomcat</span>   <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>                        <span class=\"string\">latest</span>              <span class=\"string\">882487b8be1d</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">507MB</span></span><br><span class=\"line\"><span class=\"string\">hello-world</span>                   <span class=\"string\">latest</span>              <span class=\"string\">fce289e99eb9</span>        <span class=\"number\">9</span> <span class=\"string\">months</span> <span class=\"string\">ago</span>        <span class=\"number\">1.</span><span class=\"string\">84kB</span></span><br></pre></td></tr></table></figure>\n<h2>查看结果</h2>\n<p><img src=\"/2019/10/27/Docker-Registry学习1-Docker部署镜像/1.png\" alt></p>\n<h1>参考资料</h1>\n<blockquote></blockquote>\n"},{"title":"Docker学习1-Docker是什么","catalog":true,"date":"2019-09-18T00:55:38.000Z","subtitle":null,"header-img":null,"_content":"# Docker学习01-Docker安装与应用\n真正实现一次编译到处运行\n\n## Ubuntu 安装 Docker\n\n## 使用 APT 安装\n以下命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。\n- 安装必要的一些系统工具\n~~~\nsudo apt-get update\nsudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n~~~\n- 安装 GPG 证书\n~~~\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n~~~\n- 写入软件源信息\n~~~\nsudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n~~~\n## 使用脚本自动安装\n在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：\n1. 主要从get.docker.com上下载get-docker.sh\n2. 将get-docker.sh中的镜像换成阿里云\n~~~\n$ curl -fsSL get.docker.com -o get-docker.sh\n# 可能会出现 404 错误，请移步下面的特别说明\n$ sudo sh get-docker.sh --mirror Aliyun\n~~~\n执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。\n\n~~~\n➜  ~ curl -fsSL get.docker.com -o get-docker.sh\n➜  ~ sudo sh get-docker.sh --mirror Aliyun\n# Executing docker install script, commit: f45d7c11389849ff46a6b4d94e0dd1ffebca32c1\n+ sh -c apt-get update -qq >/dev/null\n+ sh -c DEBIAN_FRONTEND=noninteractive apt-get install -y -qq apt-transport-https ca-certificates curl >/dev/null\n+ sh -c curl -fsSL \"https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg\" | apt-key add -qq - >/dev/null\nWarning: apt-key output should not be parsed (stdout is not a terminal)\n+ sh -c echo \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable\" > /etc/apt/sources.list.d/docker.list\n+ sh -c apt-get update -qq >/dev/null\nW: Target Packages (stable/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Packages (stable/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-amd64) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-all) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Packages (stable/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Packages (stable/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-amd64) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-all) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\n+ [ -n  ]\n+ sh -c apt-get install -y -qq --no-install-recommends docker-ce >/dev/null\n+ sh -c docker version\nClient: Docker Engine - Community\n Version:           19.03.4\n API version:       1.40\n Go version:        go1.12.10\n Git commit:        9013bf583a\n Built:             Fri Oct 18 15:54:09 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          19.03.4\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.10\n  Git commit:       9013bf583a\n  Built:            Fri Oct 18 15:52:40 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.2.10\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\n runc:\n  Version:          1.0.0-rc8+dev\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\n docker-init:\n  Version:          0.18.0\n  GitCommit:        fec3683\nIf you would like to use Docker as a non-root user, you should now consider\nadding your user to the \"docker\" group with something like:\n\n  sudo usermod -aG docker your-user\n\nRemember that you will have to log out and back in for this to take effect!\n\nWARNING: Adding a user to the \"docker\" group will grant the ability to run\n         containers which can be used to obtain root privileges on the\n         docker host.\n         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\n         for more information.\n~~~\n## 将用户测试加入 docker 组里面\n~~~\nIf you would like to use Docker as a non-root user, you should now consider\nadding your user to the \"docker\" group with something like:\n\n  sudo usermod -aG docker your-user\n\nRemember that you will have to log out and back in for this to take effect!\n\nWARNING: Adding a user to the \"docker\" group will grant the ability to run\n         containers which can be used to obtain root privileges on the\n         docker host.\n         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\n         for more information.\n➜  ~ \n➜  ~ \n➜  ~ sudo usermod -aG docker root     \n➜  ~ id root\nuid=0(root) gid=0(root) groups=0(root),999(docker)\n➜  ~ systemctl start docker\n➜  ~ systemctl status docker\n~~~\n用户exit \n退出后重新登录\n\n## 查看是否安装docker\n~~~\n~ docker version\nClient: Docker Engine - Community\n Version:           19.03.4\n API version:       1.40\n Go version:        go1.12.10\n Git commit:        9013bf583a\n Built:             Fri Oct 18 15:54:09 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          19.03.4\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.10\n  Git commit:       9013bf583a\n  Built:            Fri Oct 18 15:52:40 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.2.10\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\n runc:\n  Version:          1.0.0-rc8+dev\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\n docker-init:\n  Version:          0.18.0\n  GitCommit:        fec3683\n~~~\n\n## 运行一下hello-world\n `docker run hello-world`\n~~~\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f\nStatus: Downloaded newer image for hello-world:latest\n~~~\n## 查看镜像\n~~~\n➜  ~ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhello-world         latest              fce289e99eb9        9 months ago        1.84kB\n~~~\n","source":"_posts/Docker学习1-Docker是什么.md","raw":"---\ntitle: Docker学习1-Docker是什么\ncatalog: true\ndate: 2019-09-18 08:55:38\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# Docker学习01-Docker安装与应用\n真正实现一次编译到处运行\n\n## Ubuntu 安装 Docker\n\n## 使用 APT 安装\n以下命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。\n- 安装必要的一些系统工具\n~~~\nsudo apt-get update\nsudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n~~~\n- 安装 GPG 证书\n~~~\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n~~~\n- 写入软件源信息\n~~~\nsudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n~~~\n## 使用脚本自动安装\n在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：\n1. 主要从get.docker.com上下载get-docker.sh\n2. 将get-docker.sh中的镜像换成阿里云\n~~~\n$ curl -fsSL get.docker.com -o get-docker.sh\n# 可能会出现 404 错误，请移步下面的特别说明\n$ sudo sh get-docker.sh --mirror Aliyun\n~~~\n执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。\n\n~~~\n➜  ~ curl -fsSL get.docker.com -o get-docker.sh\n➜  ~ sudo sh get-docker.sh --mirror Aliyun\n# Executing docker install script, commit: f45d7c11389849ff46a6b4d94e0dd1ffebca32c1\n+ sh -c apt-get update -qq >/dev/null\n+ sh -c DEBIAN_FRONTEND=noninteractive apt-get install -y -qq apt-transport-https ca-certificates curl >/dev/null\n+ sh -c curl -fsSL \"https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg\" | apt-key add -qq - >/dev/null\nWarning: apt-key output should not be parsed (stdout is not a terminal)\n+ sh -c echo \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable\" > /etc/apt/sources.list.d/docker.list\n+ sh -c apt-get update -qq >/dev/null\nW: Target Packages (stable/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Packages (stable/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-amd64) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-all) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Packages (stable/binary-amd64/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Packages (stable/binary-all/Packages) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en_US) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target Translations (stable/i18n/Translation-en) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-amd64) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\nW: Target CNF (stable/cnf/Commands-all) is configured multiple times in /etc/apt/sources.list:49 and /etc/apt/sources.list.d/docker.list:1\n+ [ -n  ]\n+ sh -c apt-get install -y -qq --no-install-recommends docker-ce >/dev/null\n+ sh -c docker version\nClient: Docker Engine - Community\n Version:           19.03.4\n API version:       1.40\n Go version:        go1.12.10\n Git commit:        9013bf583a\n Built:             Fri Oct 18 15:54:09 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          19.03.4\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.10\n  Git commit:       9013bf583a\n  Built:            Fri Oct 18 15:52:40 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.2.10\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\n runc:\n  Version:          1.0.0-rc8+dev\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\n docker-init:\n  Version:          0.18.0\n  GitCommit:        fec3683\nIf you would like to use Docker as a non-root user, you should now consider\nadding your user to the \"docker\" group with something like:\n\n  sudo usermod -aG docker your-user\n\nRemember that you will have to log out and back in for this to take effect!\n\nWARNING: Adding a user to the \"docker\" group will grant the ability to run\n         containers which can be used to obtain root privileges on the\n         docker host.\n         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\n         for more information.\n~~~\n## 将用户测试加入 docker 组里面\n~~~\nIf you would like to use Docker as a non-root user, you should now consider\nadding your user to the \"docker\" group with something like:\n\n  sudo usermod -aG docker your-user\n\nRemember that you will have to log out and back in for this to take effect!\n\nWARNING: Adding a user to the \"docker\" group will grant the ability to run\n         containers which can be used to obtain root privileges on the\n         docker host.\n         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\n         for more information.\n➜  ~ \n➜  ~ \n➜  ~ sudo usermod -aG docker root     \n➜  ~ id root\nuid=0(root) gid=0(root) groups=0(root),999(docker)\n➜  ~ systemctl start docker\n➜  ~ systemctl status docker\n~~~\n用户exit \n退出后重新登录\n\n## 查看是否安装docker\n~~~\n~ docker version\nClient: Docker Engine - Community\n Version:           19.03.4\n API version:       1.40\n Go version:        go1.12.10\n Git commit:        9013bf583a\n Built:             Fri Oct 18 15:54:09 2019\n OS/Arch:           linux/amd64\n Experimental:      false\n\nServer: Docker Engine - Community\n Engine:\n  Version:          19.03.4\n  API version:      1.40 (minimum version 1.12)\n  Go version:       go1.12.10\n  Git commit:       9013bf583a\n  Built:            Fri Oct 18 15:52:40 2019\n  OS/Arch:          linux/amd64\n  Experimental:     false\n containerd:\n  Version:          1.2.10\n  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339\n runc:\n  Version:          1.0.0-rc8+dev\n  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657\n docker-init:\n  Version:          0.18.0\n  GitCommit:        fec3683\n~~~\n\n## 运行一下hello-world\n `docker run hello-world`\n~~~\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete \nDigest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f\nStatus: Downloaded newer image for hello-world:latest\n~~~\n## 查看镜像\n~~~\n➜  ~ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nhello-world         latest              fce289e99eb9        9 months ago        1.84kB\n~~~\n","slug":"Docker学习1-Docker是什么","published":1,"updated":"2021-04-20T13:28:10.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1v000jzgl17jrwc825","content":"<h1><span id=\"docker学习01-docker安装与应用\">Docker学习01-Docker安装与应用</span></h1>\n<p>真正实现一次编译到处运行</p>\n<h2><span id=\"ubuntu-安装-docker\">Ubuntu 安装 Docker</span></h2>\n<h2><span id=\"使用-apt-安装\">使用 APT 安装</span></h2>\n<p>以下命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。</p>\n<ul>\n<li>安装必要的一些系统工具</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 GPG 证书</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/docker-ce/</span>linux<span class=\"regexp\">/ubuntu/g</span>pg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<ul>\n<li>写入软件源信息</li>\n</ul>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo<span class=\"built_in\"> add-apt-repository </span><span class=\"string\">\"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"使用脚本自动安装\">使用脚本自动安装</span></h2>\n<p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p>\n<ol>\n<li><a href=\"http://xn--get-g88d9zf64y.docker.xn--comget-docker-d40upa8719x.sh\" target=\"_blank\" rel=\"noopener\">主要从get.docker.com上下载get-docker.sh</a></li>\n<li>将get-docker.sh中的镜像换成阿里云</li>\n</ol>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">curl </span>-<span class=\"string\">fsSL </span><span class=\"string\">get.</span><span class=\"string\">docker.</span><span class=\"string\">com </span>-o <span class=\"built_in\">get-docker.sh</span></span><br><span class=\"line\"><span class=\"built_in\">#</span> 可能会出现 <span class=\"string\">404 </span>错误，请移步下面的特别说明</span><br><span class=\"line\">$ <span class=\"string\">sudo </span><span class=\"string\">sh </span><span class=\"built_in\">get-docker.sh</span> <span class=\"built_in\">--mirror</span> <span class=\"string\">Aliyun</span></span><br></pre></td></tr></table></figure>\n<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ curl -fsSL <span class=\"built_in\">get</span>.docker.<span class=\"keyword\">com</span> -<span class=\"keyword\">o</span> <span class=\"built_in\">get</span>-docker.<span class=\"keyword\">sh</span></span><br><span class=\"line\">➜  ~ sudo <span class=\"keyword\">sh</span> <span class=\"built_in\">get</span>-docker.<span class=\"keyword\">sh</span> --mirror Aliyun</span><br><span class=\"line\"># Executing docker install script, commi<span class=\"variable\">t:</span> f45d7c11389849ff46a6b4d94e0dd1ffebca32c1</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> -qq &gt;/dev/null</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> DEBIAN_FRONTEND=noninteractive apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> -qq apt-transport-https <span class=\"keyword\">ca</span>-certificates curl &gt;/dev/null</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> curl -fsSL <span class=\"string\">\"https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg\"</span> | apt-key <span class=\"built_in\">add</span> -qq - &gt;/dev/null</span><br><span class=\"line\">Warnin<span class=\"variable\">g:</span> apt-key output should not <span class=\"keyword\">be</span> parsed (stdout <span class=\"keyword\">is</span> not <span class=\"keyword\">a</span> terminal)</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> <span class=\"keyword\">echo</span> <span class=\"string\">\"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.<span class=\"keyword\">list</span></span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> -qq &gt;/dev/null</span><br><span class=\"line\">W: Target Packages (stable/binary-amd64/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Packages (stable/binary-<span class=\"keyword\">all</span>/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-en_US) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-<span class=\"keyword\">en</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-amd64) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-<span class=\"keyword\">all</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Packages (stable/binary-amd64/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Packages (stable/binary-<span class=\"keyword\">all</span>/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-en_US) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-<span class=\"keyword\">en</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-amd64) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-<span class=\"keyword\">all</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">+ [ -n  ]</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> -qq --<span class=\"keyword\">no</span>-install-recommends docker-<span class=\"keyword\">ce</span> &gt;/dev/null</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> docker <span class=\"keyword\">version</span></span><br><span class=\"line\">Clien<span class=\"variable\">t:</span> Docker Engine - Community</span><br><span class=\"line\"> Version:           <span class=\"number\">19.03</span>.<span class=\"number\">4</span></span><br><span class=\"line\"> API <span class=\"keyword\">version</span>:       <span class=\"number\">1.40</span></span><br><span class=\"line\"> Go <span class=\"keyword\">version</span>:        go1.<span class=\"number\">12.10</span></span><br><span class=\"line\"> Git commi<span class=\"variable\">t:</span>        <span class=\"number\">9013</span>bf583a</span><br><span class=\"line\"> Buil<span class=\"variable\">t:</span>             Fri Oct <span class=\"number\">18</span> <span class=\"number\">15</span>:<span class=\"number\">54</span>:<span class=\"number\">09</span> <span class=\"number\">2019</span></span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Experimenta<span class=\"variable\">l:</span>      false</span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          <span class=\"number\">19.03</span>.<span class=\"number\">4</span></span><br><span class=\"line\">  API <span class=\"keyword\">version</span>:      <span class=\"number\">1.40</span> (minimum <span class=\"keyword\">version</span> <span class=\"number\">1.12</span>)</span><br><span class=\"line\">  Go <span class=\"keyword\">version</span>:       go1.<span class=\"number\">12.10</span></span><br><span class=\"line\">  Git commi<span class=\"variable\">t:</span>       <span class=\"number\">9013</span>bf583a</span><br><span class=\"line\">  Buil<span class=\"variable\">t:</span>            Fri Oct <span class=\"number\">18</span> <span class=\"number\">15</span>:<span class=\"number\">52</span>:<span class=\"number\">40</span> <span class=\"number\">2019</span></span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimenta<span class=\"variable\">l:</span>     false</span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          <span class=\"number\">1.2</span>.<span class=\"number\">10</span></span><br><span class=\"line\">  GitCommi<span class=\"variable\">t:</span>        b34a5c8af56e510852c35414db4c1f4fa6172339</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          <span class=\"number\">1.0</span>.<span class=\"number\">0</span>-rc8+dev</span><br><span class=\"line\">  GitCommi<span class=\"variable\">t:</span>        <span class=\"number\">3</span>e425f80a8c931f88e6d94a8c831b9d5aa481657</span><br><span class=\"line\"> docker-ini<span class=\"variable\">t:</span></span><br><span class=\"line\">  Version:          <span class=\"number\">0.18</span>.<span class=\"number\">0</span></span><br><span class=\"line\">  GitCommi<span class=\"variable\">t:</span>        fec3683</span><br><span class=\"line\">If you would like <span class=\"keyword\">to</span> use Docker <span class=\"keyword\">as</span> <span class=\"keyword\">a</span> non-root user, you should now consider</span><br><span class=\"line\">adding your user <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> group with something like:</span><br><span class=\"line\"></span><br><span class=\"line\">  sudo usermod -aG docker your-user</span><br><span class=\"line\"></span><br><span class=\"line\">Remember that you will have <span class=\"keyword\">to</span> <span class=\"built_in\">log</span> out <span class=\"built_in\">and</span> back in <span class=\"keyword\">for</span> this <span class=\"keyword\">to</span> take effect!</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Adding <span class=\"keyword\">a</span> user <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> group will grant the ability <span class=\"keyword\">to</span> run</span><br><span class=\"line\">         containers which can <span class=\"keyword\">be</span> used <span class=\"keyword\">to</span> obtain root privileges <span class=\"keyword\">on</span> the</span><br><span class=\"line\">         docker host.</span><br><span class=\"line\">         Refer <span class=\"keyword\">to</span> http<span class=\"variable\">s:</span>//docs.docker.<span class=\"keyword\">com</span>/engine/security/security/#docker-daemon-attack-surface</span><br><span class=\"line\">         <span class=\"keyword\">for</span> more information.</span><br></pre></td></tr></table></figure>\n<h2><span id=\"将用户测试加入-docker-组里面\">将用户测试加入 docker 组里面</span></h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you would like to <span class=\"keyword\">use</span> Docker <span class=\"keyword\">as</span> a non-root <span class=\"keyword\">user</span>, you should <span class=\"keyword\">now</span> <span class=\"keyword\">consider</span></span><br><span class=\"line\">adding your <span class=\"keyword\">user</span> <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> <span class=\"keyword\">group</span> <span class=\"keyword\">with</span> something <span class=\"keyword\">like</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  sudo usermod -aG docker your-<span class=\"keyword\">user</span></span><br><span class=\"line\"></span><br><span class=\"line\">Remember that you will have <span class=\"keyword\">to</span> <span class=\"keyword\">log</span> <span class=\"keyword\">out</span> <span class=\"keyword\">and</span> back <span class=\"keyword\">in</span> <span class=\"keyword\">for</span> this <span class=\"keyword\">to</span> take effect!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WARNING</span>: Adding a <span class=\"keyword\">user</span> <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> <span class=\"keyword\">group</span> will <span class=\"keyword\">grant</span> the ability <span class=\"keyword\">to</span> run</span><br><span class=\"line\">         containers which can be used <span class=\"keyword\">to</span> obtain root <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> the</span><br><span class=\"line\">         docker host.</span><br><span class=\"line\">         Refer <span class=\"keyword\">to</span> https://docs.docker.com/<span class=\"keyword\">engine</span>/<span class=\"keyword\">security</span>/<span class=\"keyword\">security</span>/<span class=\"comment\">#docker-daemon-attack-surface</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">➜  ~ </span><br><span class=\"line\">➜  ~ </span><br><span class=\"line\">➜  ~ sudo usermod -aG docker root     </span><br><span class=\"line\">➜  ~ <span class=\"keyword\">id</span> root</span><br><span class=\"line\">uid=<span class=\"number\">0</span>(root) gid=<span class=\"number\">0</span>(root) <span class=\"keyword\">groups</span>=<span class=\"number\">0</span>(root),<span class=\"number\">999</span>(docker)</span><br><span class=\"line\">➜  ~ systemctl <span class=\"keyword\">start</span> docker</span><br><span class=\"line\">➜  ~ systemctl <span class=\"keyword\">status</span> docker</span><br></pre></td></tr></table></figure>\n<p>用户exit<br>\n退出后重新登录</p>\n<h2><span id=\"查看是否安装docker\">查看是否安装docker</span></h2>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">version</span></span><br><span class=\"line\"><span class=\"attr\">Client:</span> <span class=\"string\">Docker</span> <span class=\"string\">Engine</span> <span class=\"bullet\">-</span> <span class=\"string\">Community</span></span><br><span class=\"line\"> <span class=\"attr\">Version:</span>           <span class=\"number\">19.03</span><span class=\"number\">.4</span></span><br><span class=\"line\"> <span class=\"attr\">API version:</span>       <span class=\"number\">1.40</span></span><br><span class=\"line\"> <span class=\"attr\">Go version:</span>        <span class=\"string\">go1.12.10</span></span><br><span class=\"line\"> <span class=\"attr\">Git commit:</span>        <span class=\"string\">9013bf583a</span></span><br><span class=\"line\"> <span class=\"attr\">Built:</span>             <span class=\"string\">Fri</span> <span class=\"string\">Oct</span> <span class=\"number\">18</span> <span class=\"number\">15</span><span class=\"string\">:54:09</span> <span class=\"number\">2019</span></span><br><span class=\"line\"> <span class=\"attr\">OS/Arch:</span>           <span class=\"string\">linux/amd64</span></span><br><span class=\"line\"> <span class=\"attr\">Experimental:</span>      <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Server:</span> <span class=\"string\">Docker</span> <span class=\"string\">Engine</span> <span class=\"bullet\">-</span> <span class=\"string\">Community</span></span><br><span class=\"line\"> <span class=\"attr\">Engine:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">19.03</span><span class=\"number\">.4</span></span><br><span class=\"line\">  <span class=\"attr\">API version:</span>      <span class=\"number\">1.40</span> <span class=\"string\">(minimum</span> <span class=\"string\">version</span> <span class=\"number\">1.12</span><span class=\"string\">)</span></span><br><span class=\"line\">  <span class=\"attr\">Go version:</span>       <span class=\"string\">go1.12.10</span></span><br><span class=\"line\">  <span class=\"attr\">Git commit:</span>       <span class=\"string\">9013bf583a</span></span><br><span class=\"line\">  <span class=\"attr\">Built:</span>            <span class=\"string\">Fri</span> <span class=\"string\">Oct</span> <span class=\"number\">18</span> <span class=\"number\">15</span><span class=\"string\">:52:40</span> <span class=\"number\">2019</span></span><br><span class=\"line\">  <span class=\"attr\">OS/Arch:</span>          <span class=\"string\">linux/amd64</span></span><br><span class=\"line\">  <span class=\"attr\">Experimental:</span>     <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">containerd:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">1.2</span><span class=\"number\">.10</span></span><br><span class=\"line\">  <span class=\"attr\">GitCommit:</span>        <span class=\"string\">b34a5c8af56e510852c35414db4c1f4fa6172339</span></span><br><span class=\"line\"> <span class=\"attr\">runc:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">1.0</span><span class=\"number\">.0</span><span class=\"string\">-rc8+dev</span></span><br><span class=\"line\">  <span class=\"attr\">GitCommit:</span>        <span class=\"string\">3e425f80a8c931f88e6d94a8c831b9d5aa481657</span></span><br><span class=\"line\"> <span class=\"attr\">docker-init:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">0.18</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">GitCommit:</span>        <span class=\"string\">fec3683</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"运行一下hello-world\">运行一下hello-world</span></h2>\n<p><code>docker run hello-world</code></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable <span class=\"keyword\">to</span> <span class=\"keyword\">find</span> image <span class=\"string\">'hello-world:latest'</span> locally</span><br><span class=\"line\">lates<span class=\"variable\">t:</span> Pulling from library/hello-world</span><br><span class=\"line\"><span class=\"number\">1</span>b930d010525: Pull <span class=\"built_in\">complete</span> </span><br><span class=\"line\">Diges<span class=\"variable\">t:</span> <span class=\"built_in\">sha256</span>:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f</span><br><span class=\"line\">Statu<span class=\"variable\">s:</span> Downloaded newer image <span class=\"keyword\">for</span> hello-world:latest</span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看镜像\">查看镜像</span></h2>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ docker images</span><br><span class=\"line\">REPOSITORY          <span class=\"keyword\">TAG</span>                 <span class=\"title\">IMAGE</span> ID            CREATED             SIZE</span><br><span class=\"line\">hello-world         latest              fce289e99eb9        <span class=\"number\">9</span> months ago        <span class=\"number\">1.84</span>kB</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker学习01-Docker安装与应用</h1>\n<p>真正实现一次编译到处运行</p>\n<h2>Ubuntu 安装 Docker</h2>\n<h2>使用 APT 安装</h2>\n<p>以下命令会添加稳定版本的 Docker CE APT 镜像源，如果需要最新或者测试版本的 Docker CE 请将 stable 改为 edge 或者 test。从 Docker 17.06 开始，edge test 版本的 APT 镜像源也会包含稳定版本的 Docker。</p>\n<ul>\n<li>安装必要的一些系统工具</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装 GPG 证书</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/docker-ce/</span>linux<span class=\"regexp\">/ubuntu/g</span>pg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<ul>\n<li>写入软件源信息</li>\n</ul>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo<span class=\"built_in\"> add-apt-repository </span><span class=\"string\">\"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"</span></span><br></pre></td></tr></table></figure>\n<h2>使用脚本自动安装</h2>\n<p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装：</p>\n<ol>\n<li><a href=\"http://xn--get-g88d9zf64y.docker.xn--comget-docker-d40upa8719x.sh\" target=\"_blank\" rel=\"noopener\">主要从get.docker.com上下载get-docker.sh</a></li>\n<li>将get-docker.sh中的镜像换成阿里云</li>\n</ol>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"string\">curl </span>-<span class=\"string\">fsSL </span><span class=\"string\">get.</span><span class=\"string\">docker.</span><span class=\"string\">com </span>-o <span class=\"built_in\">get-docker.sh</span></span><br><span class=\"line\"><span class=\"built_in\">#</span> 可能会出现 <span class=\"string\">404 </span>错误，请移步下面的特别说明</span><br><span class=\"line\">$ <span class=\"string\">sudo </span><span class=\"string\">sh </span><span class=\"built_in\">get-docker.sh</span> <span class=\"built_in\">--mirror</span> <span class=\"string\">Aliyun</span></span><br></pre></td></tr></table></figure>\n<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ curl -fsSL <span class=\"built_in\">get</span>.docker.<span class=\"keyword\">com</span> -<span class=\"keyword\">o</span> <span class=\"built_in\">get</span>-docker.<span class=\"keyword\">sh</span></span><br><span class=\"line\">➜  ~ sudo <span class=\"keyword\">sh</span> <span class=\"built_in\">get</span>-docker.<span class=\"keyword\">sh</span> --mirror Aliyun</span><br><span class=\"line\"># Executing docker install script, commi<span class=\"variable\">t:</span> f45d7c11389849ff46a6b4d94e0dd1ffebca32c1</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> -qq &gt;/dev/null</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> DEBIAN_FRONTEND=noninteractive apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> -qq apt-transport-https <span class=\"keyword\">ca</span>-certificates curl &gt;/dev/null</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> curl -fsSL <span class=\"string\">\"https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg\"</span> | apt-key <span class=\"built_in\">add</span> -qq - &gt;/dev/null</span><br><span class=\"line\">Warnin<span class=\"variable\">g:</span> apt-key output should not <span class=\"keyword\">be</span> parsed (stdout <span class=\"keyword\">is</span> not <span class=\"keyword\">a</span> terminal)</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> <span class=\"keyword\">echo</span> <span class=\"string\">\"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu bionic stable\"</span> &gt; /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.<span class=\"keyword\">list</span></span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span> -qq &gt;/dev/null</span><br><span class=\"line\">W: Target Packages (stable/binary-amd64/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Packages (stable/binary-<span class=\"keyword\">all</span>/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-en_US) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-<span class=\"keyword\">en</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-amd64) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-<span class=\"keyword\">all</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Packages (stable/binary-amd64/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Packages (stable/binary-<span class=\"keyword\">all</span>/Packages) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-en_US) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target Translations (stable/i18n/Translation-<span class=\"keyword\">en</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-amd64) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">W: Target CNF (stable/<span class=\"keyword\">cnf</span>/Commands-<span class=\"keyword\">all</span>) <span class=\"keyword\">is</span> configured multiple times in /etc/apt/sources.lis<span class=\"variable\">t:49</span> <span class=\"built_in\">and</span> /etc/apt/sources.<span class=\"keyword\">list</span>.d/docker.lis<span class=\"variable\">t:1</span></span><br><span class=\"line\">+ [ -n  ]</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> apt-<span class=\"built_in\">get</span> install -<span class=\"keyword\">y</span> -qq --<span class=\"keyword\">no</span>-install-recommends docker-<span class=\"keyword\">ce</span> &gt;/dev/null</span><br><span class=\"line\">+ <span class=\"keyword\">sh</span> -<span class=\"keyword\">c</span> docker <span class=\"keyword\">version</span></span><br><span class=\"line\">Clien<span class=\"variable\">t:</span> Docker Engine - Community</span><br><span class=\"line\"> Version:           <span class=\"number\">19.03</span>.<span class=\"number\">4</span></span><br><span class=\"line\"> API <span class=\"keyword\">version</span>:       <span class=\"number\">1.40</span></span><br><span class=\"line\"> Go <span class=\"keyword\">version</span>:        go1.<span class=\"number\">12.10</span></span><br><span class=\"line\"> Git commi<span class=\"variable\">t:</span>        <span class=\"number\">9013</span>bf583a</span><br><span class=\"line\"> Buil<span class=\"variable\">t:</span>             Fri Oct <span class=\"number\">18</span> <span class=\"number\">15</span>:<span class=\"number\">54</span>:<span class=\"number\">09</span> <span class=\"number\">2019</span></span><br><span class=\"line\"> OS/Arch:           linux/amd64</span><br><span class=\"line\"> Experimenta<span class=\"variable\">l:</span>      false</span><br><span class=\"line\"></span><br><span class=\"line\">Server: Docker Engine - Community</span><br><span class=\"line\"> Engine:</span><br><span class=\"line\">  Version:          <span class=\"number\">19.03</span>.<span class=\"number\">4</span></span><br><span class=\"line\">  API <span class=\"keyword\">version</span>:      <span class=\"number\">1.40</span> (minimum <span class=\"keyword\">version</span> <span class=\"number\">1.12</span>)</span><br><span class=\"line\">  Go <span class=\"keyword\">version</span>:       go1.<span class=\"number\">12.10</span></span><br><span class=\"line\">  Git commi<span class=\"variable\">t:</span>       <span class=\"number\">9013</span>bf583a</span><br><span class=\"line\">  Buil<span class=\"variable\">t:</span>            Fri Oct <span class=\"number\">18</span> <span class=\"number\">15</span>:<span class=\"number\">52</span>:<span class=\"number\">40</span> <span class=\"number\">2019</span></span><br><span class=\"line\">  OS/Arch:          linux/amd64</span><br><span class=\"line\">  Experimenta<span class=\"variable\">l:</span>     false</span><br><span class=\"line\"> containerd:</span><br><span class=\"line\">  Version:          <span class=\"number\">1.2</span>.<span class=\"number\">10</span></span><br><span class=\"line\">  GitCommi<span class=\"variable\">t:</span>        b34a5c8af56e510852c35414db4c1f4fa6172339</span><br><span class=\"line\"> runc:</span><br><span class=\"line\">  Version:          <span class=\"number\">1.0</span>.<span class=\"number\">0</span>-rc8+dev</span><br><span class=\"line\">  GitCommi<span class=\"variable\">t:</span>        <span class=\"number\">3</span>e425f80a8c931f88e6d94a8c831b9d5aa481657</span><br><span class=\"line\"> docker-ini<span class=\"variable\">t:</span></span><br><span class=\"line\">  Version:          <span class=\"number\">0.18</span>.<span class=\"number\">0</span></span><br><span class=\"line\">  GitCommi<span class=\"variable\">t:</span>        fec3683</span><br><span class=\"line\">If you would like <span class=\"keyword\">to</span> use Docker <span class=\"keyword\">as</span> <span class=\"keyword\">a</span> non-root user, you should now consider</span><br><span class=\"line\">adding your user <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> group with something like:</span><br><span class=\"line\"></span><br><span class=\"line\">  sudo usermod -aG docker your-user</span><br><span class=\"line\"></span><br><span class=\"line\">Remember that you will have <span class=\"keyword\">to</span> <span class=\"built_in\">log</span> out <span class=\"built_in\">and</span> back in <span class=\"keyword\">for</span> this <span class=\"keyword\">to</span> take effect!</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Adding <span class=\"keyword\">a</span> user <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> group will grant the ability <span class=\"keyword\">to</span> run</span><br><span class=\"line\">         containers which can <span class=\"keyword\">be</span> used <span class=\"keyword\">to</span> obtain root privileges <span class=\"keyword\">on</span> the</span><br><span class=\"line\">         docker host.</span><br><span class=\"line\">         Refer <span class=\"keyword\">to</span> http<span class=\"variable\">s:</span>//docs.docker.<span class=\"keyword\">com</span>/engine/security/security/#docker-daemon-attack-surface</span><br><span class=\"line\">         <span class=\"keyword\">for</span> more information.</span><br></pre></td></tr></table></figure>\n<h2>将用户测试加入 docker 组里面</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you would like to <span class=\"keyword\">use</span> Docker <span class=\"keyword\">as</span> a non-root <span class=\"keyword\">user</span>, you should <span class=\"keyword\">now</span> <span class=\"keyword\">consider</span></span><br><span class=\"line\">adding your <span class=\"keyword\">user</span> <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> <span class=\"keyword\">group</span> <span class=\"keyword\">with</span> something <span class=\"keyword\">like</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  sudo usermod -aG docker your-<span class=\"keyword\">user</span></span><br><span class=\"line\"></span><br><span class=\"line\">Remember that you will have <span class=\"keyword\">to</span> <span class=\"keyword\">log</span> <span class=\"keyword\">out</span> <span class=\"keyword\">and</span> back <span class=\"keyword\">in</span> <span class=\"keyword\">for</span> this <span class=\"keyword\">to</span> take effect!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WARNING</span>: Adding a <span class=\"keyword\">user</span> <span class=\"keyword\">to</span> the <span class=\"string\">\"docker\"</span> <span class=\"keyword\">group</span> will <span class=\"keyword\">grant</span> the ability <span class=\"keyword\">to</span> run</span><br><span class=\"line\">         containers which can be used <span class=\"keyword\">to</span> obtain root <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> the</span><br><span class=\"line\">         docker host.</span><br><span class=\"line\">         Refer <span class=\"keyword\">to</span> https://docs.docker.com/<span class=\"keyword\">engine</span>/<span class=\"keyword\">security</span>/<span class=\"keyword\">security</span>/<span class=\"comment\">#docker-daemon-attack-surface</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> more information.</span><br><span class=\"line\">➜  ~ </span><br><span class=\"line\">➜  ~ </span><br><span class=\"line\">➜  ~ sudo usermod -aG docker root     </span><br><span class=\"line\">➜  ~ <span class=\"keyword\">id</span> root</span><br><span class=\"line\">uid=<span class=\"number\">0</span>(root) gid=<span class=\"number\">0</span>(root) <span class=\"keyword\">groups</span>=<span class=\"number\">0</span>(root),<span class=\"number\">999</span>(docker)</span><br><span class=\"line\">➜  ~ systemctl <span class=\"keyword\">start</span> docker</span><br><span class=\"line\">➜  ~ systemctl <span class=\"keyword\">status</span> docker</span><br></pre></td></tr></table></figure>\n<p>用户exit<br>\n退出后重新登录</p>\n<h2>查看是否安装docker</h2>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">~</span> <span class=\"string\">docker</span> <span class=\"string\">version</span></span><br><span class=\"line\"><span class=\"attr\">Client:</span> <span class=\"string\">Docker</span> <span class=\"string\">Engine</span> <span class=\"bullet\">-</span> <span class=\"string\">Community</span></span><br><span class=\"line\"> <span class=\"attr\">Version:</span>           <span class=\"number\">19.03</span><span class=\"number\">.4</span></span><br><span class=\"line\"> <span class=\"attr\">API version:</span>       <span class=\"number\">1.40</span></span><br><span class=\"line\"> <span class=\"attr\">Go version:</span>        <span class=\"string\">go1.12.10</span></span><br><span class=\"line\"> <span class=\"attr\">Git commit:</span>        <span class=\"string\">9013bf583a</span></span><br><span class=\"line\"> <span class=\"attr\">Built:</span>             <span class=\"string\">Fri</span> <span class=\"string\">Oct</span> <span class=\"number\">18</span> <span class=\"number\">15</span><span class=\"string\">:54:09</span> <span class=\"number\">2019</span></span><br><span class=\"line\"> <span class=\"attr\">OS/Arch:</span>           <span class=\"string\">linux/amd64</span></span><br><span class=\"line\"> <span class=\"attr\">Experimental:</span>      <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">Server:</span> <span class=\"string\">Docker</span> <span class=\"string\">Engine</span> <span class=\"bullet\">-</span> <span class=\"string\">Community</span></span><br><span class=\"line\"> <span class=\"attr\">Engine:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">19.03</span><span class=\"number\">.4</span></span><br><span class=\"line\">  <span class=\"attr\">API version:</span>      <span class=\"number\">1.40</span> <span class=\"string\">(minimum</span> <span class=\"string\">version</span> <span class=\"number\">1.12</span><span class=\"string\">)</span></span><br><span class=\"line\">  <span class=\"attr\">Go version:</span>       <span class=\"string\">go1.12.10</span></span><br><span class=\"line\">  <span class=\"attr\">Git commit:</span>       <span class=\"string\">9013bf583a</span></span><br><span class=\"line\">  <span class=\"attr\">Built:</span>            <span class=\"string\">Fri</span> <span class=\"string\">Oct</span> <span class=\"number\">18</span> <span class=\"number\">15</span><span class=\"string\">:52:40</span> <span class=\"number\">2019</span></span><br><span class=\"line\">  <span class=\"attr\">OS/Arch:</span>          <span class=\"string\">linux/amd64</span></span><br><span class=\"line\">  <span class=\"attr\">Experimental:</span>     <span class=\"literal\">false</span></span><br><span class=\"line\"> <span class=\"attr\">containerd:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">1.2</span><span class=\"number\">.10</span></span><br><span class=\"line\">  <span class=\"attr\">GitCommit:</span>        <span class=\"string\">b34a5c8af56e510852c35414db4c1f4fa6172339</span></span><br><span class=\"line\"> <span class=\"attr\">runc:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">1.0</span><span class=\"number\">.0</span><span class=\"string\">-rc8+dev</span></span><br><span class=\"line\">  <span class=\"attr\">GitCommit:</span>        <span class=\"string\">3e425f80a8c931f88e6d94a8c831b9d5aa481657</span></span><br><span class=\"line\"> <span class=\"attr\">docker-init:</span></span><br><span class=\"line\">  <span class=\"attr\">Version:</span>          <span class=\"number\">0.18</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">GitCommit:</span>        <span class=\"string\">fec3683</span></span><br></pre></td></tr></table></figure>\n<h2>运行一下hello-world</h2>\n<p><code>docker run hello-world</code></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unable <span class=\"keyword\">to</span> <span class=\"keyword\">find</span> image <span class=\"string\">'hello-world:latest'</span> locally</span><br><span class=\"line\">lates<span class=\"variable\">t:</span> Pulling from library/hello-world</span><br><span class=\"line\"><span class=\"number\">1</span>b930d010525: Pull <span class=\"built_in\">complete</span> </span><br><span class=\"line\">Diges<span class=\"variable\">t:</span> <span class=\"built_in\">sha256</span>:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f</span><br><span class=\"line\">Statu<span class=\"variable\">s:</span> Downloaded newer image <span class=\"keyword\">for</span> hello-world:latest</span><br></pre></td></tr></table></figure>\n<h2>查看镜像</h2>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ docker images</span><br><span class=\"line\">REPOSITORY          <span class=\"keyword\">TAG</span>                 <span class=\"title\">IMAGE</span> ID            CREATED             SIZE</span><br><span class=\"line\">hello-world         latest              fce289e99eb9        <span class=\"number\">9</span> months ago        <span class=\"number\">1.84</span>kB</span><br></pre></td></tr></table></figure>\n"},{"title":"Docker学习15-Docker-Compose-模板文件","catalog":true,"date":"2019-09-29T05:20:52.000Z","subtitle":null,"header-img":null,"_content":"# Docker-Compose-模板文件\n模板文件是使用 Compose 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。\n\n默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。\n~~~\nversion: \"3\"\n\nservices:\n  webapp:\n    image: examples/web\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/data\"\n~~~\n注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）等来自动构建生成镜像。\n\n如果使用 build 指令，在 Dockerfile 中设置的选项 (例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设置。\n\n下面分别介绍各个指令的用法。\n\n#build\n指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。\n~~~\nversion: '3'\nservices:\n\n  webapp:\n    build: ./dir\n~~~\n你也可以使用 context 指令指定 Dockerfile 所在文件夹的路径。\n\n使用 dockerfile 指令指定 Dockerfile 文件名。\n\n使用 arg 指令指定构建镜像时的变量。\n~~~\nversion: '3'\nservices:\n\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n~~~\n使用 cache_from 指定构建镜像的缓存\n~~~\nbuild:\n  context: .\n  cache_from:\n    - alpine:latest\n    - corp/web_app:3.14\n#cap_add, cap_drop\n~~~\n指定容器的内核能力（capacity）分配。\n\n例如，让容器拥有所有能力可以指定为：\n\ncap_add:\n  - ALL\n去掉 NET_ADMIN 能力可以指定为：\n\ncap_drop:\n  - NET_ADMIN\n#command\n覆盖容器启动后默认执行的命令。\n\ncommand: echo \"hello world\"\n#configs\n仅用于 Swarm mode\n\n#cgroup_parent\n指定父 cgroup 组，意味着将继承该组的资源限制。\n\n例如，创建了一个 cgroup 组名称为 cgroups_1。\n\ncgroup_parent: cgroups_1\n#container_name\n指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。\n\ncontainer_name: docker-web-container\n注意：指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。\n\n#deploy\n仅用于 Swarm mode\n\n#devices\n指定设备映射关系。\n\ndevices:\n  - \"/dev/ttyUSB1:/dev/ttyUSB0\"\n#depends_on\n解决容器的依赖、启动先后的问题。以下例子中会先启动 redis db 再启动 web\n\nversion: '3'\n\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n\n  redis:\n    image: redis\n\n  db:\n    image: postgres\n注意：web 服务不会等待 redis db 「完全启动」之后才启动。\n\n#dns\n自定义 DNS 服务器。可以是一个值，也可以是一个列表。\n\ndns: 8.8.8.8\n\ndns:\n  - 8.8.8.8\n  - 114.114.114.114\n#dns_search\n配置 DNS 搜索域。可以是一个值，也可以是一个列表。\n\ndns_search: example.com\n\ndns_search:\n  - domain1.example.com\n  - domain2.example.com\n#tmpfs\n挂载一个 tmpfs 文件系统到容器。\n\ntmpfs: /run\ntmpfs:\n  - /run\n  - /tmp\n#env_file\n从文件中获取环境变量，可以为单独的文件路径或列表。\n\n如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。\n\n如果有变量名称与 environment 指令冲突，则按照惯例，以后者为准。\n\nenv_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n环境变量文件中每一行必须符合格式，支持 # 开头的注释行。\n\n# common.env: Set development environment\nPROG_ENV=development\n#environment\n设置环境变量。你可以使用数组或字典两种格式。\n\n只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。\n\nenvironment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - RACK_ENV=development\n  - SESSION_SECRET\n如果变量名称或者值中用到 true|false，yes|no 等表达 布尔 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括\n\ny|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF\n#expose\n暴露端口，但不映射到宿主机，只被连接的服务访问。\n\n仅可以指定内部端口为参数\n\nexpose:\n - \"3000\"\n - \"8000\"\n#external_links\n注意：不建议使用该指令。\n\n链接到 docker-compose.yml 外部的容器，甚至并非 Compose 管理的外部容器。\n\nexternal_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql\n#extra_hosts\n类似 Docker 中的 --add-host 参数，指定额外的 host 名称映射信息。\n\nextra_hosts:\n - \"googledns:8.8.8.8\"\n - \"dockerhub:52.1.157.61\"\n会在启动后的服务容器中 /etc/hosts 文件中添加如下两条条目。\n\n8.8.8.8 googledns\n52.1.157.61 dockerhub\n#healthcheck\n通过命令检查容器是否健康运行。\n\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n  interval: 1m30s\n  timeout: 10s\n  retries: 3\n#image\n指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。\n\nimage: ubuntu\nimage: orchardup/postgresql\nimage: a4bc65fd\n#labels\n为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。\n\nlabels:\n  com.startupteam.description: \"webapp for a startup team\"\n  com.startupteam.department: \"devops department\"\n  com.startupteam.release: \"rc3 for v1.0\"\n#links\n注意：不推荐使用该指令。\n\n#logging\n配置日志选项。\n\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n目前支持三种日志驱动类型。\n\ndriver: \"json-file\"\ndriver: \"syslog\"\ndriver: \"none\"\noptions 配置日志驱动的相关参数。\n\noptions:\n  max-size: \"200k\"\n  max-file: \"10\"\n#network_mode\n设置网络模式。使用和 docker run 的 --network 参数一样的值。\n\nnetwork_mode: \"bridge\"\nnetwork_mode: \"host\"\nnetwork_mode: \"none\"\nnetwork_mode: \"service:[service name]\"\nnetwork_mode: \"container:[container name/id]\"\n#networks\n配置容器连接的网络。\n\nversion: \"3\"\nservices:\n\n  some-service:\n    networks:\n     - some-network\n     - other-network\n\nnetworks:\n  some-network:\n  other-network:\n#pid\n跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。\n\npid: \"host\"\n#ports\n暴露端口信息。\n\n使用宿主端口：容器端口 (HOST:CONTAINER) 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\n\nports:\n - \"3000\"\n - \"8000:8000\"\n - \"49100:22\"\n - \"127.0.0.1:8001:8001\"\n注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。\n\n#secrets\n存储敏感数据，例如 mysql 服务密码。\n\nversion: \"3.1\"\nservices:\n\nmysql:\n  image: mysql\n  environment:\n    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password\n  secrets:\n    - db_root_password\n    - my_other_secret\n\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n  my_other_secret:\n    external: true\n#security_opt\n指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。\n\nsecurity_opt:\n    - label:user:USER\n    - label:role:ROLE\n#stop_signal\n设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。\n\nstop_signal: SIGUSR1\n#sysctls\n配置容器内核参数。\n\nsysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n#ulimits\n指定容器的 ulimits 限制值。\n\n例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。\n\n  ulimits:\n    nproc: 65535\n    nofile:\n      soft: 20000\n      hard: 40000\n#volumes\n数据卷所挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。\n\n该指令中路径支持相对路径。\n\nvolumes:\n - /var/lib/mysql\n - cache/:/tmp/cache\n - ~/configs:/etc/configs/:ro\n#其它指令\n此外，还有包括 domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir 等指令，基本跟 docker run 中对应参数的功能一致。\n\n指定服务容器启动后执行的入口文件。\n\nentrypoint: /code/entrypoint.sh\n指定容器中运行应用的用户名。\n\nuser: nginx\n指定容器中工作目录。\n\nworking_dir: /code\n指定容器中搜索域名、主机名、mac 地址等。\n\ndomainname: your_website.com\nhostname: test\nmac_address: 08-00-27-00-0C-0A\n允许容器中运行一些特权命令。\n\nprivileged: true\n指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped。\n\nrestart: always\n以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。\n\nread_only: true\n打开标准输入，可以接受外部输入。\n\nstdin_open: true\n模拟一个伪终端。\n\ntty: true\n#读取变量\nCompose 模板文件支持动态读取主机的系统环境变量和当前目录下的 .env 文件中的变量。\n\n例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION} 的值，并写入执行的指令中。\n\nversion: \"3\"\nservices:\n\ndb:\n  image: \"mongo:${MONGO_VERSION}\"\n如果执行 MONGO_VERSION=3.2 docker-compose up 则会启动一个 mongo:3.2 镜像的容器；如果执行 MONGO_VERSION=2.8 docker-compose up 则会启动一个 mongo:2.8 镜像的容器。\n\n若当前目录存在 .env 文件，执行 docker-compose 命令时将从该文件中读取变量。\n\n在当前目录新建 .env 文件并写入以下内容。\n\n# 支持 # 号注释\nMONGO_VERSION=3.6\n执行 docker-compose up 则会启动一个 mongo:3.6 镜像的容器。\n","source":"_posts/Docker学习15-Docker-Compose-模板文件.md","raw":"---\ntitle: \"Docker学习15-Docker-Compose-模板文件\"\ncatalog: true\ntags: [Docker, Docker Compose]\ndate: 2019-09-29 13:20:52\nsubtitle:\nheader-img:\n---\n# Docker-Compose-模板文件\n模板文件是使用 Compose 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。\n\n默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。\n~~~\nversion: \"3\"\n\nservices:\n  webapp:\n    image: examples/web\n    ports:\n      - \"80:80\"\n    volumes:\n      - \"/data\"\n~~~\n注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）等来自动构建生成镜像。\n\n如果使用 build 指令，在 Dockerfile 中设置的选项 (例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设置。\n\n下面分别介绍各个指令的用法。\n\n#build\n指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。\n~~~\nversion: '3'\nservices:\n\n  webapp:\n    build: ./dir\n~~~\n你也可以使用 context 指令指定 Dockerfile 所在文件夹的路径。\n\n使用 dockerfile 指令指定 Dockerfile 文件名。\n\n使用 arg 指令指定构建镜像时的变量。\n~~~\nversion: '3'\nservices:\n\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n~~~\n使用 cache_from 指定构建镜像的缓存\n~~~\nbuild:\n  context: .\n  cache_from:\n    - alpine:latest\n    - corp/web_app:3.14\n#cap_add, cap_drop\n~~~\n指定容器的内核能力（capacity）分配。\n\n例如，让容器拥有所有能力可以指定为：\n\ncap_add:\n  - ALL\n去掉 NET_ADMIN 能力可以指定为：\n\ncap_drop:\n  - NET_ADMIN\n#command\n覆盖容器启动后默认执行的命令。\n\ncommand: echo \"hello world\"\n#configs\n仅用于 Swarm mode\n\n#cgroup_parent\n指定父 cgroup 组，意味着将继承该组的资源限制。\n\n例如，创建了一个 cgroup 组名称为 cgroups_1。\n\ncgroup_parent: cgroups_1\n#container_name\n指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。\n\ncontainer_name: docker-web-container\n注意：指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。\n\n#deploy\n仅用于 Swarm mode\n\n#devices\n指定设备映射关系。\n\ndevices:\n  - \"/dev/ttyUSB1:/dev/ttyUSB0\"\n#depends_on\n解决容器的依赖、启动先后的问题。以下例子中会先启动 redis db 再启动 web\n\nversion: '3'\n\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n\n  redis:\n    image: redis\n\n  db:\n    image: postgres\n注意：web 服务不会等待 redis db 「完全启动」之后才启动。\n\n#dns\n自定义 DNS 服务器。可以是一个值，也可以是一个列表。\n\ndns: 8.8.8.8\n\ndns:\n  - 8.8.8.8\n  - 114.114.114.114\n#dns_search\n配置 DNS 搜索域。可以是一个值，也可以是一个列表。\n\ndns_search: example.com\n\ndns_search:\n  - domain1.example.com\n  - domain2.example.com\n#tmpfs\n挂载一个 tmpfs 文件系统到容器。\n\ntmpfs: /run\ntmpfs:\n  - /run\n  - /tmp\n#env_file\n从文件中获取环境变量，可以为单独的文件路径或列表。\n\n如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。\n\n如果有变量名称与 environment 指令冲突，则按照惯例，以后者为准。\n\nenv_file: .env\n\nenv_file:\n  - ./common.env\n  - ./apps/web.env\n  - /opt/secrets.env\n环境变量文件中每一行必须符合格式，支持 # 开头的注释行。\n\n# common.env: Set development environment\nPROG_ENV=development\n#environment\n设置环境变量。你可以使用数组或字典两种格式。\n\n只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。\n\nenvironment:\n  RACK_ENV: development\n  SESSION_SECRET:\n\nenvironment:\n  - RACK_ENV=development\n  - SESSION_SECRET\n如果变量名称或者值中用到 true|false，yes|no 等表达 布尔 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括\n\ny|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF\n#expose\n暴露端口，但不映射到宿主机，只被连接的服务访问。\n\n仅可以指定内部端口为参数\n\nexpose:\n - \"3000\"\n - \"8000\"\n#external_links\n注意：不建议使用该指令。\n\n链接到 docker-compose.yml 外部的容器，甚至并非 Compose 管理的外部容器。\n\nexternal_links:\n - redis_1\n - project_db_1:mysql\n - project_db_1:postgresql\n#extra_hosts\n类似 Docker 中的 --add-host 参数，指定额外的 host 名称映射信息。\n\nextra_hosts:\n - \"googledns:8.8.8.8\"\n - \"dockerhub:52.1.157.61\"\n会在启动后的服务容器中 /etc/hosts 文件中添加如下两条条目。\n\n8.8.8.8 googledns\n52.1.157.61 dockerhub\n#healthcheck\n通过命令检查容器是否健康运行。\n\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n  interval: 1m30s\n  timeout: 10s\n  retries: 3\n#image\n指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。\n\nimage: ubuntu\nimage: orchardup/postgresql\nimage: a4bc65fd\n#labels\n为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。\n\nlabels:\n  com.startupteam.description: \"webapp for a startup team\"\n  com.startupteam.department: \"devops department\"\n  com.startupteam.release: \"rc3 for v1.0\"\n#links\n注意：不推荐使用该指令。\n\n#logging\n配置日志选项。\n\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n目前支持三种日志驱动类型。\n\ndriver: \"json-file\"\ndriver: \"syslog\"\ndriver: \"none\"\noptions 配置日志驱动的相关参数。\n\noptions:\n  max-size: \"200k\"\n  max-file: \"10\"\n#network_mode\n设置网络模式。使用和 docker run 的 --network 参数一样的值。\n\nnetwork_mode: \"bridge\"\nnetwork_mode: \"host\"\nnetwork_mode: \"none\"\nnetwork_mode: \"service:[service name]\"\nnetwork_mode: \"container:[container name/id]\"\n#networks\n配置容器连接的网络。\n\nversion: \"3\"\nservices:\n\n  some-service:\n    networks:\n     - some-network\n     - other-network\n\nnetworks:\n  some-network:\n  other-network:\n#pid\n跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。\n\npid: \"host\"\n#ports\n暴露端口信息。\n\n使用宿主端口：容器端口 (HOST:CONTAINER) 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\n\nports:\n - \"3000\"\n - \"8000:8000\"\n - \"49100:22\"\n - \"127.0.0.1:8001:8001\"\n注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。\n\n#secrets\n存储敏感数据，例如 mysql 服务密码。\n\nversion: \"3.1\"\nservices:\n\nmysql:\n  image: mysql\n  environment:\n    MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password\n  secrets:\n    - db_root_password\n    - my_other_secret\n\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n  my_other_secret:\n    external: true\n#security_opt\n指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。\n\nsecurity_opt:\n    - label:user:USER\n    - label:role:ROLE\n#stop_signal\n设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。\n\nstop_signal: SIGUSR1\n#sysctls\n配置容器内核参数。\n\nsysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n#ulimits\n指定容器的 ulimits 限制值。\n\n例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。\n\n  ulimits:\n    nproc: 65535\n    nofile:\n      soft: 20000\n      hard: 40000\n#volumes\n数据卷所挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。\n\n该指令中路径支持相对路径。\n\nvolumes:\n - /var/lib/mysql\n - cache/:/tmp/cache\n - ~/configs:/etc/configs/:ro\n#其它指令\n此外，还有包括 domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir 等指令，基本跟 docker run 中对应参数的功能一致。\n\n指定服务容器启动后执行的入口文件。\n\nentrypoint: /code/entrypoint.sh\n指定容器中运行应用的用户名。\n\nuser: nginx\n指定容器中工作目录。\n\nworking_dir: /code\n指定容器中搜索域名、主机名、mac 地址等。\n\ndomainname: your_website.com\nhostname: test\nmac_address: 08-00-27-00-0C-0A\n允许容器中运行一些特权命令。\n\nprivileged: true\n指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped。\n\nrestart: always\n以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。\n\nread_only: true\n打开标准输入，可以接受外部输入。\n\nstdin_open: true\n模拟一个伪终端。\n\ntty: true\n#读取变量\nCompose 模板文件支持动态读取主机的系统环境变量和当前目录下的 .env 文件中的变量。\n\n例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION} 的值，并写入执行的指令中。\n\nversion: \"3\"\nservices:\n\ndb:\n  image: \"mongo:${MONGO_VERSION}\"\n如果执行 MONGO_VERSION=3.2 docker-compose up 则会启动一个 mongo:3.2 镜像的容器；如果执行 MONGO_VERSION=2.8 docker-compose up 则会启动一个 mongo:2.8 镜像的容器。\n\n若当前目录存在 .env 文件，执行 docker-compose 命令时将从该文件中读取变量。\n\n在当前目录新建 .env 文件并写入以下内容。\n\n# 支持 # 号注释\nMONGO_VERSION=3.6\n执行 docker-compose up 则会启动一个 mongo:3.6 镜像的容器。\n","slug":"Docker学习15-Docker-Compose-模板文件","published":1,"updated":"2021-04-20T13:28:10.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1w000kzgl1yumtl9gw","content":"<h1><span id=\"docker-compose-模板文件\">Docker-Compose-模板文件</span></h1>\n<p>模板文件是使用 Compose 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。</p>\n<p>默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  webapp:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> examples/web</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span></span><br><span class=\"line\">      - <span class=\"string\">\"/data\"</span></span><br></pre></td></tr></table></figure>\n<p>注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）等来自动构建生成镜像。</p>\n<p>如果使用 build 指令，在 Dockerfile 中设置的选项 (例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设置。</p>\n<p>下面分别介绍各个指令的用法。</p>\n<p>#build<br>\n指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">  webapp:</span></span><br><span class=\"line\"><span class=\"symbol\">    build:</span> ./dir</span><br></pre></td></tr></table></figure>\n<p>你也可以使用 context 指令指定 Dockerfile 所在文件夹的路径。</p>\n<p>使用 dockerfile 指令指定 Dockerfile 文件名。</p>\n<p>使用 arg 指令指定构建镜像时的变量。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">  webapp:</span></span><br><span class=\"line\"><span class=\"symbol\">    build:</span></span><br><span class=\"line\"><span class=\"symbol\">      context:</span> ./dir</span><br><span class=\"line\"><span class=\"symbol\">      dockerfile:</span> Dockerfile-alternate</span><br><span class=\"line\"><span class=\"symbol\">      args:</span></span><br><span class=\"line\"><span class=\"symbol\">        buildno:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>使用 cache_from 指定构建镜像的缓存</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">build</span>:</span><br><span class=\"line\">  <span class=\"attribute\">context</span>: .</span><br><span class=\"line\">  <span class=\"attribute\">cache_from</span>:</span><br><span class=\"line\">    - <span class=\"attribute\">alpine</span>:latest</span><br><span class=\"line\">    - corp/<span class=\"attribute\">web_app</span>:<span class=\"number\">3.14</span></span><br><span class=\"line\">#cap_add, cap_drop</span><br></pre></td></tr></table></figure>\n<p>指定容器的内核能力（capacity）分配。</p>\n<p>例如，让容器拥有所有能力可以指定为：</p>\n<p>cap_add:</p>\n<ul>\n<li>ALL<br>\n去掉 NET_ADMIN 能力可以指定为：</li>\n</ul>\n<p>cap_drop:</p>\n<ul>\n<li>NET_ADMIN<br>\n#command<br>\n覆盖容器启动后默认执行的命令。</li>\n</ul>\n<p>command: echo “hello world”<br>\n#configs<br>\n仅用于 Swarm mode</p>\n<p>#cgroup_parent<br>\n指定父 cgroup 组，意味着将继承该组的资源限制。</p>\n<p>例如，创建了一个 cgroup 组名称为 cgroups_1。</p>\n<p>cgroup_parent: cgroups_1<br>\n#container_name<br>\n指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。</p>\n<p>container_name: docker-web-container<br>\n注意：指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>\n<p>#deploy<br>\n仅用于 Swarm mode</p>\n<p>#devices<br>\n指定设备映射关系。</p>\n<p>devices:</p>\n<ul>\n<li>“/dev/ttyUSB1:/dev/ttyUSB0”<br>\n#depends_on<br>\n解决容器的依赖、启动先后的问题。以下例子中会先启动 redis db 再启动 web</li>\n</ul>\n<p>version: ‘3’</p>\n<p>services:<br>\nweb:<br>\nbuild: .<br>\ndepends_on:<br>\n- db<br>\n- redis</p>\n<p>redis:<br>\nimage: redis</p>\n<p>db:<br>\nimage: postgres<br>\n注意：web 服务不会等待 redis db 「完全启动」之后才启动。</p>\n<p>#dns<br>\n自定义 DNS 服务器。可以是一个值，也可以是一个列表。</p>\n<p>dns: 8.8.8.8</p>\n<p>dns:</p>\n<ul>\n<li>8.8.8.8</li>\n<li>114.114.114.114<br>\n#dns_search<br>\n配置 DNS 搜索域。可以是一个值，也可以是一个列表。</li>\n</ul>\n<p>dns_search: <a href=\"http://example.com\" target=\"_blank\" rel=\"noopener\">example.com</a></p>\n<p>dns_search:</p>\n<ul>\n<li><a href=\"http://domain1.example.com\" target=\"_blank\" rel=\"noopener\">domain1.example.com</a></li>\n<li><a href=\"http://domain2.example.com\" target=\"_blank\" rel=\"noopener\">domain2.example.com</a><br>\n#tmpfs<br>\n挂载一个 tmpfs 文件系统到容器。</li>\n</ul>\n<p>tmpfs: /run<br>\ntmpfs:</p>\n<ul>\n<li>/run</li>\n<li>/tmp<br>\n#env_file<br>\n从文件中获取环境变量，可以为单独的文件路径或列表。</li>\n</ul>\n<p>如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。</p>\n<p>如果有变量名称与 environment 指令冲突，则按照惯例，以后者为准。</p>\n<p>env_file: .env</p>\n<p>env_file:</p>\n<ul>\n<li>./common.env</li>\n<li>./apps/web.env</li>\n<li>/opt/secrets.env<br>\n环境变量文件中每一行必须符合格式，支持 # 开头的注释行。</li>\n</ul>\n<h1><span id=\"commonenv-set-development-environment\">common.env: Set development environment</span></h1>\n<p>PROG_ENV=development<br>\n#environment<br>\n设置环境变量。你可以使用数组或字典两种格式。</p>\n<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>\n<p>environment:<br>\nRACK_ENV: development<br>\nSESSION_SECRET:</p>\n<p>environment:</p>\n<ul>\n<li>RACK_ENV=development</li>\n<li>SESSION_SECRET<br>\n如果变量名称或者值中用到 true|false，yes|no 等表达 布尔 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</li>\n</ul>\n<p>y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF<br>\n#expose<br>\n暴露端口，但不映射到宿主机，只被连接的服务访问。</p>\n<p>仅可以指定内部端口为参数</p>\n<p>expose:</p>\n<ul>\n<li>“3000”</li>\n<li>“8000”<br>\n#external_links<br>\n注意：不建议使用该指令。</li>\n</ul>\n<p>链接到 docker-compose.yml 外部的容器，甚至并非 Compose 管理的外部容器。</p>\n<p>external_links:</p>\n<ul>\n<li>redis_1</li>\n<li>project_db_1:mysql</li>\n<li>project_db_1:postgresql<br>\n#extra_hosts<br>\n类似 Docker 中的 --add-host 参数，指定额外的 host 名称映射信息。</li>\n</ul>\n<p>extra_hosts:</p>\n<ul>\n<li>“googledns:8.8.8.8”</li>\n<li>&quot;dockerhub:52.1.157.61&quot;<br>\n会在启动后的服务容器中 /etc/hosts 文件中添加如下两条条目。</li>\n</ul>\n<p>8.8.8.8 googledns<br>\n52.1.157.61 dockerhub<br>\n#healthcheck<br>\n通过命令检查容器是否健康运行。</p>\n<p>healthcheck:<br>\ntest: [“CMD”, “curl”, “-f”, “<a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">http://localhost</a>”]<br>\ninterval: 1m30s<br>\ntimeout: 10s<br>\nretries: 3<br>\n#image<br>\n指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p>\n<p>image: ubuntu<br>\nimage: orchardup/postgresql<br>\nimage: a4bc65fd<br>\n#labels<br>\n为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p>\n<p>labels:<br>\ncom.startupteam.description: &quot;webapp for a startup team&quot;<br>\ncom.startupteam.department: &quot;devops department&quot;<br>\ncom.startupteam.release: “rc3 for v1.0”<br>\n#links<br>\n注意：不推荐使用该指令。</p>\n<p>#logging<br>\n配置日志选项。</p>\n<p>logging:<br>\ndriver: syslog<br>\noptions:<br>\nsyslog-address: &quot;tcp://192.168.0.42:123&quot;<br>\n目前支持三种日志驱动类型。</p>\n<p>driver: &quot;json-file&quot;<br>\ndriver: &quot;syslog&quot;<br>\ndriver: &quot;none&quot;<br>\noptions 配置日志驱动的相关参数。</p>\n<p>options:<br>\nmax-size: &quot;200k&quot;<br>\nmax-file: “10”<br>\n#network_mode<br>\n设置网络模式。使用和 docker run 的 --network 参数一样的值。</p>\n<p>network_mode: &quot;bridge&quot;<br>\nnetwork_mode: &quot;host&quot;<br>\nnetwork_mode: &quot;none&quot;<br>\nnetwork_mode: &quot;service:[service name]&quot;<br>\nnetwork_mode: “container:[container name/id]”<br>\n#networks<br>\n配置容器连接的网络。</p>\n<p>version: &quot;3&quot;<br>\nservices:</p>\n<p>some-service:<br>\nnetworks:<br>\n- some-network<br>\n- other-network</p>\n<p>networks:<br>\nsome-network:<br>\nother-network:<br>\n#pid<br>\n跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p>\n<p>pid: “host”<br>\n#ports<br>\n暴露端口信息。</p>\n<p>使用宿主端口：容器端口 (HOST:CONTAINER) 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>\n<p>ports:</p>\n<ul>\n<li>“3000”</li>\n<li>“8000:8000”</li>\n<li>“49100:22”</li>\n<li>&quot;127.0.0.1:8001:8001&quot;<br>\n注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</li>\n</ul>\n<p>#secrets<br>\n存储敏感数据，例如 mysql 服务密码。</p>\n<p>version: &quot;3.1&quot;<br>\nservices:</p>\n<p>mysql:<br>\nimage: mysql<br>\nenvironment:<br>\nMYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password<br>\nsecrets:<br>\n- db_root_password<br>\n- my_other_secret</p>\n<p>secrets:<br>\nmy_secret:<br>\nfile: ./my_secret.txt<br>\nmy_other_secret:<br>\nexternal: true<br>\n#security_opt<br>\n指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。</p>\n<p>security_opt:<br>\n- label:user:USER<br>\n- label:role:ROLE<br>\n#stop_signal<br>\n设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。</p>\n<p>stop_signal: SIGUSR1<br>\n#sysctls<br>\n配置容器内核参数。</p>\n<p>sysctls:<br>\nnet.core.somaxconn: 1024<br>\nnet.ipv4.tcp_syncookies: 0</p>\n<p>sysctls:</p>\n<ul>\n<li>net.core.somaxconn=1024</li>\n<li>net.ipv4.tcp_syncookies=0<br>\n#ulimits<br>\n指定容器的 ulimits 限制值。</li>\n</ul>\n<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>\n<p>ulimits:<br>\nnproc: 65535<br>\nnofile:<br>\nsoft: 20000<br>\nhard: 40000<br>\n#volumes<br>\n数据卷所挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。</p>\n<p>该指令中路径支持相对路径。</p>\n<p>volumes:</p>\n<ul>\n<li>/var/lib/mysql</li>\n<li>cache/:/tmp/cache</li>\n<li>~/configs:/etc/configs/:ro<br>\n#其它指令<br>\n此外，还有包括 domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir 等指令，基本跟 docker run 中对应参数的功能一致。</li>\n</ul>\n<p>指定服务容器启动后执行的入口文件。</p>\n<p>entrypoint: /code/entrypoint.sh<br>\n指定容器中运行应用的用户名。</p>\n<p>user: nginx<br>\n指定容器中工作目录。</p>\n<p>working_dir: /code<br>\n指定容器中搜索域名、主机名、mac 地址等。</p>\n<p>domainname: your_website.com<br>\nhostname: test<br>\nmac_address: 08-00-27-00-0C-0A<br>\n允许容器中运行一些特权命令。</p>\n<p>privileged: true<br>\n指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped。</p>\n<p>restart: always<br>\n以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。</p>\n<p>read_only: true<br>\n打开标准输入，可以接受外部输入。</p>\n<p>stdin_open: true<br>\n模拟一个伪终端。</p>\n<p>tty: true<br>\n#读取变量<br>\nCompose 模板文件支持动态读取主机的系统环境变量和当前目录下的 .env 文件中的变量。</p>\n<p>例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION} 的值，并写入执行的指令中。</p>\n<p>version: &quot;3&quot;<br>\nservices:</p>\n<p>db:<br>\nimage: &quot;mongo:${MONGO_VERSION}&quot;<br>\n如果执行 MONGO_VERSION=3.2 docker-compose up 则会启动一个 mongo:3.2 镜像的容器；如果执行 MONGO_VERSION=2.8 docker-compose up 则会启动一个 mongo:2.8 镜像的容器。</p>\n<p>若当前目录存在 .env 文件，执行 docker-compose 命令时将从该文件中读取变量。</p>\n<p>在当前目录新建 .env 文件并写入以下内容。</p>\n<h1><span id=\"支持-号注释\">支持 # 号注释</span></h1>\n<p>MONGO_VERSION=3.6<br>\n执行 docker-compose up 则会启动一个 mongo:3.6 镜像的容器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker-Compose-模板文件</h1>\n<p>模板文件是使用 Compose 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 docker run 相关参数的含义都是类似的。</p>\n<p>默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  webapp:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> examples/web</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">\"80:80\"</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span></span><br><span class=\"line\">      - <span class=\"string\">\"/data\"</span></span><br></pre></td></tr></table></figure>\n<p>注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）等来自动构建生成镜像。</p>\n<p>如果使用 build 指令，在 Dockerfile 中设置的选项 (例如：CMD, EXPOSE, VOLUME, ENV 等) 将会自动被获取，无需在 docker-compose.yml 中再次设置。</p>\n<p>下面分别介绍各个指令的用法。</p>\n<p>#build<br>\n指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">  webapp:</span></span><br><span class=\"line\"><span class=\"symbol\">    build:</span> ./dir</span><br></pre></td></tr></table></figure>\n<p>你也可以使用 context 指令指定 Dockerfile 所在文件夹的路径。</p>\n<p>使用 dockerfile 指令指定 Dockerfile 文件名。</p>\n<p>使用 arg 指令指定构建镜像时的变量。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">  webapp:</span></span><br><span class=\"line\"><span class=\"symbol\">    build:</span></span><br><span class=\"line\"><span class=\"symbol\">      context:</span> ./dir</span><br><span class=\"line\"><span class=\"symbol\">      dockerfile:</span> Dockerfile-alternate</span><br><span class=\"line\"><span class=\"symbol\">      args:</span></span><br><span class=\"line\"><span class=\"symbol\">        buildno:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>使用 cache_from 指定构建镜像的缓存</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">build</span>:</span><br><span class=\"line\">  <span class=\"attribute\">context</span>: .</span><br><span class=\"line\">  <span class=\"attribute\">cache_from</span>:</span><br><span class=\"line\">    - <span class=\"attribute\">alpine</span>:latest</span><br><span class=\"line\">    - corp/<span class=\"attribute\">web_app</span>:<span class=\"number\">3.14</span></span><br><span class=\"line\">#cap_add, cap_drop</span><br></pre></td></tr></table></figure>\n<p>指定容器的内核能力（capacity）分配。</p>\n<p>例如，让容器拥有所有能力可以指定为：</p>\n<p>cap_add:</p>\n<ul>\n<li>ALL<br>\n去掉 NET_ADMIN 能力可以指定为：</li>\n</ul>\n<p>cap_drop:</p>\n<ul>\n<li>NET_ADMIN<br>\n#command<br>\n覆盖容器启动后默认执行的命令。</li>\n</ul>\n<p>command: echo “hello world”<br>\n#configs<br>\n仅用于 Swarm mode</p>\n<p>#cgroup_parent<br>\n指定父 cgroup 组，意味着将继承该组的资源限制。</p>\n<p>例如，创建了一个 cgroup 组名称为 cgroups_1。</p>\n<p>cgroup_parent: cgroups_1<br>\n#container_name<br>\n指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。</p>\n<p>container_name: docker-web-container<br>\n注意：指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>\n<p>#deploy<br>\n仅用于 Swarm mode</p>\n<p>#devices<br>\n指定设备映射关系。</p>\n<p>devices:</p>\n<ul>\n<li>“/dev/ttyUSB1:/dev/ttyUSB0”<br>\n#depends_on<br>\n解决容器的依赖、启动先后的问题。以下例子中会先启动 redis db 再启动 web</li>\n</ul>\n<p>version: ‘3’</p>\n<p>services:<br>\nweb:<br>\nbuild: .<br>\ndepends_on:<br>\n- db<br>\n- redis</p>\n<p>redis:<br>\nimage: redis</p>\n<p>db:<br>\nimage: postgres<br>\n注意：web 服务不会等待 redis db 「完全启动」之后才启动。</p>\n<p>#dns<br>\n自定义 DNS 服务器。可以是一个值，也可以是一个列表。</p>\n<p>dns: 8.8.8.8</p>\n<p>dns:</p>\n<ul>\n<li>8.8.8.8</li>\n<li>114.114.114.114<br>\n#dns_search<br>\n配置 DNS 搜索域。可以是一个值，也可以是一个列表。</li>\n</ul>\n<p>dns_search: <a href=\"http://example.com\" target=\"_blank\" rel=\"noopener\">example.com</a></p>\n<p>dns_search:</p>\n<ul>\n<li><a href=\"http://domain1.example.com\" target=\"_blank\" rel=\"noopener\">domain1.example.com</a></li>\n<li><a href=\"http://domain2.example.com\" target=\"_blank\" rel=\"noopener\">domain2.example.com</a><br>\n#tmpfs<br>\n挂载一个 tmpfs 文件系统到容器。</li>\n</ul>\n<p>tmpfs: /run<br>\ntmpfs:</p>\n<ul>\n<li>/run</li>\n<li>/tmp<br>\n#env_file<br>\n从文件中获取环境变量，可以为单独的文件路径或列表。</li>\n</ul>\n<p>如果通过 docker-compose -f FILE 方式来指定 Compose 模板文件，则 env_file 中变量的路径会基于模板文件路径。</p>\n<p>如果有变量名称与 environment 指令冲突，则按照惯例，以后者为准。</p>\n<p>env_file: .env</p>\n<p>env_file:</p>\n<ul>\n<li>./common.env</li>\n<li>./apps/web.env</li>\n<li>/opt/secrets.env<br>\n环境变量文件中每一行必须符合格式，支持 # 开头的注释行。</li>\n</ul>\n<h1>common.env: Set development environment</h1>\n<p>PROG_ENV=development<br>\n#environment<br>\n设置环境变量。你可以使用数组或字典两种格式。</p>\n<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>\n<p>environment:<br>\nRACK_ENV: development<br>\nSESSION_SECRET:</p>\n<p>environment:</p>\n<ul>\n<li>RACK_ENV=development</li>\n<li>SESSION_SECRET<br>\n如果变量名称或者值中用到 true|false，yes|no 等表达 布尔 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</li>\n</ul>\n<p>y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF<br>\n#expose<br>\n暴露端口，但不映射到宿主机，只被连接的服务访问。</p>\n<p>仅可以指定内部端口为参数</p>\n<p>expose:</p>\n<ul>\n<li>“3000”</li>\n<li>“8000”<br>\n#external_links<br>\n注意：不建议使用该指令。</li>\n</ul>\n<p>链接到 docker-compose.yml 外部的容器，甚至并非 Compose 管理的外部容器。</p>\n<p>external_links:</p>\n<ul>\n<li>redis_1</li>\n<li>project_db_1:mysql</li>\n<li>project_db_1:postgresql<br>\n#extra_hosts<br>\n类似 Docker 中的 --add-host 参数，指定额外的 host 名称映射信息。</li>\n</ul>\n<p>extra_hosts:</p>\n<ul>\n<li>“googledns:8.8.8.8”</li>\n<li>&quot;dockerhub:52.1.157.61&quot;<br>\n会在启动后的服务容器中 /etc/hosts 文件中添加如下两条条目。</li>\n</ul>\n<p>8.8.8.8 googledns<br>\n52.1.157.61 dockerhub<br>\n#healthcheck<br>\n通过命令检查容器是否健康运行。</p>\n<p>healthcheck:<br>\ntest: [“CMD”, “curl”, “-f”, “<a href=\"http://localhost\" target=\"_blank\" rel=\"noopener\">http://localhost</a>”]<br>\ninterval: 1m30s<br>\ntimeout: 10s<br>\nretries: 3<br>\n#image<br>\n指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p>\n<p>image: ubuntu<br>\nimage: orchardup/postgresql<br>\nimage: a4bc65fd<br>\n#labels<br>\n为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p>\n<p>labels:<br>\ncom.startupteam.description: &quot;webapp for a startup team&quot;<br>\ncom.startupteam.department: &quot;devops department&quot;<br>\ncom.startupteam.release: “rc3 for v1.0”<br>\n#links<br>\n注意：不推荐使用该指令。</p>\n<p>#logging<br>\n配置日志选项。</p>\n<p>logging:<br>\ndriver: syslog<br>\noptions:<br>\nsyslog-address: &quot;tcp://192.168.0.42:123&quot;<br>\n目前支持三种日志驱动类型。</p>\n<p>driver: &quot;json-file&quot;<br>\ndriver: &quot;syslog&quot;<br>\ndriver: &quot;none&quot;<br>\noptions 配置日志驱动的相关参数。</p>\n<p>options:<br>\nmax-size: &quot;200k&quot;<br>\nmax-file: “10”<br>\n#network_mode<br>\n设置网络模式。使用和 docker run 的 --network 参数一样的值。</p>\n<p>network_mode: &quot;bridge&quot;<br>\nnetwork_mode: &quot;host&quot;<br>\nnetwork_mode: &quot;none&quot;<br>\nnetwork_mode: &quot;service:[service name]&quot;<br>\nnetwork_mode: “container:[container name/id]”<br>\n#networks<br>\n配置容器连接的网络。</p>\n<p>version: &quot;3&quot;<br>\nservices:</p>\n<p>some-service:<br>\nnetworks:<br>\n- some-network<br>\n- other-network</p>\n<p>networks:<br>\nsome-network:<br>\nother-network:<br>\n#pid<br>\n跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p>\n<p>pid: “host”<br>\n#ports<br>\n暴露端口信息。</p>\n<p>使用宿主端口：容器端口 (HOST:CONTAINER) 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>\n<p>ports:</p>\n<ul>\n<li>“3000”</li>\n<li>“8000:8000”</li>\n<li>“49100:22”</li>\n<li>&quot;127.0.0.1:8001:8001&quot;<br>\n注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</li>\n</ul>\n<p>#secrets<br>\n存储敏感数据，例如 mysql 服务密码。</p>\n<p>version: &quot;3.1&quot;<br>\nservices:</p>\n<p>mysql:<br>\nimage: mysql<br>\nenvironment:<br>\nMYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password<br>\nsecrets:<br>\n- db_root_password<br>\n- my_other_secret</p>\n<p>secrets:<br>\nmy_secret:<br>\nfile: ./my_secret.txt<br>\nmy_other_secret:<br>\nexternal: true<br>\n#security_opt<br>\n指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。</p>\n<p>security_opt:<br>\n- label:user:USER<br>\n- label:role:ROLE<br>\n#stop_signal<br>\n设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。</p>\n<p>stop_signal: SIGUSR1<br>\n#sysctls<br>\n配置容器内核参数。</p>\n<p>sysctls:<br>\nnet.core.somaxconn: 1024<br>\nnet.ipv4.tcp_syncookies: 0</p>\n<p>sysctls:</p>\n<ul>\n<li>net.core.somaxconn=1024</li>\n<li>net.ipv4.tcp_syncookies=0<br>\n#ulimits<br>\n指定容器的 ulimits 限制值。</li>\n</ul>\n<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>\n<p>ulimits:<br>\nnproc: 65535<br>\nnofile:<br>\nsoft: 20000<br>\nhard: 40000<br>\n#volumes<br>\n数据卷所挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。</p>\n<p>该指令中路径支持相对路径。</p>\n<p>volumes:</p>\n<ul>\n<li>/var/lib/mysql</li>\n<li>cache/:/tmp/cache</li>\n<li>~/configs:/etc/configs/:ro<br>\n#其它指令<br>\n此外，还有包括 domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir 等指令，基本跟 docker run 中对应参数的功能一致。</li>\n</ul>\n<p>指定服务容器启动后执行的入口文件。</p>\n<p>entrypoint: /code/entrypoint.sh<br>\n指定容器中运行应用的用户名。</p>\n<p>user: nginx<br>\n指定容器中工作目录。</p>\n<p>working_dir: /code<br>\n指定容器中搜索域名、主机名、mac 地址等。</p>\n<p>domainname: your_website.com<br>\nhostname: test<br>\nmac_address: 08-00-27-00-0C-0A<br>\n允许容器中运行一些特权命令。</p>\n<p>privileged: true<br>\n指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped。</p>\n<p>restart: always<br>\n以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。</p>\n<p>read_only: true<br>\n打开标准输入，可以接受外部输入。</p>\n<p>stdin_open: true<br>\n模拟一个伪终端。</p>\n<p>tty: true<br>\n#读取变量<br>\nCompose 模板文件支持动态读取主机的系统环境变量和当前目录下的 .env 文件中的变量。</p>\n<p>例如，下面的 Compose 文件将从运行它的环境中读取变量 ${MONGO_VERSION} 的值，并写入执行的指令中。</p>\n<p>version: &quot;3&quot;<br>\nservices:</p>\n<p>db:<br>\nimage: &quot;mongo:${MONGO_VERSION}&quot;<br>\n如果执行 MONGO_VERSION=3.2 docker-compose up 则会启动一个 mongo:3.2 镜像的容器；如果执行 MONGO_VERSION=2.8 docker-compose up 则会启动一个 mongo:2.8 镜像的容器。</p>\n<p>若当前目录存在 .env 文件，执行 docker-compose 命令时将从该文件中读取变量。</p>\n<p>在当前目录新建 .env 文件并写入以下内容。</p>\n<h1>支持 # 号注释</h1>\n<p>MONGO_VERSION=3.6<br>\n执行 docker-compose up 则会启动一个 mongo:3.6 镜像的容器。</p>\n"},{"title":"Docker学习13-Docker-Compose-安装与卸载","catalog":true,"date":"2019-09-29T01:22:51.000Z","subtitle":null,"header-img":null,"_content":"# Docker Compose安装与卸载\nCompose 支持 Linux、macOS、Windows 10 三大平台。\n\nCompose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。\n\n前两种方式是传统方式，适合本地环境下安装使用；最后一种方式则不破坏系统环境，更适合云计算场景。\n\nDocker for Mac 、Docker for Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。\n~~~\n$ docker-compose --version\n\ndocker-compose version 1.17.1, build 6d101fb\n~~~\nLinux 系统请使用以下介绍的方法安装.\n\n## 二进制包\n在linux上的安装,从官方github release处下载编译好的二进制文件\n我本人使用的CentOS进行安装,包管理器为yum,所以要对yum进行一些配置\n\n## yum仓库添加\n~~~\nsudo tee /etc/yum.repos.d/docker.repo <<-'EOF'\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n~~~\n执行结果\n~~~\n[root@MyCentOS]/etc# sudo tee /etc/yum.repos.d/docker.repo <<-'EOF'\nheredocd> [dockerrepo]\nheredocd> name=Docker Repository\nheredocd> baseurl=https://yum.dockerproject.org/repo/main/centos/7/\nheredocd> enabled=1\nheredocd> gpgcheck=1\nheredocd> gpgkey=https://yum.dockerproject.org/gpg\nheredocd> EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\n~~~\n## 使用 Docker 国内镜像（为 Docker 镜像下载提速，非必须）\n使用 https://registry.docker-cn.com\n或者  https://get.daocloud.io\n~~~\n[root@MyCentOS]/etc# curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://fe8a7d6e.m.daoc\nloud.io\ndocker version >= 1.12\n{\n \"registry-mirrors\": [\"http://fe8a7d6e.m.daocloud.io\"]\n}\nSuccess.\nYou need to restart docker to take effect: sudo systemctl restart docker\n~~~\n\n## 安装docker-compose\n\n`\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n这个的下载速度会快些\n~~~\ncurl -L https://get.daocloud.io/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n~~~\n~~~\n[root@MyCentOS]~# curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  SpeedS\n100   617    0   617    0     0    923      0 --:--:-- --:--:-- --:--:--   923\n100 11.2M  100 11.2M    0     0   634k      0  0:00:18  0:00:18 --:--:--  396k\n\n~~~\n\n~~~\n[root@MyCentOS]/etc# docker-compose -v\ndocker-compose version 1.22.0, build f46880fe\n~~~\n安装成功\n\n## 赋予权限\n为用户组和其他用户的权限赋予\n`$ sudo chmod +x /usr/local/bin/docker-compose`\n~~~\nroot@MyCentOS]/usr/local/bin# ll\ntotal 11488\n-rwxr-xr-x 1 root root      225 Sep 18 16:08 chardetect\n-rwxr-xr-x 1 root root 11750136 Sep 29 10:05 docker-compose\n-rwxr-xr-x 1 root root      209 Sep 18 16:45 pytest\n-rwxr-xr-x 1 root root      209 Sep 18 16:45 py.test\n~~~\n\n## 参考资料\n> https://www.cnblogs.com/lywJ/p/10716062.html\n> https://www.funtl.com/zh/docker-compose/Docker-Compose-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD.html\n","source":"_posts/Docker学习13-Docker-Compose-安装与卸载.md","raw":"---\ntitle: Docker学习13-Docker-Compose-安装与卸载\ncatalog: true\ntags: [Docker, Docker Compose]\ndate: 2019-09-29 09:22:51\nsubtitle:\nheader-img:\n---\n# Docker Compose安装与卸载\nCompose 支持 Linux、macOS、Windows 10 三大平台。\n\nCompose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。\n\n前两种方式是传统方式，适合本地环境下安装使用；最后一种方式则不破坏系统环境，更适合云计算场景。\n\nDocker for Mac 、Docker for Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。\n~~~\n$ docker-compose --version\n\ndocker-compose version 1.17.1, build 6d101fb\n~~~\nLinux 系统请使用以下介绍的方法安装.\n\n## 二进制包\n在linux上的安装,从官方github release处下载编译好的二进制文件\n我本人使用的CentOS进行安装,包管理器为yum,所以要对yum进行一些配置\n\n## yum仓库添加\n~~~\nsudo tee /etc/yum.repos.d/docker.repo <<-'EOF'\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\nEOF\n~~~\n执行结果\n~~~\n[root@MyCentOS]/etc# sudo tee /etc/yum.repos.d/docker.repo <<-'EOF'\nheredocd> [dockerrepo]\nheredocd> name=Docker Repository\nheredocd> baseurl=https://yum.dockerproject.org/repo/main/centos/7/\nheredocd> enabled=1\nheredocd> gpgcheck=1\nheredocd> gpgkey=https://yum.dockerproject.org/gpg\nheredocd> EOF\n[dockerrepo]\nname=Docker Repository\nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/\nenabled=1\ngpgcheck=1\ngpgkey=https://yum.dockerproject.org/gpg\n~~~\n## 使用 Docker 国内镜像（为 Docker 镜像下载提速，非必须）\n使用 https://registry.docker-cn.com\n或者  https://get.daocloud.io\n~~~\n[root@MyCentOS]/etc# curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://fe8a7d6e.m.daoc\nloud.io\ndocker version >= 1.12\n{\n \"registry-mirrors\": [\"http://fe8a7d6e.m.daocloud.io\"]\n}\nSuccess.\nYou need to restart docker to take effect: sudo systemctl restart docker\n~~~\n\n## 安装docker-compose\n\n`\n$ sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n这个的下载速度会快些\n~~~\ncurl -L https://get.daocloud.io/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n~~~\n~~~\n[root@MyCentOS]~# curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  SpeedS\n100   617    0   617    0     0    923      0 --:--:-- --:--:-- --:--:--   923\n100 11.2M  100 11.2M    0     0   634k      0  0:00:18  0:00:18 --:--:--  396k\n\n~~~\n\n~~~\n[root@MyCentOS]/etc# docker-compose -v\ndocker-compose version 1.22.0, build f46880fe\n~~~\n安装成功\n\n## 赋予权限\n为用户组和其他用户的权限赋予\n`$ sudo chmod +x /usr/local/bin/docker-compose`\n~~~\nroot@MyCentOS]/usr/local/bin# ll\ntotal 11488\n-rwxr-xr-x 1 root root      225 Sep 18 16:08 chardetect\n-rwxr-xr-x 1 root root 11750136 Sep 29 10:05 docker-compose\n-rwxr-xr-x 1 root root      209 Sep 18 16:45 pytest\n-rwxr-xr-x 1 root root      209 Sep 18 16:45 py.test\n~~~\n\n## 参考资料\n> https://www.cnblogs.com/lywJ/p/10716062.html\n> https://www.funtl.com/zh/docker-compose/Docker-Compose-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD.html\n","slug":"Docker学习13-Docker-Compose-安装与卸载","published":1,"updated":"2021-04-20T13:28:10.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1x000mzgl1dqq92tti","content":"<h1><span id=\"docker-compose安装与卸载\">Docker Compose安装与卸载</span></h1>\n<p>Compose 支持 Linux、macOS、Windows 10 三大平台。</p>\n<p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。</p>\n<p>前两种方式是传统方式，适合本地环境下安装使用；最后一种方式则不破坏系统环境，更适合云计算场景。</p>\n<p>Docker for Mac 、Docker for Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose --version</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose version <span class=\"number\">1.17</span><span class=\"number\">.1</span>, build <span class=\"number\">6</span>d101fb</span><br></pre></td></tr></table></figure>\n<p>Linux 系统请使用以下介绍的方法安装.</p>\n<h2><span id=\"二进制包\">二进制包</span></h2>\n<p>在linux上的安装,从官方github release处下载编译好的二进制文件<br>\n我本人使用的CentOS进行安装,包管理器为yum,所以要对yum进行一些配置</p>\n<h2><span id=\"yum仓库添加\">yum仓库添加</span></h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">[dockerrepo]</span><br><span class=\"line\"><span class=\"attribute\">name</span>=Docker Repository</span><br><span class=\"line\"><span class=\"attribute\">baseurl</span>=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class=\"line\"><span class=\"attribute\">enabled</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgcheck</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgkey</span>=https://yum.dockerproject.org/gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/etc# sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">heredocd&gt; [dockerrepo]</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">name</span>=Docker Repository</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">baseurl</span>=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">enabled</span>=1</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">gpgcheck</span>=1</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">gpgkey</span>=https://yum.dockerproject.org/gpg</span><br><span class=\"line\">heredocd&gt; EOF</span><br><span class=\"line\">[dockerrepo]</span><br><span class=\"line\"><span class=\"attribute\">name</span>=Docker Repository</span><br><span class=\"line\"><span class=\"attribute\">baseurl</span>=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class=\"line\"><span class=\"attribute\">enabled</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgcheck</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgkey</span>=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure>\n<h2><span id=\"使用-docker-国内镜像为-docker-镜像下载提速非必须\">使用 Docker 国内镜像（为 Docker 镜像下载提速，非必须）</span></h2>\n<p>使用 <a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a><br>\n或者  <a href=\"https://get.daocloud.io\" target=\"_blank\" rel=\"noopener\">https://get.daocloud.io</a></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/etc# curl -sSL http<span class=\"variable\">s:</span>//<span class=\"built_in\">get</span>.daocloud.io/daotools/set_mirror.<span class=\"keyword\">sh</span> | <span class=\"keyword\">sh</span> -s http://fe8a7d6e.<span class=\"keyword\">m</span>.daoc</span><br><span class=\"line\">loud.io</span><br><span class=\"line\">docker <span class=\"keyword\">version</span> &gt;= <span class=\"number\">1.12</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://fe8a7d6e.m.daocloud.io\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Success.</span><br><span class=\"line\">You need <span class=\"keyword\">to</span> restart docker <span class=\"keyword\">to</span> take effec<span class=\"variable\">t:</span> sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2><span id=\"安装docker-compose\">安装docker-compose</span></h2>\n<p><code>$ sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-</code>uname -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose<br>\n这个的下载速度会快些</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https:<span class=\"regexp\">//g</span>et.daocloud.io<span class=\"regexp\">/docker/</span>compose<span class=\"regexp\">/releases/</span>download<span class=\"regexp\">/1.24.1/</span>docker-compose-`uname -s`-`uname -m` &gt; <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>docker-compose</span><br><span class=\"line\">chmod +x <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\"># curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  SpeedS</span><br><span class=\"line\"><span class=\"number\">100</span>   <span class=\"number\">617</span>    0   <span class=\"number\">617</span>    0     0    <span class=\"number\">923</span>      0 --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span>   <span class=\"number\">923</span></span><br><span class=\"line\"><span class=\"number\">100 11</span>.<span class=\"number\">2</span>M  <span class=\"number\">100 11</span>.<span class=\"number\">2</span>M    0     0   <span class=\"number\">634</span>k      0  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span><span class=\"number\">18</span>  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span><span class=\"number\">18</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span>  <span class=\"number\">396</span>k</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]<span class=\"string\">/etc</span><span class=\"comment\"># docker-compose -v</span></span><br><span class=\"line\">docker-compose <span class=\"keyword\">version</span> 1.22.0, build f46880fe</span><br></pre></td></tr></table></figure>\n<p>安装成功</p>\n<h2><span id=\"赋予权限\">赋予权限</span></h2>\n<p>为用户组和其他用户的权限赋予<br>\n<code>$ sudo chmod +x /usr/local/bin/docker-compose</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@MyCentOS]/usr/local/bin#</span> <span class=\"string\">ll</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">11488</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>      <span class=\"number\">225</span> <span class=\"string\">Sep</span> <span class=\"number\">18</span> <span class=\"number\">16</span><span class=\"string\">:08</span> <span class=\"string\">chardetect</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">11750136</span> <span class=\"string\">Sep</span> <span class=\"number\">29</span> <span class=\"number\">10</span><span class=\"string\">:05</span> <span class=\"string\">docker-compose</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>      <span class=\"number\">209</span> <span class=\"string\">Sep</span> <span class=\"number\">18</span> <span class=\"number\">16</span><span class=\"string\">:45</span> <span class=\"string\">pytest</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>      <span class=\"number\">209</span> <span class=\"string\">Sep</span> <span class=\"number\">18</span> <span class=\"number\">16</span><span class=\"string\">:45</span> <span class=\"string\">py.test</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/lywJ/p/10716062.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lywJ/p/10716062.html</a><br>\n<a href=\"https://www.funtl.com/zh/docker-compose/Docker-Compose-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/Docker-Compose-安装与卸载.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker Compose安装与卸载</h1>\n<p>Compose 支持 Linux、macOS、Windows 10 三大平台。</p>\n<p>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。</p>\n<p>前两种方式是传统方式，适合本地环境下安装使用；最后一种方式则不破坏系统环境，更适合云计算场景。</p>\n<p>Docker for Mac 、Docker for Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose --version</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose version <span class=\"number\">1.17</span><span class=\"number\">.1</span>, build <span class=\"number\">6</span>d101fb</span><br></pre></td></tr></table></figure>\n<p>Linux 系统请使用以下介绍的方法安装.</p>\n<h2>二进制包</h2>\n<p>在linux上的安装,从官方github release处下载编译好的二进制文件<br>\n我本人使用的CentOS进行安装,包管理器为yum,所以要对yum进行一些配置</p>\n<h2>yum仓库添加</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">[dockerrepo]</span><br><span class=\"line\"><span class=\"attribute\">name</span>=Docker Repository</span><br><span class=\"line\"><span class=\"attribute\">baseurl</span>=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class=\"line\"><span class=\"attribute\">enabled</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgcheck</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgkey</span>=https://yum.dockerproject.org/gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/etc# sudo tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class=\"string\">'EOF'</span></span><br><span class=\"line\">heredocd&gt; [dockerrepo]</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">name</span>=Docker Repository</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">baseurl</span>=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">enabled</span>=1</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">gpgcheck</span>=1</span><br><span class=\"line\">heredocd&gt; <span class=\"attribute\">gpgkey</span>=https://yum.dockerproject.org/gpg</span><br><span class=\"line\">heredocd&gt; EOF</span><br><span class=\"line\">[dockerrepo]</span><br><span class=\"line\"><span class=\"attribute\">name</span>=Docker Repository</span><br><span class=\"line\"><span class=\"attribute\">baseurl</span>=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class=\"line\"><span class=\"attribute\">enabled</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgcheck</span>=1</span><br><span class=\"line\"><span class=\"attribute\">gpgkey</span>=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure>\n<h2>使用 Docker 国内镜像（为 Docker 镜像下载提速，非必须）</h2>\n<p>使用 <a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a><br>\n或者  <a href=\"https://get.daocloud.io\" target=\"_blank\" rel=\"noopener\">https://get.daocloud.io</a></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/etc# curl -sSL http<span class=\"variable\">s:</span>//<span class=\"built_in\">get</span>.daocloud.io/daotools/set_mirror.<span class=\"keyword\">sh</span> | <span class=\"keyword\">sh</span> -s http://fe8a7d6e.<span class=\"keyword\">m</span>.daoc</span><br><span class=\"line\">loud.io</span><br><span class=\"line\">docker <span class=\"keyword\">version</span> &gt;= <span class=\"number\">1.12</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"string\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://fe8a7d6e.m.daocloud.io\"</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Success.</span><br><span class=\"line\">You need <span class=\"keyword\">to</span> restart docker <span class=\"keyword\">to</span> take effec<span class=\"variable\">t:</span> sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<h2>安装docker-compose</h2>\n<p><code>$ sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-</code>uname -s<code>-</code>uname -m` &gt; /usr/local/bin/docker-compose<br>\n这个的下载速度会快些</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L https:<span class=\"regexp\">//g</span>et.daocloud.io<span class=\"regexp\">/docker/</span>compose<span class=\"regexp\">/releases/</span>download<span class=\"regexp\">/1.24.1/</span>docker-compose-`uname -s`-`uname -m` &gt; <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>docker-compose</span><br><span class=\"line\">chmod +x <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\"># curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  SpeedS</span><br><span class=\"line\"><span class=\"number\">100</span>   <span class=\"number\">617</span>    0   <span class=\"number\">617</span>    0     0    <span class=\"number\">923</span>      0 --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span>   <span class=\"number\">923</span></span><br><span class=\"line\"><span class=\"number\">100 11</span>.<span class=\"number\">2</span>M  <span class=\"number\">100 11</span>.<span class=\"number\">2</span>M    0     0   <span class=\"number\">634</span>k      0  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span><span class=\"number\">18</span>  0<span class=\"symbol\">:</span>00<span class=\"symbol\">:</span><span class=\"number\">18</span> --<span class=\"symbol\">:--</span><span class=\"symbol\">:--</span>  <span class=\"number\">396</span>k</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]<span class=\"string\">/etc</span><span class=\"comment\"># docker-compose -v</span></span><br><span class=\"line\">docker-compose <span class=\"keyword\">version</span> 1.22.0, build f46880fe</span><br></pre></td></tr></table></figure>\n<p>安装成功</p>\n<h2>赋予权限</h2>\n<p>为用户组和其他用户的权限赋予<br>\n<code>$ sudo chmod +x /usr/local/bin/docker-compose</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@MyCentOS]/usr/local/bin#</span> <span class=\"string\">ll</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">11488</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>      <span class=\"number\">225</span> <span class=\"string\">Sep</span> <span class=\"number\">18</span> <span class=\"number\">16</span><span class=\"string\">:08</span> <span class=\"string\">chardetect</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">11750136</span> <span class=\"string\">Sep</span> <span class=\"number\">29</span> <span class=\"number\">10</span><span class=\"string\">:05</span> <span class=\"string\">docker-compose</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>      <span class=\"number\">209</span> <span class=\"string\">Sep</span> <span class=\"number\">18</span> <span class=\"number\">16</span><span class=\"string\">:45</span> <span class=\"string\">pytest</span></span><br><span class=\"line\"><span class=\"string\">-rwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>      <span class=\"number\">209</span> <span class=\"string\">Sep</span> <span class=\"number\">18</span> <span class=\"number\">16</span><span class=\"string\">:45</span> <span class=\"string\">py.test</span></span><br></pre></td></tr></table></figure>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/lywJ/p/10716062.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lywJ/p/10716062.html</a><br>\n<a href=\"https://www.funtl.com/zh/docker-compose/Docker-Compose-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/Docker-Compose-安装与卸载.html</a></p>\n</blockquote>\n"},{"title":"Docker学习14-Docker-Compose-的使用","catalog":true,"date":"2019-09-29T01:32:51.000Z","subtitle":null,"header-img":null,"_content":"# Docker-Compose-的使用\n\n## 创建Docker-Compose.yml文件\n~~~\nversion: '3'\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - 8086:8080\n~~~\n## 运行docker-compose\n`docker-compose up`\n运行日志\n\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker-compose up\nStarting tomcat ... done\nAttaching to tomcat\ntomcat    | 29-Sep-2019 03:08:29.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.45\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Aug 14 2019 22:21:25 UTC\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.45.0\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=0027\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]\ntomcat    | 29-Sep-2019 03:08:29.993 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]\ntomcat    | 29-Sep-2019 03:08:30.155 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"http-nio-8080\"]\ntomcat    | 29-Sep-2019 03:08:30.175 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\ntomcat    | 29-Sep-2019 03:08:30.202 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"ajp-nio-8009\"]\ntomcat    | 29-Sep-2019 03:08:30.203 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\ntomcat    | 29-Sep-2019 03:08:30.212 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 984 ms\ntomcat    | 29-Sep-2019 03:08:30.265 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\ntomcat    | 29-Sep-2019 03:08:30.265 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45\ntomcat    | 29-Sep-2019 03:08:30.291 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]\ntomcat    | 29-Sep-2019 03:15:19.551 WARNING [localhost-startStop-1] org.apacneratorBase.createSecureRandom Creation of SecureRandom instance for session G] took [408,728] milliseconds.\ntomcat    | 29-Sep-2019 03:15:19.598 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[409,307] ms\ntomcat    | 29-Sep-2019 03:15:19.599 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:19.668 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/wein [69] ms\ntomcat    | 29-Sep-2019 03:15:19.668 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:19.716 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/weshed in [48] ms\ntomcat    | 29-Sep-2019 03:15:19.716 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:19.768 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[52] ms\ntomcat    | 29-Sep-2019 03:15:19.768 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:20.228 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we in [460] ms\ntomcat    | 29-Sep-2019 03:15:20.239 INFO [main] org.apache.coyote.AbstractProlHandler [\"http-nio-8080\"]\ntomcat    | 29-Sep-2019 03:15:20.269 INFO [main] org.apache.coyote.AbstractProlHandler [\"ajp-nio-8009\"]\ntomcat    | 29-Sep-2019 03:15:20.272 INFO [main] org.apache.catalina.startup.p in 410059 ms\n~~~\n## 查看运行中的容器\n~~~\n➜  tomcat sudo docker ps             \n[sudo] password for ziming: \nSorry, try again.\n[sudo] password for ziming: \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n13f2aa1609bc        tomcat              \"catalina.sh run\"        32 minutes ago      Up 28 minutes       0.0.0.0:8086->8080/tcp   tomcat\nc8b87b5f1fcd        tomcat              \"catalina.sh run\"        3 days ago          Up 37 minutes       0.0.0.0:8083->8080/tcp   tripweb\n1e07f46eb80a        tomcat              \"catalina.sh run\"        4 days ago          Up 37 minutes       0.0.0.0:8085->8080/tcp   myshop\n00e3d56be365        mysql:5.7.22        \"docker-entrypoint.s…\"   5 days ago          Up 37 minutes       0.0.0.0:3307->3306/tcp   mysql\nd53272c36764        tomcat              \"catalina.sh run\"        5 days ago          Up 37 minutes       0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        6 days ago          Up 37 minutes       0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n## 浏览器访问\n![](Docker学习14-Docker-Compose-的使用/1.png)\n    \n## 参考资料\n> https://www.funtl.com/zh/docker-compose/Docker-Compose-%E4%BD%BF%E7%94%A8.html#%E5%9C%BA%E6%99%AF\n","source":"_posts/Docker学习14-Docker-Compose-的使用.md","raw":"---\ntitle: Docker学习14-Docker-Compose-的使用\ncatalog: true\ntags: [Docker, Docker Compose]\ndate: 2019-09-29 09:32:51\nsubtitle:\nheader-img:\n---\n# Docker-Compose-的使用\n\n## 创建Docker-Compose.yml文件\n~~~\nversion: '3'\nservices:\n  tomcat:\n    restart: always\n    image: tomcat\n    container_name: tomcat\n    ports:\n      - 8086:8080\n~~~\n## 运行docker-compose\n`docker-compose up`\n运行日志\n\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker-compose up\nStarting tomcat ... done\nAttaching to tomcat\ntomcat    | 29-Sep-2019 03:08:29.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/8.5.45\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Aug 14 2019 22:21:25 UTC\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         8.5.45.0\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.968 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=0027\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].\ntomcat    | 29-Sep-2019 03:08:29.969 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]\ntomcat    | 29-Sep-2019 03:08:29.993 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]\ntomcat    | 29-Sep-2019 03:08:30.155 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"http-nio-8080\"]\ntomcat    | 29-Sep-2019 03:08:30.175 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\ntomcat    | 29-Sep-2019 03:08:30.202 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"ajp-nio-8009\"]\ntomcat    | 29-Sep-2019 03:08:30.203 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\ntomcat    | 29-Sep-2019 03:08:30.212 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 984 ms\ntomcat    | 29-Sep-2019 03:08:30.265 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\ntomcat    | 29-Sep-2019 03:08:30.265 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45\ntomcat    | 29-Sep-2019 03:08:30.291 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]\ntomcat    | 29-Sep-2019 03:15:19.551 WARNING [localhost-startStop-1] org.apacneratorBase.createSecureRandom Creation of SecureRandom instance for session G] took [408,728] milliseconds.\ntomcat    | 29-Sep-2019 03:15:19.598 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[409,307] ms\ntomcat    | 29-Sep-2019 03:15:19.599 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:19.668 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/wein [69] ms\ntomcat    | 29-Sep-2019 03:15:19.668 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:19.716 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/weshed in [48] ms\ntomcat    | 29-Sep-2019 03:15:19.716 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:19.768 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[52] ms\ntomcat    | 29-Sep-2019 03:15:19.768 INFO [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp\ntomcat    | 29-Sep-2019 03:15:20.228 INFO [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we in [460] ms\ntomcat    | 29-Sep-2019 03:15:20.239 INFO [main] org.apache.coyote.AbstractProlHandler [\"http-nio-8080\"]\ntomcat    | 29-Sep-2019 03:15:20.269 INFO [main] org.apache.coyote.AbstractProlHandler [\"ajp-nio-8009\"]\ntomcat    | 29-Sep-2019 03:15:20.272 INFO [main] org.apache.catalina.startup.p in 410059 ms\n~~~\n## 查看运行中的容器\n~~~\n➜  tomcat sudo docker ps             \n[sudo] password for ziming: \nSorry, try again.\n[sudo] password for ziming: \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n13f2aa1609bc        tomcat              \"catalina.sh run\"        32 minutes ago      Up 28 minutes       0.0.0.0:8086->8080/tcp   tomcat\nc8b87b5f1fcd        tomcat              \"catalina.sh run\"        3 days ago          Up 37 minutes       0.0.0.0:8083->8080/tcp   tripweb\n1e07f46eb80a        tomcat              \"catalina.sh run\"        4 days ago          Up 37 minutes       0.0.0.0:8085->8080/tcp   myshop\n00e3d56be365        mysql:5.7.22        \"docker-entrypoint.s…\"   5 days ago          Up 37 minutes       0.0.0.0:3307->3306/tcp   mysql\nd53272c36764        tomcat              \"catalina.sh run\"        5 days ago          Up 37 minutes       0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"        6 days ago          Up 37 minutes       0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n## 浏览器访问\n![](Docker学习14-Docker-Compose-的使用/1.png)\n    \n## 参考资料\n> https://www.funtl.com/zh/docker-compose/Docker-Compose-%E4%BD%BF%E7%94%A8.html#%E5%9C%BA%E6%99%AF\n","slug":"Docker学习14-Docker-Compose-的使用","published":1,"updated":"2021-04-20T13:28:10.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1y000ozgl1lvyblr01","content":"<h1><span id=\"docker-compose-的使用\">Docker-Compose-的使用</span></h1>\n<h2><span id=\"创建docker-composeyml文件\">创建Docker-Compose.yml文件</span></h2>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  tomcat:</span></span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    image:</span> tomcat</span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> tomcat</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">8086</span>:<span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"运行docker-compose\">运行docker-compose</span></h2>\n<p><code>docker-compose up</code><br>\n运行日志</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat# docker-compose up</span><br><span class=\"line\">Starting tomcat <span class=\"built_in\">..</span>. done</span><br><span class=\"line\">Attaching <span class=\"keyword\">to</span> tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.966 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>version:        Apache Tomcat/8.5.45</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>built:          Aug 14 2019 22:21:25 UTC</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>number:         8.5.45.0</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.<span class=\"attribute\">file</span>=/usr/local/tomcat/conf/logging.properties</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.<span class=\"attribute\">manager</span>=org.apache.juli.ClassLoaderLogManager</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.<span class=\"attribute\">ephemeralDHKeySize</span>=2048</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.<span class=\"attribute\">pkgs</span>=org.apache.catalina.webresources</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.<span class=\"attribute\">UMASK</span>=0027</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">base</span>=/usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">home</span>=/usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.<span class=\"attribute\">tmpdir</span>=/usr/local/tomcat/temp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities:<span class=\"built_in\"> IPv6 </span>[<span class=\"literal\">true</span>], sendfile [<span class=\"literal\">true</span>], accept filters [<span class=\"literal\">false</span>], random [<span class=\"literal\">true</span>].</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [<span class=\"literal\">false</span>], useOpenSSL [<span class=\"literal\">true</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.993 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.155 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.175 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.202 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.203 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.212 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.Catalina.load Initialization processed <span class=\"keyword\">in</span> 984 ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.265 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardService.startInternal Starting<span class=\"built_in\"> service </span>[Catalina]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.265 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.291 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.551 <span class=\"builtin-name\">WARNING</span> [localhost-startStop-1] org.apacneratorBase.createSecureRandom Creation of SecureRandom<span class=\"built_in\"> instance </span><span class=\"keyword\">for</span> session G] took [408,728] milliseconds.</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.598 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[409,307] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.599 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.668 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/wein [69] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.668 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.716 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/weshed <span class=\"keyword\">in</span> [48] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.716 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.768 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[52] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.768 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.228 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we <span class=\"keyword\">in</span> [460] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.239 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProlHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.269 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProlHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.272 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.p <span class=\"keyword\">in</span> 410059 ms</span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看运行中的容器\">查看运行中的容器</span></h2>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tomcat</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span>             </span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span> </span><br><span class=\"line\"><span class=\"string\">Sorry,</span> <span class=\"string\">try</span> <span class=\"string\">again.</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span> </span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">13f2aa1609bc</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">32</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">28</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8086-&gt;8080/tcp</span>   <span class=\"string\">tomcat</span></span><br><span class=\"line\"><span class=\"string\">c8b87b5f1fcd</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">3</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">tripweb</span></span><br><span class=\"line\"><span class=\"string\">1e07f46eb80a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">4</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8085-&gt;8080/tcp</span>   <span class=\"string\">myshop</span></span><br><span class=\"line\"><span class=\"string\">00e3d56be365</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">5</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">5</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">6</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"浏览器访问\">浏览器访问</span></h2>\n<p><img src=\"/2019/09/29/Docker学习14-Docker-Compose-的使用/1.png\" alt></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker-compose/Docker-Compose-%E4%BD%BF%E7%94%A8.html#%E5%9C%BA%E6%99%AF\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/Docker-Compose-使用.html#场景</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker-Compose-的使用</h1>\n<h2>创建Docker-Compose.yml文件</h2>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  tomcat:</span></span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    image:</span> tomcat</span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> tomcat</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">8086</span>:<span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n<h2>运行docker-compose</h2>\n<p><code>docker-compose up</code><br>\n运行日志</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat# docker-compose up</span><br><span class=\"line\">Starting tomcat <span class=\"built_in\">..</span>. done</span><br><span class=\"line\">Attaching <span class=\"keyword\">to</span> tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.966 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>version:        Apache Tomcat/8.5.45</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>built:          Aug 14 2019 22:21:25 UTC</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log<span class=\"built_in\"> Server </span>number:         8.5.45.0</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-957.27.2.el7.x86_64</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/local/openjdk-8/jre</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           1.8.0_222-b10</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.968 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.<span class=\"attribute\">file</span>=/usr/local/tomcat/conf/logging.properties</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.<span class=\"attribute\">manager</span>=org.apache.juli.ClassLoaderLogManager</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.<span class=\"attribute\">ephemeralDHKeySize</span>=2048</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.<span class=\"attribute\">pkgs</span>=org.apache.catalina.webresources</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.<span class=\"attribute\">UMASK</span>=0027</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">base</span>=/usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.<span class=\"attribute\">home</span>=/usr/local/tomcat</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.<span class=\"attribute\">tmpdir</span>=/usr/local/tomcat/temp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.5.2].</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities:<span class=\"built_in\"> IPv6 </span>[<span class=\"literal\">true</span>], sendfile [<span class=\"literal\">true</span>], accept filters [<span class=\"literal\">false</span>], random [<span class=\"literal\">true</span>].</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.969 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [<span class=\"literal\">false</span>], useOpenSSL [<span class=\"literal\">true</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:29.993 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0k  28 May 2019]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.155 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.175 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.202 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.203 <span class=\"builtin-name\">INFO</span> [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector <span class=\"keyword\">for</span> servlet write/read</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.212 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.Catalina.load Initialization processed <span class=\"keyword\">in</span> 984 ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.265 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardService.startInternal Starting<span class=\"built_in\"> service </span>[Catalina]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.265 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.45</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:08:30.291 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.551 <span class=\"builtin-name\">WARNING</span> [localhost-startStop-1] org.apacneratorBase.createSecureRandom Creation of SecureRandom<span class=\"built_in\"> instance </span><span class=\"keyword\">for</span> session G] took [408,728] milliseconds.</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.598 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[409,307] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.599 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.668 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/wein [69] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.668 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.716 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/weshed <span class=\"keyword\">in</span> [48] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.716 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.768 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we[52] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:19.768 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deploying web application directory [/usr/local/tomcat/webapp</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.228 <span class=\"builtin-name\">INFO</span> [localhost-startStop-1] org.apache.deployDirectory Deployment of web application directory [/usr/local/tomcat/we <span class=\"keyword\">in</span> [460] ms</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.239 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProlHandler [<span class=\"string\">\"http-nio-8080\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.269 <span class=\"builtin-name\">INFO</span> [main] org.apache.coyote.AbstractProlHandler [<span class=\"string\">\"ajp-nio-8009\"</span>]</span><br><span class=\"line\">tomcat    | 29-Sep-2019 03:15:20.272 <span class=\"builtin-name\">INFO</span> [main] org.apache.catalina.startup.p <span class=\"keyword\">in</span> 410059 ms</span><br></pre></td></tr></table></figure>\n<h2>查看运行中的容器</h2>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tomcat</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span>             </span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span> </span><br><span class=\"line\"><span class=\"string\">Sorry,</span> <span class=\"string\">try</span> <span class=\"string\">again.</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span> </span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">13f2aa1609bc</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">32</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">28</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8086-&gt;8080/tcp</span>   <span class=\"string\">tomcat</span></span><br><span class=\"line\"><span class=\"string\">c8b87b5f1fcd</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">3</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8083-&gt;8080/tcp</span>   <span class=\"string\">tripweb</span></span><br><span class=\"line\"><span class=\"string\">1e07f46eb80a</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">4</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8085-&gt;8080/tcp</span>   <span class=\"string\">myshop</span></span><br><span class=\"line\"><span class=\"string\">00e3d56be365</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">5</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">5</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">6</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">37</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<h2>浏览器访问</h2>\n<p><img src=\"/2019/09/29/Docker学习14-Docker-Compose-的使用/1.png\" alt></p>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker-compose/Docker-Compose-%E4%BD%BF%E7%94%A8.html#%E5%9C%BA%E6%99%AF\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/Docker-Compose-使用.html#场景</a></p>\n</blockquote>\n"},{"title":"Docker学习16-Docker-Compose命令说明","catalog":true,"date":"2019-09-29T06:23:19.000Z","subtitle":null,"header-img":null,"_content":"# Docker Compose 命令说明\n#命令对象与格式\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。\n\n执行 docker-compose [COMMAND] --help 或者 docker-compose help [COMMAND] 可以查看具体某个命令的使用格式。\n\ndocker-compose 命令的基本的使用格式是\n\ndocker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]\n#命令选项\n-f, --file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。\n-p, --project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名。\n--x-networking 使用 Docker 的可拔插网络后端特性\n--x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge\n--verbose 输出更多调试信息。\n-v, --version 打印版本并退出。\n#build\n格式为 docker-compose build [options] [SERVICE...]。\n\n构建（重新构建）项目中的服务容器。\n\n服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。\n\n可以随时在项目目录下运行 docker-compose build 来重新构建服务。\n\n选项包括：\n\n--force-rm 删除构建过程中的临时容器。\n--no-cache 构建镜像过程中不使用 cache（这将加长构建过程）。\n--pull 始终尝试通过 pull 来获取更新版本的镜像。\n#config\n验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。\n\n#down\n此命令将会停止 up 命令所启动的容器，并移除网络\n\n#exec\n进入指定的容器。\n\n#help\n获得一个命令的帮助。\n\n#images\n列出 Compose 文件中包含的镜像。\n\n#kill\n格式为 docker-compose kill [options] [SERVICE...]。\n\n通过发送 SIGKILL 信号来强制停止服务容器。\n\n支持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。\n\n$ docker-compose kill -s SIGINT\n#logs\n格式为 docker-compose logs [options] [SERVICE...]。\n\n查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 --no-color 来关闭颜色。\n\n该命令在调试问题的时候十分有用。\n\n#pause\n格式为 docker-compose pause [SERVICE...]。\n\n暂停一个服务容器。\n\n#port\n格式为 docker-compose port [options] SERVICE PRIVATE_PORT。\n\n打印某个容器端口所映射的公共端口。\n\n选项：\n\n--protocol=proto 指定端口协议，tcp（默认值）或者 udp。\n--index=index 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。\n#ps\n格式为 docker-compose ps [options] [SERVICE...]。\n\n列出项目中目前的所有容器。\n\n选项：\n\n-q 只打印容器的 ID 信息。\n#pull\n格式为 docker-compose pull [options] [SERVICE...]。\n\n拉取服务依赖的镜像。\n\n选项：\n\n--ignore-pull-failures 忽略拉取镜像过程中的错误。\n#push\n推送服务依赖的镜像到 Docker 镜像仓库。\n\n#restart\n格式为 docker-compose restart [options] [SERVICE...]。\n\n重启项目中的服务。\n\n选项：\n\n-t, --timeout TIMEOUT 指定重启前停止容器的超时（默认为 10 秒）。\n#rm\n格式为 docker-compose rm [options] [SERVICE...]。\n\n删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。\n\n选项：\n\n-f, --force 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。\n-v 删除容器所挂载的数据卷。\n#run\n格式为 docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]。\n\n在指定服务上执行一个命令。\n\n例如：\n\n$ docker-compose run ubuntu ping docker.com\n将会启动一个 ubuntu 服务容器，并执行 ping docker.com 命令。\n\n默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。\n\n该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。\n\n两个不同点：\n\n给定命令将会覆盖原有的自动运行命令；\n不会自动创建端口，以避免冲突。\n如果不希望自动启动关联的容器，可以使用 --no-deps 选项，例如\n\n$ docker-compose run --no-deps web python manage.py shell\n将不会启动 web 容器所关联的其它容器。\n\n选项：\n\n-d 后台运行容器。\n--name NAME 为容器指定一个名字。\n--entrypoint CMD 覆盖默认的容器启动指令。\n-e KEY=VAL 设置环境变量值，可多次使用选项来设置多个环境变量。\n-u, --user=\"\" 指定运行容器的用户名或者 uid。\n--no-deps 不自动启动关联的服务容器。\n--rm 运行命令后自动删除容器，d 模式下将忽略。\n-p, --publish=[] 映射容器端口到本地主机。\n--service-ports 配置服务端口并映射到本地主机。\n-T 不分配伪 tty，意味着依赖 tty 的指令将无法运行。\n#scale\n格式为 docker-compose scale [options] [SERVICE=NUM...]。\n\n设置指定服务运行的容器个数。\n\n通过 service=num 的参数来设置数量。例如：\n\n$ docker-compose scale web=3 db=2\n将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。\n\n一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。\n\n选项：\n\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。\n#start\n格式为 docker-compose start [SERVICE...]。\n\n启动已经存在的服务容器。\n\n#stop\n格式为 docker-compose stop [options] [SERVICE...]。\n\n停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。\n\n选项：\n\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。\n#top\n查看各个服务容器内运行的进程。\n\n#unpause\n格式为 docker-compose unpause [SERVICE...]。\n\n恢复处于暂停状态中的服务。\n\n#up\n格式为 docker-compose up [options] [SERVICE...]。\n\n该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。\n\n链接的服务都将会被自动启动，除非已经处于运行状态。\n\n可以说，大部分时候都可以直接通过该命令来启动一个项目。\n\n默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。\n\n当通过 Ctrl-C 停止命令时，所有容器将会停止。\n\n如果使用 docker-compose up -d，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。\n\n默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 docker-compose up --no-recreate。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 docker-compose up --no-deps -d <SERVICE_NAME> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。\n\n选项：\n\n-d 在后台运行服务容器。\n--no-color 不使用颜色来区分不同的服务的控制台输出。\n--no-deps 不启动服务所链接的容器。\n--force-recreate 强制重新创建容器，不能与 --no-recreate 同时使用。\n--no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。\n--no-build 不自动构建缺失的服务镜像。\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。\n#version\n格式为 docker-compose version。\n\n打印版本信息。\n\n## 参考资料\n> \n","source":"_posts/Docker学习16-Docker-Compose-命令说明.md","raw":"---\ntitle: \"Docker学习16-Docker-Compose命令说明\"\ncatalog: true\ntags: [Docker, Docker Compose]\ndate: 2019-09-29 14:23:19\nsubtitle:\nheader-img:\n---\n# Docker Compose 命令说明\n#命令对象与格式\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。\n\n执行 docker-compose [COMMAND] --help 或者 docker-compose help [COMMAND] 可以查看具体某个命令的使用格式。\n\ndocker-compose 命令的基本的使用格式是\n\ndocker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]\n#命令选项\n-f, --file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。\n-p, --project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名。\n--x-networking 使用 Docker 的可拔插网络后端特性\n--x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge\n--verbose 输出更多调试信息。\n-v, --version 打印版本并退出。\n#build\n格式为 docker-compose build [options] [SERVICE...]。\n\n构建（重新构建）项目中的服务容器。\n\n服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。\n\n可以随时在项目目录下运行 docker-compose build 来重新构建服务。\n\n选项包括：\n\n--force-rm 删除构建过程中的临时容器。\n--no-cache 构建镜像过程中不使用 cache（这将加长构建过程）。\n--pull 始终尝试通过 pull 来获取更新版本的镜像。\n#config\n验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。\n\n#down\n此命令将会停止 up 命令所启动的容器，并移除网络\n\n#exec\n进入指定的容器。\n\n#help\n获得一个命令的帮助。\n\n#images\n列出 Compose 文件中包含的镜像。\n\n#kill\n格式为 docker-compose kill [options] [SERVICE...]。\n\n通过发送 SIGKILL 信号来强制停止服务容器。\n\n支持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。\n\n$ docker-compose kill -s SIGINT\n#logs\n格式为 docker-compose logs [options] [SERVICE...]。\n\n查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 --no-color 来关闭颜色。\n\n该命令在调试问题的时候十分有用。\n\n#pause\n格式为 docker-compose pause [SERVICE...]。\n\n暂停一个服务容器。\n\n#port\n格式为 docker-compose port [options] SERVICE PRIVATE_PORT。\n\n打印某个容器端口所映射的公共端口。\n\n选项：\n\n--protocol=proto 指定端口协议，tcp（默认值）或者 udp。\n--index=index 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。\n#ps\n格式为 docker-compose ps [options] [SERVICE...]。\n\n列出项目中目前的所有容器。\n\n选项：\n\n-q 只打印容器的 ID 信息。\n#pull\n格式为 docker-compose pull [options] [SERVICE...]。\n\n拉取服务依赖的镜像。\n\n选项：\n\n--ignore-pull-failures 忽略拉取镜像过程中的错误。\n#push\n推送服务依赖的镜像到 Docker 镜像仓库。\n\n#restart\n格式为 docker-compose restart [options] [SERVICE...]。\n\n重启项目中的服务。\n\n选项：\n\n-t, --timeout TIMEOUT 指定重启前停止容器的超时（默认为 10 秒）。\n#rm\n格式为 docker-compose rm [options] [SERVICE...]。\n\n删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。\n\n选项：\n\n-f, --force 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。\n-v 删除容器所挂载的数据卷。\n#run\n格式为 docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]。\n\n在指定服务上执行一个命令。\n\n例如：\n\n$ docker-compose run ubuntu ping docker.com\n将会启动一个 ubuntu 服务容器，并执行 ping docker.com 命令。\n\n默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。\n\n该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。\n\n两个不同点：\n\n给定命令将会覆盖原有的自动运行命令；\n不会自动创建端口，以避免冲突。\n如果不希望自动启动关联的容器，可以使用 --no-deps 选项，例如\n\n$ docker-compose run --no-deps web python manage.py shell\n将不会启动 web 容器所关联的其它容器。\n\n选项：\n\n-d 后台运行容器。\n--name NAME 为容器指定一个名字。\n--entrypoint CMD 覆盖默认的容器启动指令。\n-e KEY=VAL 设置环境变量值，可多次使用选项来设置多个环境变量。\n-u, --user=\"\" 指定运行容器的用户名或者 uid。\n--no-deps 不自动启动关联的服务容器。\n--rm 运行命令后自动删除容器，d 模式下将忽略。\n-p, --publish=[] 映射容器端口到本地主机。\n--service-ports 配置服务端口并映射到本地主机。\n-T 不分配伪 tty，意味着依赖 tty 的指令将无法运行。\n#scale\n格式为 docker-compose scale [options] [SERVICE=NUM...]。\n\n设置指定服务运行的容器个数。\n\n通过 service=num 的参数来设置数量。例如：\n\n$ docker-compose scale web=3 db=2\n将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。\n\n一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。\n\n选项：\n\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。\n#start\n格式为 docker-compose start [SERVICE...]。\n\n启动已经存在的服务容器。\n\n#stop\n格式为 docker-compose stop [options] [SERVICE...]。\n\n停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。\n\n选项：\n\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。\n#top\n查看各个服务容器内运行的进程。\n\n#unpause\n格式为 docker-compose unpause [SERVICE...]。\n\n恢复处于暂停状态中的服务。\n\n#up\n格式为 docker-compose up [options] [SERVICE...]。\n\n该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。\n\n链接的服务都将会被自动启动，除非已经处于运行状态。\n\n可以说，大部分时候都可以直接通过该命令来启动一个项目。\n\n默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。\n\n当通过 Ctrl-C 停止命令时，所有容器将会停止。\n\n如果使用 docker-compose up -d，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。\n\n默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 docker-compose up --no-recreate。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 docker-compose up --no-deps -d <SERVICE_NAME> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。\n\n选项：\n\n-d 在后台运行服务容器。\n--no-color 不使用颜色来区分不同的服务的控制台输出。\n--no-deps 不启动服务所链接的容器。\n--force-recreate 强制重新创建容器，不能与 --no-recreate 同时使用。\n--no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。\n--no-build 不自动构建缺失的服务镜像。\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。\n#version\n格式为 docker-compose version。\n\n打印版本信息。\n\n## 参考资料\n> \n","slug":"Docker学习16-Docker-Compose-命令说明","published":1,"updated":"2021-04-20T13:28:10.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd1z000rzgl19a9izi0x","content":"<h1><span id=\"docker-compose-命令说明\">Docker Compose 命令说明</span></h1>\n<p>#命令对象与格式<br>\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>\n<p>执行 docker-compose [COMMAND] --help 或者 docker-compose help [COMMAND] 可以查看具体某个命令的使用格式。</p>\n<p>docker-compose 命令的基本的使用格式是</p>\n<p>docker-compose [-f=<arg>…] [options] [COMMAND] [ARGS…]<br>\n#命令选项<br>\n-f, --file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。<br>\n-p, --project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名。<br>\n–x-networking 使用 Docker 的可拔插网络后端特性<br>\n–x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge<br>\n–verbose 输出更多调试信息。<br>\n-v, --version 打印版本并退出。<br>\n#build<br>\n格式为 docker-compose build [options] [SERVICE…]。</arg></p>\n<p>构建（重新构建）项目中的服务容器。</p>\n<p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p>\n<p>可以随时在项目目录下运行 docker-compose build 来重新构建服务。</p>\n<p>选项包括：</p>\n<p>–force-rm 删除构建过程中的临时容器。<br>\n–no-cache 构建镜像过程中不使用 cache（这将加长构建过程）。<br>\n–pull 始终尝试通过 pull 来获取更新版本的镜像。<br>\n#config<br>\n验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p>\n<p>#down<br>\n此命令将会停止 up 命令所启动的容器，并移除网络</p>\n<p>#exec<br>\n进入指定的容器。</p>\n<p>#help<br>\n获得一个命令的帮助。</p>\n<p>#images<br>\n列出 Compose 文件中包含的镜像。</p>\n<p>#kill<br>\n格式为 docker-compose kill [options] [SERVICE…]。</p>\n<p>通过发送 SIGKILL 信号来强制停止服务容器。</p>\n<p>支持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。</p>\n<p>$ docker-compose kill -s SIGINT<br>\n#logs<br>\n格式为 docker-compose logs [options] [SERVICE…]。</p>\n<p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 --no-color 来关闭颜色。</p>\n<p>该命令在调试问题的时候十分有用。</p>\n<p>#pause<br>\n格式为 docker-compose pause [SERVICE…]。</p>\n<p>暂停一个服务容器。</p>\n<p>#port<br>\n格式为 docker-compose port [options] SERVICE PRIVATE_PORT。</p>\n<p>打印某个容器端口所映射的公共端口。</p>\n<p>选项：</p>\n<p>–protocol=proto 指定端口协议，tcp（默认值）或者 udp。<br>\n–index=index 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。<br>\n#ps<br>\n格式为 docker-compose ps [options] [SERVICE…]。</p>\n<p>列出项目中目前的所有容器。</p>\n<p>选项：</p>\n<p>-q 只打印容器的 ID 信息。<br>\n#pull<br>\n格式为 docker-compose pull [options] [SERVICE…]。</p>\n<p>拉取服务依赖的镜像。</p>\n<p>选项：</p>\n<p>–ignore-pull-failures 忽略拉取镜像过程中的错误。<br>\n#push<br>\n推送服务依赖的镜像到 Docker 镜像仓库。</p>\n<p>#restart<br>\n格式为 docker-compose restart [options] [SERVICE…]。</p>\n<p>重启项目中的服务。</p>\n<p>选项：</p>\n<p>-t, --timeout TIMEOUT 指定重启前停止容器的超时（默认为 10 秒）。<br>\n#rm<br>\n格式为 docker-compose rm [options] [SERVICE…]。</p>\n<p>删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。</p>\n<p>选项：</p>\n<p>-f, --force 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。<br>\n-v 删除容器所挂载的数据卷。<br>\n#run<br>\n格式为 docker-compose run [options] [-p PORT…] [-e KEY=VAL…] SERVICE [COMMAND] [ARGS…]。</p>\n<p>在指定服务上执行一个命令。</p>\n<p>例如：</p>\n<p>$ docker-compose run ubuntu ping <a href=\"http://docker.com\" target=\"_blank\" rel=\"noopener\">docker.com</a><br>\n将会启动一个 ubuntu 服务容器，并执行 ping <a href=\"http://docker.com\" target=\"_blank\" rel=\"noopener\">docker.com</a> 命令。</p>\n<p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p>\n<p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p>\n<p>两个不同点：</p>\n<p>给定命令将会覆盖原有的自动运行命令；<br>\n不会自动创建端口，以避免冲突。<br>\n如果不希望自动启动关联的容器，可以使用 --no-deps 选项，例如</p>\n<p>$ docker-compose run --no-deps web python <a href=\"http://manage.py\" target=\"_blank\" rel=\"noopener\">manage.py</a> shell<br>\n将不会启动 web 容器所关联的其它容器。</p>\n<p>选项：</p>\n<p>-d 后台运行容器。<br>\n–name NAME 为容器指定一个名字。<br>\n–entrypoint CMD 覆盖默认的容器启动指令。<br>\n-e KEY=VAL 设置环境变量值，可多次使用选项来设置多个环境变量。<br>\n-u, --user=&quot;&quot; 指定运行容器的用户名或者 uid。<br>\n–no-deps 不自动启动关联的服务容器。<br>\n–rm 运行命令后自动删除容器，d 模式下将忽略。<br>\n-p, --publish=[] 映射容器端口到本地主机。<br>\n–service-ports 配置服务端口并映射到本地主机。<br>\n-T 不分配伪 tty，意味着依赖 tty 的指令将无法运行。<br>\n#scale<br>\n格式为 docker-compose scale [options] [SERVICE=NUM…]。</p>\n<p>设置指定服务运行的容器个数。</p>\n<p>通过 service=num 的参数来设置数量。例如：</p>\n<p>$ docker-compose scale web=3 db=2<br>\n将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p>\n<p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p>\n<p>选项：</p>\n<p>-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。<br>\n#start<br>\n格式为 docker-compose start [SERVICE…]。</p>\n<p>启动已经存在的服务容器。</p>\n<p>#stop<br>\n格式为 docker-compose stop [options] [SERVICE…]。</p>\n<p>停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。</p>\n<p>选项：</p>\n<p>-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。<br>\n#top<br>\n查看各个服务容器内运行的进程。</p>\n<p>#unpause<br>\n格式为 docker-compose unpause [SERVICE…]。</p>\n<p>恢复处于暂停状态中的服务。</p>\n<p>#up<br>\n格式为 docker-compose up [options] [SERVICE…]。</p>\n<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>\n<p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>\n<p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>\n<p>默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>\n<p>当通过 Ctrl-C 停止命令时，所有容器将会停止。</p>\n<p>如果使用 docker-compose up -d，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>\n<p>默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 docker-compose up --no-recreate。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 docker-compose up --no-deps -d &lt;SERVICE_NAME&gt; 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p>\n<p>选项：</p>\n<p>-d 在后台运行服务容器。<br>\n–no-color 不使用颜色来区分不同的服务的控制台输出。<br>\n–no-deps 不启动服务所链接的容器。<br>\n–force-recreate 强制重新创建容器，不能与 --no-recreate 同时使用。<br>\n–no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。<br>\n–no-build 不自动构建缺失的服务镜像。<br>\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。<br>\n#version<br>\n格式为 docker-compose version。</p>\n<p>打印版本信息。</p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker Compose 命令说明</h1>\n<p>#命令对象与格式<br>\n对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>\n<p>执行 docker-compose [COMMAND] --help 或者 docker-compose help [COMMAND] 可以查看具体某个命令的使用格式。</p>\n<p>docker-compose 命令的基本的使用格式是</p>\n<p>docker-compose [-f=<arg>…] [options] [COMMAND] [ARGS…]<br>\n#命令选项<br>\n-f, --file FILE 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。<br>\n-p, --project-name NAME 指定项目名称，默认将使用所在目录名称作为项目名。<br>\n–x-networking 使用 Docker 的可拔插网络后端特性<br>\n–x-network-driver DRIVER 指定网络后端的驱动，默认为 bridge<br>\n–verbose 输出更多调试信息。<br>\n-v, --version 打印版本并退出。<br>\n#build<br>\n格式为 docker-compose build [options] [SERVICE…]。</arg></p>\n<p>构建（重新构建）项目中的服务容器。</p>\n<p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p>\n<p>可以随时在项目目录下运行 docker-compose build 来重新构建服务。</p>\n<p>选项包括：</p>\n<p>–force-rm 删除构建过程中的临时容器。<br>\n–no-cache 构建镜像过程中不使用 cache（这将加长构建过程）。<br>\n–pull 始终尝试通过 pull 来获取更新版本的镜像。<br>\n#config<br>\n验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p>\n<p>#down<br>\n此命令将会停止 up 命令所启动的容器，并移除网络</p>\n<p>#exec<br>\n进入指定的容器。</p>\n<p>#help<br>\n获得一个命令的帮助。</p>\n<p>#images<br>\n列出 Compose 文件中包含的镜像。</p>\n<p>#kill<br>\n格式为 docker-compose kill [options] [SERVICE…]。</p>\n<p>通过发送 SIGKILL 信号来强制停止服务容器。</p>\n<p>支持通过 -s 参数来指定发送的信号，例如通过如下指令发送 SIGINT 信号。</p>\n<p>$ docker-compose kill -s SIGINT<br>\n#logs<br>\n格式为 docker-compose logs [options] [SERVICE…]。</p>\n<p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 --no-color 来关闭颜色。</p>\n<p>该命令在调试问题的时候十分有用。</p>\n<p>#pause<br>\n格式为 docker-compose pause [SERVICE…]。</p>\n<p>暂停一个服务容器。</p>\n<p>#port<br>\n格式为 docker-compose port [options] SERVICE PRIVATE_PORT。</p>\n<p>打印某个容器端口所映射的公共端口。</p>\n<p>选项：</p>\n<p>–protocol=proto 指定端口协议，tcp（默认值）或者 udp。<br>\n–index=index 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。<br>\n#ps<br>\n格式为 docker-compose ps [options] [SERVICE…]。</p>\n<p>列出项目中目前的所有容器。</p>\n<p>选项：</p>\n<p>-q 只打印容器的 ID 信息。<br>\n#pull<br>\n格式为 docker-compose pull [options] [SERVICE…]。</p>\n<p>拉取服务依赖的镜像。</p>\n<p>选项：</p>\n<p>–ignore-pull-failures 忽略拉取镜像过程中的错误。<br>\n#push<br>\n推送服务依赖的镜像到 Docker 镜像仓库。</p>\n<p>#restart<br>\n格式为 docker-compose restart [options] [SERVICE…]。</p>\n<p>重启项目中的服务。</p>\n<p>选项：</p>\n<p>-t, --timeout TIMEOUT 指定重启前停止容器的超时（默认为 10 秒）。<br>\n#rm<br>\n格式为 docker-compose rm [options] [SERVICE…]。</p>\n<p>删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。</p>\n<p>选项：</p>\n<p>-f, --force 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。<br>\n-v 删除容器所挂载的数据卷。<br>\n#run<br>\n格式为 docker-compose run [options] [-p PORT…] [-e KEY=VAL…] SERVICE [COMMAND] [ARGS…]。</p>\n<p>在指定服务上执行一个命令。</p>\n<p>例如：</p>\n<p>$ docker-compose run ubuntu ping <a href=\"http://docker.com\" target=\"_blank\" rel=\"noopener\">docker.com</a><br>\n将会启动一个 ubuntu 服务容器，并执行 ping <a href=\"http://docker.com\" target=\"_blank\" rel=\"noopener\">docker.com</a> 命令。</p>\n<p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p>\n<p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p>\n<p>两个不同点：</p>\n<p>给定命令将会覆盖原有的自动运行命令；<br>\n不会自动创建端口，以避免冲突。<br>\n如果不希望自动启动关联的容器，可以使用 --no-deps 选项，例如</p>\n<p>$ docker-compose run --no-deps web python <a href=\"http://manage.py\" target=\"_blank\" rel=\"noopener\">manage.py</a> shell<br>\n将不会启动 web 容器所关联的其它容器。</p>\n<p>选项：</p>\n<p>-d 后台运行容器。<br>\n–name NAME 为容器指定一个名字。<br>\n–entrypoint CMD 覆盖默认的容器启动指令。<br>\n-e KEY=VAL 设置环境变量值，可多次使用选项来设置多个环境变量。<br>\n-u, --user=&quot;&quot; 指定运行容器的用户名或者 uid。<br>\n–no-deps 不自动启动关联的服务容器。<br>\n–rm 运行命令后自动删除容器，d 模式下将忽略。<br>\n-p, --publish=[] 映射容器端口到本地主机。<br>\n–service-ports 配置服务端口并映射到本地主机。<br>\n-T 不分配伪 tty，意味着依赖 tty 的指令将无法运行。<br>\n#scale<br>\n格式为 docker-compose scale [options] [SERVICE=NUM…]。</p>\n<p>设置指定服务运行的容器个数。</p>\n<p>通过 service=num 的参数来设置数量。例如：</p>\n<p>$ docker-compose scale web=3 db=2<br>\n将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p>\n<p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p>\n<p>选项：</p>\n<p>-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。<br>\n#start<br>\n格式为 docker-compose start [SERVICE…]。</p>\n<p>启动已经存在的服务容器。</p>\n<p>#stop<br>\n格式为 docker-compose stop [options] [SERVICE…]。</p>\n<p>停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。</p>\n<p>选项：</p>\n<p>-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。<br>\n#top<br>\n查看各个服务容器内运行的进程。</p>\n<p>#unpause<br>\n格式为 docker-compose unpause [SERVICE…]。</p>\n<p>恢复处于暂停状态中的服务。</p>\n<p>#up<br>\n格式为 docker-compose up [options] [SERVICE…]。</p>\n<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>\n<p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>\n<p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>\n<p>默认情况，docker-compose up 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>\n<p>当通过 Ctrl-C 停止命令时，所有容器将会停止。</p>\n<p>如果使用 docker-compose up -d，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>\n<p>默认情况，如果服务容器已经存在，docker-compose up 将会尝试停止容器，然后重新创建（保持使用 volumes-from 挂载的卷），以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 docker-compose up --no-recreate。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 docker-compose up --no-deps -d &lt;SERVICE_NAME&gt; 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p>\n<p>选项：</p>\n<p>-d 在后台运行服务容器。<br>\n–no-color 不使用颜色来区分不同的服务的控制台输出。<br>\n–no-deps 不启动服务所链接的容器。<br>\n–force-recreate 强制重新创建容器，不能与 --no-recreate 同时使用。<br>\n–no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。<br>\n–no-build 不自动构建缺失的服务镜像。<br>\n-t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒）。<br>\n#version<br>\n格式为 docker-compose version。</p>\n<p>打印版本信息。</p>\n<h2>参考资料</h2>\n<blockquote></blockquote>\n"},{"title":"Docker学习2-Docker镜像加速器","catalog":true,"date":"2019-09-18T00:56:38.000Z","subtitle":null,"header-img":null,"_content":"# Docker学习2-Docker镜像加速器\n\n## Docker学习01-Docker镜像加速器\n对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n~~~\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n ]\n}\n~~~\n注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。\n之后重新启动服务。\n\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n\n命令行执行`docker info`\n查看内容\n\n~~~\n Insecure Registries:\n  127.0.0.0/8\n Registry Mirrors:\n  https://registry.docker-cn.com/\n Live Restore Enabled: false\n~~~\n\n## 参考资料\n> \n","source":"_posts/Docker学习2-Docker镜像加速器.md","raw":"---\ntitle: Docker学习2-Docker镜像加速器\ncatalog: true\ntags: [Docker]\ndate: 2019-09-18 08:56:38\nsubtitle:\nheader-img:\n---\n# Docker学习2-Docker镜像加速器\n\n## Docker学习01-Docker镜像加速器\n对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）\n~~~\n{\n  \"registry-mirrors\": [\n    \"https://registry.docker-cn.com\"\n ]\n}\n~~~\n注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。\n之后重新启动服务。\n\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n\n命令行执行`docker info`\n查看内容\n\n~~~\n Insecure Registries:\n  127.0.0.0/8\n Registry Mirrors:\n  https://registry.docker-cn.com/\n Live Restore Enabled: false\n~~~\n\n## 参考资料\n> \n","slug":"Docker学习2-Docker镜像加速器","published":1,"updated":"2021-04-20T13:28:10.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd20000szgl1eoefmc95","content":"<h1><span id=\"docker学习2-docker镜像加速器\">Docker学习2-Docker镜像加速器</span></h1>\n<h2><span id=\"docker学习01-docker镜像加速器\">Docker学习01-Docker镜像加速器</span></h2>\n<p>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://registry.docker-cn.com\"</span></span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。<br>\n之后重新启动服务。</p>\n<p>$ sudo systemctl daemon-reload<br>\n$ sudo systemctl restart docker</p>\n<p>命令行执行<code>docker info</code><br>\n查看内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Insecure Registries:</span></span><br><span class=\"line\"> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/8</span></span><br><span class=\"line\"><span class=\"attr\">Registry Mirrors:</span></span><br><span class=\"line\"> <span class=\"string\">https://registry.docker-cn.com/</span></span><br><span class=\"line\"><span class=\"attr\">Live Restore Enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker学习2-Docker镜像加速器</h1>\n<h2>Docker学习01-Docker镜像加速器</h2>\n<p>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://registry.docker-cn.com\"</span></span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。<br>\n之后重新启动服务。</p>\n<p>$ sudo systemctl daemon-reload<br>\n$ sudo systemctl restart docker</p>\n<p>命令行执行<code>docker info</code><br>\n查看内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Insecure Registries:</span></span><br><span class=\"line\"> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/8</span></span><br><span class=\"line\"><span class=\"attr\">Registry Mirrors:</span></span><br><span class=\"line\"> <span class=\"string\">https://registry.docker-cn.com/</span></span><br><span class=\"line\"><span class=\"attr\">Live Restore Enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2>参考资料</h2>\n<blockquote></blockquote>\n"},{"title":"Docker学习17-Docker-Compose-部署项目到容器","catalog":true,"date":"2019-09-29T06:31:35.000Z","subtitle":null,"header-img":null,"_content":"\n# Docker学习17-Docker-Compose-部署项目到容器\n\n## 删除原先所有容器\n~~~\n[root@MyCentOS]/usr/local/docker# docker rm $(docker ps -a) \ntripweb\n1e07f46eb80a\n00e3d56be365\nd53272c36764\ntomcat\n849e5b576998\n~~~\n\n## 创建项目tripweb\n~~~\ncd /usr/local/docker\n\nmkdir tripweb\n~~~\n## 创建docker-compose.yml\n~~~\ncd tripweb\n\nvim docker-compose.yml\n\nversion: '3'\nservices:\n  web:\n    restart: always\n    image: tomcat\n    container_name: web\n    ports:\n      - 8081:8080\n    volumes: # 挂载卷\n      - /usr/local/docker/tripweb/ROOT:/usr/local/tomcat/webapps/ROOT\n  mysql:\n    restart: always\n    image: mysql:5.7.22\n    container_name: mysql    \n    ports:\n      - 3307:3306\n    environment:\n      TZ: Asia/Shanghai # 时区\n      MYSQL_ROOT_PASSWORD: root\n    command: # mysql配置\n      --character-set-server=utf8\n      --collation-server=utf8_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n    volumes: # 挂载卷\n      - /usr/local/docker/mysql/conf:/etc/mysql\n      - /usr/local/docker/mysql/logs:/var/log/mysql\n      - /usr/local/docker/mysql/data:/var/lib/mysql\n~~~\n上面的:\n~~~\nvolumes: # 挂载卷\n      - /usr/local/docker/mysql/conf:/etc/mysql\n      - /usr/local/docker/mysql/logs:/var/log/mysql\n      - /usr/local/docker/mysql/data:/var/lib/mysql\n~~~\n可以写成\n~~~\nmysql:\n    volumes: # 挂载卷\n        - mysql-data:/var/lib/mysql\nvolumes: # 挂载卷\n    - mysql-data:\n~~~\n## 守护态运行\n~~~\n[root@MyCentOS]/usr/local/docker/tripweb# docker-compose up -d\nCreating mysql ... done\nCreating web   ... done\n~~~\n~~~\n➜  tripweb sudo docker ps -a   \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n8a1c9fae9d1c        mysql:5.7.22        \"docker-entrypoint.s…\"   17 seconds ago      Up 15 seconds       0.0.0.0:3307->3306/tcp   mysql\nc771ba85ec82        tomcat              \"catalina.sh run\"        17 seconds ago      Up 15 seconds       0.0.0.0:8081->8080/tcp   web\n~~~\n\n## 查看结果\n![](Docker学习17-Docker-Compose-部署项目到容器/1.png)\n![](Docker学习17-Docker-Compose-部署项目到容器/2.png)\n\n## 部署tripweb项目到容器\n~~~\n[root@MyCentOS]/usr/local/docker/tripweb# cd /root \n[root@MyCentOS]~# ls\nauthorized_keys                              mysql-community-release-el7-5.noarch.rpm    trip-web.war\nmysql57-community-release-el7-10.noarch.rpm  mysql-community-release-el7-5.noarch.rpm.1\nmysql57-community-release-el7-11.noarch.rpm  mysql-community-release-el7-5.noarch.rpm.2\n[root@MyCentOS]~# cp trip-web.war /usr/local/docker/tripweb\n[root@MyCentOS]~# cd /usr/local/docker/tripweb\n[root@MyCentOS]/usr/local/docker/tripweb# ls\ndocker-compose.yml  ROOT  trip-web.war\n[root@MyCentOS]/usr/local/docker/tripweb# mv trip-web.war ROOT \n[root@MyCentOS]/usr/local/docker/tripweb# ls\ndocker-compose.yml  ROOT\n[root@MyCentOS]/usr/local/docker/tripweb# cd ROOT \n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# ls\ntrip-web.war\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# unzip -oq trip-web.war -d .\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# ls\nMETA-INF  static  trip-web.war  WEB-INF\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# rm trip-web.war \n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# ls\nMETA-INF  static  WEB-INF\n~~~\n`unzip -oq trip-web.war -d .`解压war包\n\n## 删除正在运行的容器\n~~~\n➜  tripweb sudo docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n8a1c9fae9d1c        mysql:5.7.22        \"docker-entrypoint.s…\"   12 minutes ago      Up 12 minutes       0.0.0.0:3307->3306/tcp   mysql\nc771ba85ec82        tomcat              \"catalina.sh run\"        12 minutes ago      Up 12 minutes       0.0.0.0:8081->8080/tcp   web\n➜  tripweb sudo docker rm -f 8a c7\n8a\nc7\n~~~\n## 运行容器\n`docker-compose up -d`\n守护态运行\n~~~\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# docker-compose up -d                       \nCreating mysql ... done\nCreating web   ... done\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# \n~~~\n\n## 监听日志的变化\ndocker logs -f myshop\n\n## 查看结果\n![](Docker学习17-Docker-Compose-部署项目到容器/3.png)\n\n## 参考资料\n> https://www.funtl.com/zh/docker-compose/Docker-Compose-模板文件.html#build\n","source":"_posts/Docker学习17-Docker-Compose-部署项目到容器.md","raw":"---\ntitle: Docker学习17-Docker-Compose-部署项目到容器\ncatalog: true\ntags: []\ndate: 2019-09-29 14:31:35\nsubtitle:\nheader-img:\n---\n\n# Docker学习17-Docker-Compose-部署项目到容器\n\n## 删除原先所有容器\n~~~\n[root@MyCentOS]/usr/local/docker# docker rm $(docker ps -a) \ntripweb\n1e07f46eb80a\n00e3d56be365\nd53272c36764\ntomcat\n849e5b576998\n~~~\n\n## 创建项目tripweb\n~~~\ncd /usr/local/docker\n\nmkdir tripweb\n~~~\n## 创建docker-compose.yml\n~~~\ncd tripweb\n\nvim docker-compose.yml\n\nversion: '3'\nservices:\n  web:\n    restart: always\n    image: tomcat\n    container_name: web\n    ports:\n      - 8081:8080\n    volumes: # 挂载卷\n      - /usr/local/docker/tripweb/ROOT:/usr/local/tomcat/webapps/ROOT\n  mysql:\n    restart: always\n    image: mysql:5.7.22\n    container_name: mysql    \n    ports:\n      - 3307:3306\n    environment:\n      TZ: Asia/Shanghai # 时区\n      MYSQL_ROOT_PASSWORD: root\n    command: # mysql配置\n      --character-set-server=utf8\n      --collation-server=utf8_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n      --max_allowed_packet=128M\n      --sql-mode=\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"\n    volumes: # 挂载卷\n      - /usr/local/docker/mysql/conf:/etc/mysql\n      - /usr/local/docker/mysql/logs:/var/log/mysql\n      - /usr/local/docker/mysql/data:/var/lib/mysql\n~~~\n上面的:\n~~~\nvolumes: # 挂载卷\n      - /usr/local/docker/mysql/conf:/etc/mysql\n      - /usr/local/docker/mysql/logs:/var/log/mysql\n      - /usr/local/docker/mysql/data:/var/lib/mysql\n~~~\n可以写成\n~~~\nmysql:\n    volumes: # 挂载卷\n        - mysql-data:/var/lib/mysql\nvolumes: # 挂载卷\n    - mysql-data:\n~~~\n## 守护态运行\n~~~\n[root@MyCentOS]/usr/local/docker/tripweb# docker-compose up -d\nCreating mysql ... done\nCreating web   ... done\n~~~\n~~~\n➜  tripweb sudo docker ps -a   \nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n8a1c9fae9d1c        mysql:5.7.22        \"docker-entrypoint.s…\"   17 seconds ago      Up 15 seconds       0.0.0.0:3307->3306/tcp   mysql\nc771ba85ec82        tomcat              \"catalina.sh run\"        17 seconds ago      Up 15 seconds       0.0.0.0:8081->8080/tcp   web\n~~~\n\n## 查看结果\n![](Docker学习17-Docker-Compose-部署项目到容器/1.png)\n![](Docker学习17-Docker-Compose-部署项目到容器/2.png)\n\n## 部署tripweb项目到容器\n~~~\n[root@MyCentOS]/usr/local/docker/tripweb# cd /root \n[root@MyCentOS]~# ls\nauthorized_keys                              mysql-community-release-el7-5.noarch.rpm    trip-web.war\nmysql57-community-release-el7-10.noarch.rpm  mysql-community-release-el7-5.noarch.rpm.1\nmysql57-community-release-el7-11.noarch.rpm  mysql-community-release-el7-5.noarch.rpm.2\n[root@MyCentOS]~# cp trip-web.war /usr/local/docker/tripweb\n[root@MyCentOS]~# cd /usr/local/docker/tripweb\n[root@MyCentOS]/usr/local/docker/tripweb# ls\ndocker-compose.yml  ROOT  trip-web.war\n[root@MyCentOS]/usr/local/docker/tripweb# mv trip-web.war ROOT \n[root@MyCentOS]/usr/local/docker/tripweb# ls\ndocker-compose.yml  ROOT\n[root@MyCentOS]/usr/local/docker/tripweb# cd ROOT \n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# ls\ntrip-web.war\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# unzip -oq trip-web.war -d .\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# ls\nMETA-INF  static  trip-web.war  WEB-INF\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# rm trip-web.war \n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# ls\nMETA-INF  static  WEB-INF\n~~~\n`unzip -oq trip-web.war -d .`解压war包\n\n## 删除正在运行的容器\n~~~\n➜  tripweb sudo docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n8a1c9fae9d1c        mysql:5.7.22        \"docker-entrypoint.s…\"   12 minutes ago      Up 12 minutes       0.0.0.0:3307->3306/tcp   mysql\nc771ba85ec82        tomcat              \"catalina.sh run\"        12 minutes ago      Up 12 minutes       0.0.0.0:8081->8080/tcp   web\n➜  tripweb sudo docker rm -f 8a c7\n8a\nc7\n~~~\n## 运行容器\n`docker-compose up -d`\n守护态运行\n~~~\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# docker-compose up -d                       \nCreating mysql ... done\nCreating web   ... done\n[root@MyCentOS]/usr/local/docker/tripweb/ROOT# \n~~~\n\n## 监听日志的变化\ndocker logs -f myshop\n\n## 查看结果\n![](Docker学习17-Docker-Compose-部署项目到容器/3.png)\n\n## 参考资料\n> https://www.funtl.com/zh/docker-compose/Docker-Compose-模板文件.html#build\n","slug":"Docker学习17-Docker-Compose-部署项目到容器","published":1,"updated":"2021-04-20T13:28:10.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd21000uzgl1u2ysaw1q","content":"<h1><span id=\"docker学习17-docker-compose-部署项目到容器\">Docker学习17-Docker-Compose-部署项目到容器</span></h1>\n<h2><span id=\"删除原先所有容器\">删除原先所有容器</span></h2>\n<figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"meta\">@MyCentOS</span>]/usr/<span class=\"keyword\">local</span>/docker<span class=\"comment\"># docker rm $(docker ps -a) </span></span><br><span class=\"line\">tripweb</span><br><span class=\"line\"><span class=\"number\">1e07</span>f46eb80a</span><br><span class=\"line\"><span class=\"number\">00e3</span>d56be365</span><br><span class=\"line\">d53272c36764</span><br><span class=\"line\">tomcat</span><br><span class=\"line\"><span class=\"number\">849e5</span>b576998</span><br></pre></td></tr></table></figure>\n<h2><span id=\"创建项目tripweb\">创建项目tripweb</span></h2>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> /usr/<span class=\"keyword\">local</span>/docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> tripweb</span><br></pre></td></tr></table></figure>\n<h2><span id=\"创建docker-composeyml\">创建docker-compose.yml</span></h2>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd tripweb</span><br><span class=\"line\"></span><br><span class=\"line\">vim docker-compose.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  web:</span></span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    image:</span> tomcat</span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> web</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">8081</span>:<span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span> <span class=\"meta\"># 挂载卷</span></span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>tripweb/ROOT:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT</span><br><span class=\"line\"><span class=\"symbol\">  mysql:</span></span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    image:</span> mysql:<span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> mysql    </span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">3307</span>:<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      TZ:</span> Asia/Shanghai <span class=\"meta\"># 时区</span></span><br><span class=\"line\"><span class=\"symbol\">      MYSQL_ROOT_PASSWORD:</span> root</span><br><span class=\"line\"><span class=\"symbol\">    command:</span> <span class=\"meta\"># mysql配置</span></span><br><span class=\"line\">      --character-set-server=utf8</span><br><span class=\"line\">      --collation-server=utf8_general_ci</span><br><span class=\"line\">      --explicit_defaults_for_timestamp=true</span><br><span class=\"line\">      --lower_case_table_names=<span class=\"number\">1</span></span><br><span class=\"line\">      --max_allowed_packet=<span class=\"number\">128</span>M</span><br><span class=\"line\">      --sql-mode=<span class=\"string\">\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span> <span class=\"meta\"># 挂载卷</span></span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>mysql/conf:<span class=\"meta-keyword\">/etc/</span>mysql</span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>mysql/logs:<span class=\"meta-keyword\">/var/</span>log/mysql</span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>mysql/data:<span class=\"meta-keyword\">/var/</span>lib/mysql</span><br></pre></td></tr></table></figure>\n<p>上面的:</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">volumes:</span> <span class=\"comment\"># 挂载卷</span></span><br><span class=\"line\">      - <span class=\"regexp\">/usr/local</span><span class=\"regexp\">/docker/mysql</span><span class=\"regexp\">/conf:/etc</span><span class=\"regexp\">/mysql</span></span><br><span class=\"line\"><span class=\"regexp\">      - /usr</span><span class=\"regexp\">/local/docker</span><span class=\"regexp\">/mysql/logs</span>:<span class=\"regexp\">/var/log</span><span class=\"regexp\">/mysql</span></span><br><span class=\"line\"><span class=\"regexp\">      - /usr</span><span class=\"regexp\">/local/docker</span><span class=\"regexp\">/mysql/data</span>:<span class=\"regexp\">/var/lib</span><span class=\"regexp\">/mysql</span></span><br></pre></td></tr></table></figure>\n<p>可以写成</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">mysql:</span></span><br><span class=\"line\">    <span class=\"symbol\">volumes:</span> <span class=\"comment\"># 挂载卷</span></span><br><span class=\"line\">        - mysql-<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span></span></span><br><span class=\"line\"><span class=\"symbol\">volumes:</span> <span class=\"comment\"># 挂载卷</span></span><br><span class=\"line\">    - mysql-<span class=\"symbol\">data:</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"守护态运行\">守护态运行</span></h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/<span class=\"built_in\">local</span>/docker/tripweb<span class=\"comment\"># docker-compose up -d</span></span><br><span class=\"line\">Creating mysql ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating web   ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tripweb</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span> <span class=\"string\">-a</span>   </span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">8a1c9fae9d1c</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">17</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">15</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">c771ba85ec82</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">15</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">web</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<p><img src=\"/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/1.png\" alt><br>\n<img src=\"/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/2.png\" alt></p>\n<h2><span id=\"部署tripweb项目到容器\">部署tripweb项目到容器</span></h2>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># cd /root </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># ls</span></span><br><span class=\"line\">authorized_keys                              mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm    trip-web.war</span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-10.</span>noarch.rpm  mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.1</span></span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-11.</span>noarch.rpm  mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.2</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cp trip-web.war /usr/local/docker/tripweb</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /usr/local/docker/tripweb</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># ls</span></span><br><span class=\"line\">docker-compose.yml  ROOT  trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># mv trip-web.war ROOT </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># ls</span></span><br><span class=\"line\">docker-compose.yml  ROOT</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># cd ROOT </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># unzip -oq trip-web.war -d .</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  trip-web.war  WEB-INF</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># rm trip-web.war </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  WEB-INF</span><br></pre></td></tr></table></figure>\n<p><code>unzip -oq trip-web.war -d .</code>解压war包</p>\n<h2><span id=\"删除正在运行的容器\">删除正在运行的容器</span></h2>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tripweb</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">8a1c9fae9d1c</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">12</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">12</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">c771ba85ec82</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">12</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">12</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tripweb</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">-f</span> <span class=\"string\">8a</span> <span class=\"string\">c7</span></span><br><span class=\"line\"><span class=\"string\">8a</span></span><br><span class=\"line\"><span class=\"string\">c7</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"运行容器\">运行容器</span></h2>\n<p><code>docker-compose up -d</code><br>\n守护态运行</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># docker-compose up -d                       </span></span><br><span class=\"line\">Creating mysql ... done</span><br><span class=\"line\">Creating web   ... done</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"监听日志的变化\">监听日志的变化</span></h2>\n<p>docker logs -f myshop</p>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<p><img src=\"/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/3.png\" alt></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker-compose/Docker-Compose-%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6.html#build\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/Docker-Compose-模板文件.html#build</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker学习17-Docker-Compose-部署项目到容器</h1>\n<h2>删除原先所有容器</h2>\n<figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"meta\">@MyCentOS</span>]/usr/<span class=\"keyword\">local</span>/docker<span class=\"comment\"># docker rm $(docker ps -a) </span></span><br><span class=\"line\">tripweb</span><br><span class=\"line\"><span class=\"number\">1e07</span>f46eb80a</span><br><span class=\"line\"><span class=\"number\">00e3</span>d56be365</span><br><span class=\"line\">d53272c36764</span><br><span class=\"line\">tomcat</span><br><span class=\"line\"><span class=\"number\">849e5</span>b576998</span><br></pre></td></tr></table></figure>\n<h2>创建项目tripweb</h2>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> /usr/<span class=\"keyword\">local</span>/docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> tripweb</span><br></pre></td></tr></table></figure>\n<h2>创建docker-compose.yml</h2>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd tripweb</span><br><span class=\"line\"></span><br><span class=\"line\">vim docker-compose.yml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  web:</span></span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    image:</span> tomcat</span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> web</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">8081</span>:<span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span> <span class=\"meta\"># 挂载卷</span></span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>tripweb/ROOT:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT</span><br><span class=\"line\"><span class=\"symbol\">  mysql:</span></span><br><span class=\"line\"><span class=\"symbol\">    restart:</span> always</span><br><span class=\"line\"><span class=\"symbol\">    image:</span> mysql:<span class=\"number\">5.7</span><span class=\"number\">.22</span></span><br><span class=\"line\"><span class=\"symbol\">    container_name:</span> mysql    </span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"number\">3307</span>:<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      TZ:</span> Asia/Shanghai <span class=\"meta\"># 时区</span></span><br><span class=\"line\"><span class=\"symbol\">      MYSQL_ROOT_PASSWORD:</span> root</span><br><span class=\"line\"><span class=\"symbol\">    command:</span> <span class=\"meta\"># mysql配置</span></span><br><span class=\"line\">      --character-set-server=utf8</span><br><span class=\"line\">      --collation-server=utf8_general_ci</span><br><span class=\"line\">      --explicit_defaults_for_timestamp=true</span><br><span class=\"line\">      --lower_case_table_names=<span class=\"number\">1</span></span><br><span class=\"line\">      --max_allowed_packet=<span class=\"number\">128</span>M</span><br><span class=\"line\">      --sql-mode=<span class=\"string\">\"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO\"</span></span><br><span class=\"line\"><span class=\"symbol\">    volumes:</span> <span class=\"meta\"># 挂载卷</span></span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>mysql/conf:<span class=\"meta-keyword\">/etc/</span>mysql</span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>mysql/logs:<span class=\"meta-keyword\">/var/</span>log/mysql</span><br><span class=\"line\">      - <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>mysql/data:<span class=\"meta-keyword\">/var/</span>lib/mysql</span><br></pre></td></tr></table></figure>\n<p>上面的:</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">volumes:</span> <span class=\"comment\"># 挂载卷</span></span><br><span class=\"line\">      - <span class=\"regexp\">/usr/local</span><span class=\"regexp\">/docker/mysql</span><span class=\"regexp\">/conf:/etc</span><span class=\"regexp\">/mysql</span></span><br><span class=\"line\"><span class=\"regexp\">      - /usr</span><span class=\"regexp\">/local/docker</span><span class=\"regexp\">/mysql/logs</span>:<span class=\"regexp\">/var/log</span><span class=\"regexp\">/mysql</span></span><br><span class=\"line\"><span class=\"regexp\">      - /usr</span><span class=\"regexp\">/local/docker</span><span class=\"regexp\">/mysql/data</span>:<span class=\"regexp\">/var/lib</span><span class=\"regexp\">/mysql</span></span><br></pre></td></tr></table></figure>\n<p>可以写成</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">mysql:</span></span><br><span class=\"line\">    <span class=\"symbol\">volumes:</span> <span class=\"comment\"># 挂载卷</span></span><br><span class=\"line\">        - mysql-<span class=\"symbol\">data:</span>/var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span></span></span><br><span class=\"line\"><span class=\"symbol\">volumes:</span> <span class=\"comment\"># 挂载卷</span></span><br><span class=\"line\">    - mysql-<span class=\"symbol\">data:</span></span><br></pre></td></tr></table></figure>\n<h2>守护态运行</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/<span class=\"built_in\">local</span>/docker/tripweb<span class=\"comment\"># docker-compose up -d</span></span><br><span class=\"line\">Creating mysql ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating web   ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tripweb</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span> <span class=\"string\">-a</span>   </span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">8a1c9fae9d1c</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">17</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">15</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">c771ba85ec82</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">17</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">15</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">web</span></span><br></pre></td></tr></table></figure>\n<h2>查看结果</h2>\n<p><img src=\"/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/1.png\" alt><br>\n<img src=\"/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/2.png\" alt></p>\n<h2>部署tripweb项目到容器</h2>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># cd /root </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># ls</span></span><br><span class=\"line\">authorized_keys                              mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm    trip-web.war</span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-10.</span>noarch.rpm  mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.1</span></span><br><span class=\"line\">mysql57-community-release-el7<span class=\"number\">-11.</span>noarch.rpm  mysql-community-release-el7<span class=\"number\">-5.</span>noarch.rpm<span class=\"number\">.2</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cp trip-web.war /usr/local/docker/tripweb</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /usr/local/docker/tripweb</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># ls</span></span><br><span class=\"line\">docker-compose.yml  ROOT  trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># mv trip-web.war ROOT </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># ls</span></span><br><span class=\"line\">docker-compose.yml  ROOT</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb<span class=\"meta\"># cd ROOT </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">trip-web.war</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># unzip -oq trip-web.war -d .</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  trip-web.war  WEB-INF</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># rm trip-web.war </span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">META-INF  <span class=\"keyword\">static</span>  WEB-INF</span><br></pre></td></tr></table></figure>\n<p><code>unzip -oq trip-web.war -d .</code>解压war包</p>\n<h2>删除正在运行的容器</h2>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tripweb</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">8a1c9fae9d1c</span>        <span class=\"string\">mysql:5.7.22</span>        <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">12</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">12</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>   <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">c771ba85ec82</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">12</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">12</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">tripweb</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">-f</span> <span class=\"string\">8a</span> <span class=\"string\">c7</span></span><br><span class=\"line\"><span class=\"string\">8a</span></span><br><span class=\"line\"><span class=\"string\">c7</span></span><br></pre></td></tr></table></figure>\n<h2>运行容器</h2>\n<p><code>docker-compose up -d</code><br>\n守护态运行</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\"># docker-compose up -d                       </span></span><br><span class=\"line\">Creating mysql ... done</span><br><span class=\"line\">Creating web   ... done</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tripweb/ROOT<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<h2>监听日志的变化</h2>\n<p>docker logs -f myshop</p>\n<h2>查看结果</h2>\n<p><img src=\"/2019/09/29/Docker学习17-Docker-Compose-部署项目到容器/3.png\" alt></p>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker-compose/Docker-Compose-%E6%A8%A1%E6%9D%BF%E6%96%87%E4%BB%B6.html#build\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker-compose/Docker-Compose-模板文件.html#build</a></p>\n</blockquote>\n"},{"title":"Docker学习5-Docker基本指令","catalog":true,"date":"2019-09-18T04:05:05.000Z","subtitle":null,"header-img":null,"_content":"# linux Docker命令\n启动        systemctl start docker\n守护进程重启   sudo systemctl daemon-reload\n重启 docker 服务   systemctl restart  docker\n重启 docker 服务  sudo service docker restart\n关闭 docker   service docker stop   \n关闭 docker  systemctl stop docker\n\n# Docker基本指令\n从 Docker 镜像仓库获取镜像的命令是 docker pull\n- docker pull `[选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]`\n- docker pull tomcat\n列出镜像\n- docker image ls || docker images\n查看镜像、容器、数据卷所占用的空间\n- docker system df\n虚悬镜像\n- docker image prune\n中间层镜像\n- docker image ls -a\n列出部分镜像\n- docker image ls ubuntu\n- docker image ls ubuntu:16.04\ndocker image ls 还支持强大的过滤器参数 --filter\n希望看到在 mongo:3.2 之后建立的镜像\n- docker image ls -f since=mongo:3.2\n想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。\n此外，如果镜像构建时，定义了 LABEL，还可以通过 LABEL 来过滤。\n\n## 容器操作\n列出正在运行的容器\n- docker ps\n列出所有容器\n- docker ps -a\n列出所有容器的ID\n- docker ps -a -q\n删除所有容器\n- docker rm $(docker ps -a -q)\n~~~ linux\n[root@MyCentOS]/usr/local/docker/tomcat# docker rm $(docker ps -a -q)\n4482c4ae4f59\n14fe6134c78e\n1f86f8427885\nd1ec8e51953a\nb0e7101ee330\n33d9191d7b3b\n~~~\n从新启动容器\n- docker restart <id>或者<name>\n自定义容器名称启动时\n- docker run -p 8081:8080 --name mytomcat tomcat\n停用容器\n- docker stop <容器id>\n### 守护态运行\n更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器\n\n`sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat`\n~~~\nsudo docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                    NAMES\nd53272c36764        tomcat              \"catalina.sh run\"   About a minute ago   Up About a minute   0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"   4 hours ago          Up 19 minutes       0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n结果查看:\n- 8081\n![1](Docker学习5-Docker基本指令/1.png)\n- 8082\n![2](Docker学习5-Docker基本指令/2.png)\n\n进程\n\t主线程\n\t工作线程\n\n## 以特定格式显示\n利用 docker image ls 把所有的虚悬镜像的 ID 列出来，然后才可以交给 docker image rm 命令作为参数来删除指定的这些镜像，这个时候就用到了 -q 参数。\n- docker image ls -q\n下面的命令会直接列出镜像结果，并且只包含镜像 ID 和仓库名：打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：\n\n# 删除本地镜像\n删除本地的镜像\n- docker image rm` [选项] <镜像1> [<镜像2> ...]`\n~~~ log\n$ docker image ls\nREPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE\ncentos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB\nredis                       alpine              501ad78535f0        3 weeks ago         21.03 MB\ndocker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB\nnginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB\n~~~\n~~~ log\n$ docker image rm 501\nUntagged: redis:alpine\nUntagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d\nDeleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7\nDeleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b\nDeleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23\nDeleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa\nDeleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3\nDeleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7\n~~~\n用镜像名，也就是 <仓库名>:<标签>，来删除镜像。\n~~~\n$ docker image rm centos\nUntagged: centos:latest\nUntagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c\nDeleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a\nDeleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38\n~~~\n使用 镜像摘要 删除镜像\n\n~~~\n$ docker image ls --digests\nREPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE\nnode                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        3 weeks ago         214 MB\n\n$ docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\nUntagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\n~~~\n\n## Untagged 和 Deleted\nUntagged，另一类是 Deleted\n\n## 用 docker image ls 命令来配合\n像其它可以承接多个实体的命令一样，可以使用 docker image ls -q 来配合使用 docker image rm，这样可以成批的删除希望删除的镜像。我们在 “镜像列表” 章节介绍过很多过滤镜像列表的方式都可以拿过来使用。\n\n比如，我们需要删除所有仓库名为 redis 的镜像：\n~~~\n$ docker image rm $(docker image ls -q redis)\n~~~\n或者删除所有在 mongo:3.2 之前的镜像：\n~~~\n$ docker image rm $(docker image ls -q -f before=mongo:3.2)\n~~~\n## CentOS/RHEL 的用户需要注意的事项\n在 Ubuntu/Debian 上有 UnionFS 可以使用，如 aufs 或者 overlay2，而 CentOS 和 RHEL 的内核中没有相关驱动。因此对于这类系统，一般使用 devicemapper 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能比较差外，稳定性一般也不好，而且配置相对复杂。Docker 安装在 CentOS/RHEL 上后，会默认选择 devicemapper，但是为了简化配置，其 devicemapper 是跑在一个稀疏文件模拟的块设备上，也被称为 loop-lvm。这样的选择是因为不需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 loop-lvm 的做法非常不好，其稳定性、性能更差，无论是日志还是 docker info 中都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给 devicemapper 驱动做存储层的做法，这类做法也被称为配置 direct-lvm。\n\n除了前面说到的问题外，devicemapper + loop-lvm 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 /var/lib/docker/devicemapper/devicemapper/data 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。\n\n所以对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。\n\n或许有人注意到了 CentOS 7 中存在被 backports 回来的 overlay 驱动，不过 CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。\n\n\n","source":"_posts/Docker学习5-Docker基本指令.md","raw":"---\ntitle: Docker学习5-Docker基本指令\ncatalog: true\ndate: 2019-09-18 12:05:05\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# linux Docker命令\n启动        systemctl start docker\n守护进程重启   sudo systemctl daemon-reload\n重启 docker 服务   systemctl restart  docker\n重启 docker 服务  sudo service docker restart\n关闭 docker   service docker stop   \n关闭 docker  systemctl stop docker\n\n# Docker基本指令\n从 Docker 镜像仓库获取镜像的命令是 docker pull\n- docker pull `[选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]`\n- docker pull tomcat\n列出镜像\n- docker image ls || docker images\n查看镜像、容器、数据卷所占用的空间\n- docker system df\n虚悬镜像\n- docker image prune\n中间层镜像\n- docker image ls -a\n列出部分镜像\n- docker image ls ubuntu\n- docker image ls ubuntu:16.04\ndocker image ls 还支持强大的过滤器参数 --filter\n希望看到在 mongo:3.2 之后建立的镜像\n- docker image ls -f since=mongo:3.2\n想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。\n此外，如果镜像构建时，定义了 LABEL，还可以通过 LABEL 来过滤。\n\n## 容器操作\n列出正在运行的容器\n- docker ps\n列出所有容器\n- docker ps -a\n列出所有容器的ID\n- docker ps -a -q\n删除所有容器\n- docker rm $(docker ps -a -q)\n~~~ linux\n[root@MyCentOS]/usr/local/docker/tomcat# docker rm $(docker ps -a -q)\n4482c4ae4f59\n14fe6134c78e\n1f86f8427885\nd1ec8e51953a\nb0e7101ee330\n33d9191d7b3b\n~~~\n从新启动容器\n- docker restart <id>或者<name>\n自定义容器名称启动时\n- docker run -p 8081:8080 --name mytomcat tomcat\n停用容器\n- docker stop <容器id>\n### 守护态运行\n更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器\n\n`sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat`\n~~~\nsudo docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                    NAMES\nd53272c36764        tomcat              \"catalina.sh run\"   About a minute ago   Up About a minute   0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"   4 hours ago          Up 19 minutes       0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n结果查看:\n- 8081\n![1](Docker学习5-Docker基本指令/1.png)\n- 8082\n![2](Docker学习5-Docker基本指令/2.png)\n\n进程\n\t主线程\n\t工作线程\n\n## 以特定格式显示\n利用 docker image ls 把所有的虚悬镜像的 ID 列出来，然后才可以交给 docker image rm 命令作为参数来删除指定的这些镜像，这个时候就用到了 -q 参数。\n- docker image ls -q\n下面的命令会直接列出镜像结果，并且只包含镜像 ID 和仓库名：打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：\n\n# 删除本地镜像\n删除本地的镜像\n- docker image rm` [选项] <镜像1> [<镜像2> ...]`\n~~~ log\n$ docker image ls\nREPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE\ncentos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB\nredis                       alpine              501ad78535f0        3 weeks ago         21.03 MB\ndocker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB\nnginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB\n~~~\n~~~ log\n$ docker image rm 501\nUntagged: redis:alpine\nUntagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d\nDeleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7\nDeleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b\nDeleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23\nDeleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa\nDeleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3\nDeleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7\n~~~\n用镜像名，也就是 <仓库名>:<标签>，来删除镜像。\n~~~\n$ docker image rm centos\nUntagged: centos:latest\nUntagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c\nDeleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a\nDeleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38\n~~~\n使用 镜像摘要 删除镜像\n\n~~~\n$ docker image ls --digests\nREPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE\nnode                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        3 weeks ago         214 MB\n\n$ docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\nUntagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228\n~~~\n\n## Untagged 和 Deleted\nUntagged，另一类是 Deleted\n\n## 用 docker image ls 命令来配合\n像其它可以承接多个实体的命令一样，可以使用 docker image ls -q 来配合使用 docker image rm，这样可以成批的删除希望删除的镜像。我们在 “镜像列表” 章节介绍过很多过滤镜像列表的方式都可以拿过来使用。\n\n比如，我们需要删除所有仓库名为 redis 的镜像：\n~~~\n$ docker image rm $(docker image ls -q redis)\n~~~\n或者删除所有在 mongo:3.2 之前的镜像：\n~~~\n$ docker image rm $(docker image ls -q -f before=mongo:3.2)\n~~~\n## CentOS/RHEL 的用户需要注意的事项\n在 Ubuntu/Debian 上有 UnionFS 可以使用，如 aufs 或者 overlay2，而 CentOS 和 RHEL 的内核中没有相关驱动。因此对于这类系统，一般使用 devicemapper 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能比较差外，稳定性一般也不好，而且配置相对复杂。Docker 安装在 CentOS/RHEL 上后，会默认选择 devicemapper，但是为了简化配置，其 devicemapper 是跑在一个稀疏文件模拟的块设备上，也被称为 loop-lvm。这样的选择是因为不需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 loop-lvm 的做法非常不好，其稳定性、性能更差，无论是日志还是 docker info 中都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给 devicemapper 驱动做存储层的做法，这类做法也被称为配置 direct-lvm。\n\n除了前面说到的问题外，devicemapper + loop-lvm 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 /var/lib/docker/devicemapper/devicemapper/data 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。\n\n所以对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。\n\n或许有人注意到了 CentOS 7 中存在被 backports 回来的 overlay 驱动，不过 CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。\n\n\n","slug":"Docker学习5-Docker基本指令","published":1,"updated":"2021-04-20T13:28:10.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd22000wzgl15txjnlsc","content":"<h1><span id=\"linux-docker命令\">linux Docker命令</span></h1>\n<p>启动        systemctl start docker<br>\n守护进程重启   sudo systemctl daemon-reload<br>\n重启 docker 服务   systemctl restart  docker<br>\n重启 docker 服务  sudo service docker restart<br>\n关闭 docker   service docker stop<br>\n关闭 docker  systemctl stop docker</p>\n<h1><span id=\"docker基本指令\">Docker基本指令</span></h1>\n<p>从 Docker 镜像仓库获取镜像的命令是 docker pull</p>\n<ul>\n<li>docker pull <code>[选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</code></li>\n<li>docker pull tomcat<br>\n列出镜像</li>\n<li>docker image ls || docker images<br>\n查看镜像、容器、数据卷所占用的空间</li>\n<li>docker system df<br>\n虚悬镜像</li>\n<li>docker image prune<br>\n中间层镜像</li>\n<li>docker image ls -a<br>\n列出部分镜像</li>\n<li>docker image ls ubuntu</li>\n<li>docker image ls ubuntu:16.04<br>\ndocker image ls 还支持强大的过滤器参数 --filter<br>\n希望看到在 mongo:3.2 之后建立的镜像</li>\n<li>docker image ls -f since=mongo:3.2<br>\n想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。<br>\n此外，如果镜像构建时，定义了 LABEL，还可以通过 LABEL 来过滤。</li>\n</ul>\n<h2><span id=\"容器操作\">容器操作</span></h2>\n<p>列出正在运行的容器</p>\n<ul>\n<li>docker ps<br>\n列出所有容器</li>\n<li>docker ps -a<br>\n列出所有容器的ID</li>\n<li>docker ps -a -q<br>\n删除所有容器</li>\n<li>docker rm $(docker ps -a -q)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat# docker rm $(docker ps -a -q)</span><br><span class=\"line\">4482c4ae4f59</span><br><span class=\"line\">14fe6134c78e</span><br><span class=\"line\">1f86f8427885</span><br><span class=\"line\">d1ec8e51953a</span><br><span class=\"line\">b0e7101ee330</span><br><span class=\"line\">33d9191d7b3b</span><br></pre></td></tr></table></figure>\n<p>从新启动容器</p>\n<ul>\n<li>docker restart <id>或者<name><br>\n自定义容器名称启动时</name></id></li>\n<li>docker run -p 8081:8080 --name mytomcat tomcat<br>\n停用容器</li>\n<li>docker stop &lt;容器id&gt;</li>\n</ul>\n<h3><span id=\"守护态运行\">守护态运行</span></h3>\n<p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器</p>\n<p><code>sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>             <span class=\"string\">CREATED</span>              <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span> <span class=\"string\">ago</span>   <span class=\"string\">Up</span> <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span>   <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"number\">4</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<p>结果查看:</p>\n<ul>\n<li>8081<br>\n<img src=\"/2019/09/18/Docker学习5-Docker基本指令/1.png\" alt=\"1\"></li>\n<li>8082<br>\n<img src=\"/2019/09/18/Docker学习5-Docker基本指令/2.png\" alt=\"2\"></li>\n</ul>\n<p>进程<br>\n\t主线程<br>\n\t工作线程</p>\n<h2><span id=\"以特定格式显示\">以特定格式显示</span></h2>\n<p>利用 docker image ls 把所有的虚悬镜像的 ID 列出来，然后才可以交给 docker image rm 命令作为参数来删除指定的这些镜像，这个时候就用到了 -q 参数。</p>\n<ul>\n<li>docker image ls -q<br>\n下面的命令会直接列出镜像结果，并且只包含镜像 ID 和仓库名：打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</li>\n</ul>\n<h1><span id=\"删除本地镜像\">删除本地镜像</span></h1>\n<p>删除本地的镜像</p>\n<ul>\n<li>docker image rm<code>[选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB</span><br><span class=\"line\">redis                       alpine              501ad78535f0        3 weeks ago         21.03 MB</span><br><span class=\"line\">docker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB</span><br><span class=\"line\">nginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image rm 501</span><br><span class=\"line\">Untagged: redis:alpine</span><br><span class=\"line\">Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d</span><br><span class=\"line\">Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7</span><br><span class=\"line\">Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b</span><br><span class=\"line\">Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23</span><br><span class=\"line\">Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa</span><br><span class=\"line\">Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3</span><br><span class=\"line\">Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</span><br></pre></td></tr></table></figure>\n<p>用镜像名，也就是 &lt;仓库名&gt;:&lt;标签&gt;，来删除镜像。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image rm centos</span><br><span class=\"line\"><span class=\"string\">Untagged:</span> <span class=\"string\">centos:</span>latest</span><br><span class=\"line\"><span class=\"string\">Untagged:</span> centos<span class=\"meta\">@sha</span><span class=\"string\">256:</span>b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c</span><br><span class=\"line\"><span class=\"string\">Deleted:</span> <span class=\"string\">sha256:</span><span class=\"number\">0584</span>b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a</span><br><span class=\"line\"><span class=\"string\">Deleted:</span> <span class=\"string\">sha256:</span><span class=\"number\">97</span>ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38</span><br></pre></td></tr></table></figure>\n<p>使用 镜像摘要 删除镜像</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls --digests</span><br><span class=\"line\">REPOSITORY                  <span class=\"keyword\">TAG</span>                 <span class=\"title\">DIGEST</span>                                                                    IMAGE ID            CREATED             SIZE</span><br><span class=\"line\"><span class=\"keyword\">node</span>                        <span class=\"title\">slim</span>                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   <span class=\"number\">6</span>e0c4c8e3913        <span class=\"number\">3</span> weeks ago         <span class=\"number\">214</span> MB</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker image rm <span class=\"keyword\">node</span><span class=\"title\">@sha256</span>:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br><span class=\"line\">Untagged: <span class=\"keyword\">node</span><span class=\"title\">@sha256</span>:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br></pre></td></tr></table></figure>\n<h2><span id=\"untagged-和-deleted\">Untagged 和 Deleted</span></h2>\n<p>Untagged，另一类是 Deleted</p>\n<h2><span id=\"用-docker-image-ls-命令来配合\">用 docker image ls 命令来配合</span></h2>\n<p>像其它可以承接多个实体的命令一样，可以使用 docker image ls -q 来配合使用 docker image rm，这样可以成批的删除希望删除的镜像。我们在 “镜像列表” 章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p>\n<p>比如，我们需要删除所有仓库名为 redis 的镜像：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">image</span> rm $(docker <span class=\"keyword\">image</span> <span class=\"keyword\">ls</span> -q redis)</span><br></pre></td></tr></table></figure>\n<p>或者删除所有在 mongo:3.2 之前的镜像：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">image</span> rm $(docker <span class=\"keyword\">image</span> <span class=\"keyword\">ls</span> -q -f before=mongo:<span class=\"number\">3.2</span>)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"centosrhel-的用户需要注意的事项\">CentOS/RHEL 的用户需要注意的事项</span></h2>\n<p>在 Ubuntu/Debian 上有 UnionFS 可以使用，如 aufs 或者 overlay2，而 CentOS 和 RHEL 的内核中没有相关驱动。因此对于这类系统，一般使用 devicemapper 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能比较差外，稳定性一般也不好，而且配置相对复杂。Docker 安装在 CentOS/RHEL 上后，会默认选择 devicemapper，但是为了简化配置，其 devicemapper 是跑在一个稀疏文件模拟的块设备上，也被称为 loop-lvm。这样的选择是因为不需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 loop-lvm 的做法非常不好，其稳定性、性能更差，无论是日志还是 docker info 中都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给 devicemapper 驱动做存储层的做法，这类做法也被称为配置 direct-lvm。</p>\n<p>除了前面说到的问题外，devicemapper + loop-lvm 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 /var/lib/docker/devicemapper/devicemapper/data 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。</p>\n<p>所以对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。</p>\n<p>或许有人注意到了 CentOS 7 中存在被 backports 回来的 overlay 驱动，不过 CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>linux Docker命令</h1>\n<p>启动        systemctl start docker<br>\n守护进程重启   sudo systemctl daemon-reload<br>\n重启 docker 服务   systemctl restart  docker<br>\n重启 docker 服务  sudo service docker restart<br>\n关闭 docker   service docker stop<br>\n关闭 docker  systemctl stop docker</p>\n<h1>Docker基本指令</h1>\n<p>从 Docker 镜像仓库获取镜像的命令是 docker pull</p>\n<ul>\n<li>docker pull <code>[选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</code></li>\n<li>docker pull tomcat<br>\n列出镜像</li>\n<li>docker image ls || docker images<br>\n查看镜像、容器、数据卷所占用的空间</li>\n<li>docker system df<br>\n虚悬镜像</li>\n<li>docker image prune<br>\n中间层镜像</li>\n<li>docker image ls -a<br>\n列出部分镜像</li>\n<li>docker image ls ubuntu</li>\n<li>docker image ls ubuntu:16.04<br>\ndocker image ls 还支持强大的过滤器参数 --filter<br>\n希望看到在 mongo:3.2 之后建立的镜像</li>\n<li>docker image ls -f since=mongo:3.2<br>\n想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。<br>\n此外，如果镜像构建时，定义了 LABEL，还可以通过 LABEL 来过滤。</li>\n</ul>\n<h2>容器操作</h2>\n<p>列出正在运行的容器</p>\n<ul>\n<li>docker ps<br>\n列出所有容器</li>\n<li>docker ps -a<br>\n列出所有容器的ID</li>\n<li>docker ps -a -q<br>\n删除所有容器</li>\n<li>docker rm $(docker ps -a -q)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat# docker rm $(docker ps -a -q)</span><br><span class=\"line\">4482c4ae4f59</span><br><span class=\"line\">14fe6134c78e</span><br><span class=\"line\">1f86f8427885</span><br><span class=\"line\">d1ec8e51953a</span><br><span class=\"line\">b0e7101ee330</span><br><span class=\"line\">33d9191d7b3b</span><br></pre></td></tr></table></figure>\n<p>从新启动容器</p>\n<ul>\n<li>docker restart <id>或者<name><br>\n自定义容器名称启动时</name></id></li>\n<li>docker run -p 8081:8080 --name mytomcat tomcat<br>\n停用容器</li>\n<li>docker stop &lt;容器id&gt;</li>\n</ul>\n<h3>守护态运行</h3>\n<p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器</p>\n<p><code>sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>             <span class=\"string\">CREATED</span>              <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span> <span class=\"string\">ago</span>   <span class=\"string\">Up</span> <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span>   <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"number\">4</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<p>结果查看:</p>\n<ul>\n<li>8081<br>\n<img src=\"/2019/09/18/Docker学习5-Docker基本指令/1.png\" alt=\"1\"></li>\n<li>8082<br>\n<img src=\"/2019/09/18/Docker学习5-Docker基本指令/2.png\" alt=\"2\"></li>\n</ul>\n<p>进程<br>\n\t主线程<br>\n\t工作线程</p>\n<h2>以特定格式显示</h2>\n<p>利用 docker image ls 把所有的虚悬镜像的 ID 列出来，然后才可以交给 docker image rm 命令作为参数来删除指定的这些镜像，这个时候就用到了 -q 参数。</p>\n<ul>\n<li>docker image ls -q<br>\n下面的命令会直接列出镜像结果，并且只包含镜像 ID 和仓库名：打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</li>\n</ul>\n<h1>删除本地镜像</h1>\n<p>删除本地的镜像</p>\n<ul>\n<li>docker image rm<code>[选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls</span><br><span class=\"line\">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">centos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB</span><br><span class=\"line\">redis                       alpine              501ad78535f0        3 weeks ago         21.03 MB</span><br><span class=\"line\">docker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB</span><br><span class=\"line\">nginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image rm 501</span><br><span class=\"line\">Untagged: redis:alpine</span><br><span class=\"line\">Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d</span><br><span class=\"line\">Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7</span><br><span class=\"line\">Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b</span><br><span class=\"line\">Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23</span><br><span class=\"line\">Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa</span><br><span class=\"line\">Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3</span><br><span class=\"line\">Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</span><br></pre></td></tr></table></figure>\n<p>用镜像名，也就是 &lt;仓库名&gt;:&lt;标签&gt;，来删除镜像。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image rm centos</span><br><span class=\"line\"><span class=\"string\">Untagged:</span> <span class=\"string\">centos:</span>latest</span><br><span class=\"line\"><span class=\"string\">Untagged:</span> centos<span class=\"meta\">@sha</span><span class=\"string\">256:</span>b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c</span><br><span class=\"line\"><span class=\"string\">Deleted:</span> <span class=\"string\">sha256:</span><span class=\"number\">0584</span>b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a</span><br><span class=\"line\"><span class=\"string\">Deleted:</span> <span class=\"string\">sha256:</span><span class=\"number\">97</span>ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38</span><br></pre></td></tr></table></figure>\n<p>使用 镜像摘要 删除镜像</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker image ls --digests</span><br><span class=\"line\">REPOSITORY                  <span class=\"keyword\">TAG</span>                 <span class=\"title\">DIGEST</span>                                                                    IMAGE ID            CREATED             SIZE</span><br><span class=\"line\"><span class=\"keyword\">node</span>                        <span class=\"title\">slim</span>                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   <span class=\"number\">6</span>e0c4c8e3913        <span class=\"number\">3</span> weeks ago         <span class=\"number\">214</span> MB</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker image rm <span class=\"keyword\">node</span><span class=\"title\">@sha256</span>:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br><span class=\"line\">Untagged: <span class=\"keyword\">node</span><span class=\"title\">@sha256</span>:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br></pre></td></tr></table></figure>\n<h2>Untagged 和 Deleted</h2>\n<p>Untagged，另一类是 Deleted</p>\n<h2>用 docker image ls 命令来配合</h2>\n<p>像其它可以承接多个实体的命令一样，可以使用 docker image ls -q 来配合使用 docker image rm，这样可以成批的删除希望删除的镜像。我们在 “镜像列表” 章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p>\n<p>比如，我们需要删除所有仓库名为 redis 的镜像：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">image</span> rm $(docker <span class=\"keyword\">image</span> <span class=\"keyword\">ls</span> -q redis)</span><br></pre></td></tr></table></figure>\n<p>或者删除所有在 mongo:3.2 之前的镜像：</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">image</span> rm $(docker <span class=\"keyword\">image</span> <span class=\"keyword\">ls</span> -q -f before=mongo:<span class=\"number\">3.2</span>)</span><br></pre></td></tr></table></figure>\n<h2>CentOS/RHEL 的用户需要注意的事项</h2>\n<p>在 Ubuntu/Debian 上有 UnionFS 可以使用，如 aufs 或者 overlay2，而 CentOS 和 RHEL 的内核中没有相关驱动。因此对于这类系统，一般使用 devicemapper 驱动利用 LVM 的一些机制来模拟分层存储。这样的做法除了性能比较差外，稳定性一般也不好，而且配置相对复杂。Docker 安装在 CentOS/RHEL 上后，会默认选择 devicemapper，但是为了简化配置，其 devicemapper 是跑在一个稀疏文件模拟的块设备上，也被称为 loop-lvm。这样的选择是因为不需要额外配置就可以运行 Docker，这是自动配置唯一能做到的事情。但是 loop-lvm 的做法非常不好，其稳定性、性能更差，无论是日志还是 docker info 中都会看到警告信息。官方文档有明确的文章讲解了如何配置块设备给 devicemapper 驱动做存储层的做法，这类做法也被称为配置 direct-lvm。</p>\n<p>除了前面说到的问题外，devicemapper + loop-lvm 还有一个缺陷，因为它是稀疏文件，所以它会不断增长。用户在使用过程中会注意到 /var/lib/docker/devicemapper/devicemapper/data 不断增长，而且无法控制。很多人会希望删除镜像或者可以解决这个问题，结果发现效果并不明显。原因就是这个稀疏文件的空间释放后基本不进行垃圾回收的问题。因此往往会出现即使删除了文件内容，空间却无法回收，随着使用这个稀疏文件一直在不断增长。</p>\n<p>所以对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS 的情况下，一定要配置 direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。</p>\n<p>或许有人注意到了 CentOS 7 中存在被 backports 回来的 overlay 驱动，不过 CentOS 里的这个驱动达不到生产环境使用的稳定程度，所以不推荐使用。</p>\n"},{"title":"Docker学习18-Docker-Compose-YAML配置文件语言","catalog":true,"date":"2019-09-29T09:11:53.000Z","subtitle":null,"header-img":null,"_content":"# YAML配置文件语言\n简介\nYAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。\n\nYAML 语言的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。它的基本语法规则如下：\n\n大小写敏感\n使用缩进表示层级关系\n缩进时不允许使用 Tab 键，只允许使用空格。\n缩进的空格数目不重要，只要相同层级的元素左侧对齐即可\n`#` 表示注释，从这个字符一直到行尾，都会被解析器忽略。\n\nYAML 支持的数据结构有三种：\n\n对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n纯量（scalars）：单个的、不可再分的值\n### 对象\n对象的一组键值对，使用冒号结构表示\n\nanimal: pets\n### 数组\n一组连词线开头的行，构成一个数组\n\n- Cat\n- Dog\n- Goldfish\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格\n\n- Array\n - Cat\n - Dog\n - Goldfish\n### 复合结构\n对象和数组可以结合使用，形成复合结构\n\nlanguages:\n - Ruby\n - Perl\n - Python \nwebsites:\n YAML: yaml.org \n Ruby: ruby-lang.org \n Python: python.org \n Perl: use.perl.org \n### 纯量\n纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量\n\n字符串\n布尔值\n整数\n浮点数\nNull\n时间\n日期\n\n# 为什么说 JSON 不适合做配置文件？\n> 很多项目使用 JSON 作为配置文件，最明显的例子就是 npm 和 yarn 使用的 package.json 文件。当然，还有很多其他文件，例如 CloudFormation（最初只有 JSON，但现在也支持 YAML）和 composer（PHP）。\n\n但是，JSON 实际上是一种非常糟糕的配置语言。别误会我的意思，我其实是喜欢 JSON 的。它是一种相对灵活的文本格式，对于机器和人类来说都很容易阅读，而且是一种非常好的数据交换和存储格式。但作为一种配置语言，它有它的不足。\n\n# 为什么流行使用 JSON 作为配置语言？\n将 JSON 用作配置文件有几个方面的原因，其中最大的原因可能是它很容易实现。很多编程语言的标准库都支持 JSON，开发人员或用户可能已经很熟悉 JSON，所以不需要学习新的配置格式就可以使用那些产品。现在几乎所有的工具都提供 JSON 支持，包括语法突出显示、自动格式化、验证工具等。\n\n## JSON的问题\n- 缺乏注释\n无法写注释\n- 过于严格\n格式必须整齐,多一个空格和少一个都有问题\n- 低信噪比\njson的很多标点符号对阅读毫无用处,双引号无意义,对阅读有影响\n- 长字符串\n不支持多行字符串,如果想换行必须使用\\n转义\n- 数字\n某些情况下,JSON对数字的定义可能有问题.\n\n这些都是很好的理由，但这种无处不在的格式其实不适合用作配置。\n\n配置文件就是用配置文件语言,json就做为json数据格式.\n\n\n\n## 参考资料\n> \n","source":"_posts/Docker学习18-Docker-Compose-YAML配置文件语言.md","raw":"---\ntitle: \"Docker学习18-Docker-Compose-YAML配置文件语言\"\ncatalog: true\ntags: [YAML]\ndate: 2019-09-29 17:11:53\nsubtitle:\nheader-img:\n---\n# YAML配置文件语言\n简介\nYAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。\n\nYAML 语言的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。它的基本语法规则如下：\n\n大小写敏感\n使用缩进表示层级关系\n缩进时不允许使用 Tab 键，只允许使用空格。\n缩进的空格数目不重要，只要相同层级的元素左侧对齐即可\n`#` 表示注释，从这个字符一直到行尾，都会被解析器忽略。\n\nYAML 支持的数据结构有三种：\n\n对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）\n纯量（scalars）：单个的、不可再分的值\n### 对象\n对象的一组键值对，使用冒号结构表示\n\nanimal: pets\n### 数组\n一组连词线开头的行，构成一个数组\n\n- Cat\n- Dog\n- Goldfish\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格\n\n- Array\n - Cat\n - Dog\n - Goldfish\n### 复合结构\n对象和数组可以结合使用，形成复合结构\n\nlanguages:\n - Ruby\n - Perl\n - Python \nwebsites:\n YAML: yaml.org \n Ruby: ruby-lang.org \n Python: python.org \n Perl: use.perl.org \n### 纯量\n纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量\n\n字符串\n布尔值\n整数\n浮点数\nNull\n时间\n日期\n\n# 为什么说 JSON 不适合做配置文件？\n> 很多项目使用 JSON 作为配置文件，最明显的例子就是 npm 和 yarn 使用的 package.json 文件。当然，还有很多其他文件，例如 CloudFormation（最初只有 JSON，但现在也支持 YAML）和 composer（PHP）。\n\n但是，JSON 实际上是一种非常糟糕的配置语言。别误会我的意思，我其实是喜欢 JSON 的。它是一种相对灵活的文本格式，对于机器和人类来说都很容易阅读，而且是一种非常好的数据交换和存储格式。但作为一种配置语言，它有它的不足。\n\n# 为什么流行使用 JSON 作为配置语言？\n将 JSON 用作配置文件有几个方面的原因，其中最大的原因可能是它很容易实现。很多编程语言的标准库都支持 JSON，开发人员或用户可能已经很熟悉 JSON，所以不需要学习新的配置格式就可以使用那些产品。现在几乎所有的工具都提供 JSON 支持，包括语法突出显示、自动格式化、验证工具等。\n\n## JSON的问题\n- 缺乏注释\n无法写注释\n- 过于严格\n格式必须整齐,多一个空格和少一个都有问题\n- 低信噪比\njson的很多标点符号对阅读毫无用处,双引号无意义,对阅读有影响\n- 长字符串\n不支持多行字符串,如果想换行必须使用\\n转义\n- 数字\n某些情况下,JSON对数字的定义可能有问题.\n\n这些都是很好的理由，但这种无处不在的格式其实不适合用作配置。\n\n配置文件就是用配置文件语言,json就做为json数据格式.\n\n\n\n## 参考资料\n> \n","slug":"Docker学习18-Docker-Compose-YAML配置文件语言","published":1,"updated":"2021-04-20T13:28:10.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd24000yzgl1ziohxxsh","content":"<h1><span id=\"yaml配置文件语言\">YAML配置文件语言</span></h1>\n<p>简介<br>\nYAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。</p>\n<p>YAML 语言的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。它的基本语法规则如下：</p>\n<p>大小写敏感<br>\n使用缩进表示层级关系<br>\n缩进时不允许使用 Tab 键，只允许使用空格。<br>\n缩进的空格数目不重要，只要相同层级的元素左侧对齐即可<br>\n<code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>\n<p>YAML 支持的数据结构有三种：</p>\n<p>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）<br>\n数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）<br>\n纯量（scalars）：单个的、不可再分的值</p>\n<h3><span id=\"对象\">对象</span></h3>\n<p>对象的一组键值对，使用冒号结构表示</p>\n<p>animal: pets</p>\n<h3><span id=\"数组\">数组</span></h3>\n<p>一组连词线开头的行，构成一个数组</p>\n<ul>\n<li>\n<p>Cat</p>\n</li>\n<li>\n<p>Dog</p>\n</li>\n<li>\n<p>Goldfish<br>\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格</p>\n</li>\n<li>\n<p>Array</p>\n</li>\n<li>\n<p>Cat</p>\n</li>\n<li>\n<p>Dog</p>\n</li>\n<li>\n<p>Goldfish</p>\n</li>\n</ul>\n<h3><span id=\"复合结构\">复合结构</span></h3>\n<p>对象和数组可以结合使用，形成复合结构</p>\n<p>languages:</p>\n<ul>\n<li>Ruby</li>\n<li>Perl</li>\n<li>Python<br>\nwebsites:<br>\nYAML: <a href=\"http://yaml.org\" target=\"_blank\" rel=\"noopener\">yaml.org</a><br>\nRuby: <a href=\"http://ruby-lang.org\" target=\"_blank\" rel=\"noopener\">ruby-lang.org</a><br>\nPython: <a href=\"http://python.org\" target=\"_blank\" rel=\"noopener\">python.org</a><br>\nPerl: <a href=\"http://use.perl.org\" target=\"_blank\" rel=\"noopener\">use.perl.org</a></li>\n</ul>\n<h3><span id=\"纯量\">纯量</span></h3>\n<p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量</p>\n<p>字符串<br>\n布尔值<br>\n整数<br>\n浮点数<br>\nNull<br>\n时间<br>\n日期</p>\n<h1><span id=\"为什么说-json-不适合做配置文件\">为什么说 JSON 不适合做配置文件？</span></h1>\n<blockquote>\n<p>很多项目使用 JSON 作为配置文件，最明显的例子就是 npm 和 yarn 使用的 package.json 文件。当然，还有很多其他文件，例如 CloudFormation（最初只有 JSON，但现在也支持 YAML）和 composer（PHP）。</p>\n</blockquote>\n<p>但是，JSON 实际上是一种非常糟糕的配置语言。别误会我的意思，我其实是喜欢 JSON 的。它是一种相对灵活的文本格式，对于机器和人类来说都很容易阅读，而且是一种非常好的数据交换和存储格式。但作为一种配置语言，它有它的不足。</p>\n<h1><span id=\"为什么流行使用-json-作为配置语言\">为什么流行使用 JSON 作为配置语言？</span></h1>\n<p>将 JSON 用作配置文件有几个方面的原因，其中最大的原因可能是它很容易实现。很多编程语言的标准库都支持 JSON，开发人员或用户可能已经很熟悉 JSON，所以不需要学习新的配置格式就可以使用那些产品。现在几乎所有的工具都提供 JSON 支持，包括语法突出显示、自动格式化、验证工具等。</p>\n<h2><span id=\"json的问题\">JSON的问题</span></h2>\n<ul>\n<li>缺乏注释<br>\n无法写注释</li>\n<li>过于严格<br>\n格式必须整齐,多一个空格和少一个都有问题</li>\n<li>低信噪比<br>\njson的很多标点符号对阅读毫无用处,双引号无意义,对阅读有影响</li>\n<li>长字符串<br>\n不支持多行字符串,如果想换行必须使用\\n转义</li>\n<li>数字<br>\n某些情况下,JSON对数字的定义可能有问题.</li>\n</ul>\n<p>这些都是很好的理由，但这种无处不在的格式其实不适合用作配置。</p>\n<p>配置文件就是用配置文件语言,json就做为json数据格式.</p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>YAML配置文件语言</h1>\n<p>简介<br>\nYAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。</p>\n<p>YAML 语言的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。它的基本语法规则如下：</p>\n<p>大小写敏感<br>\n使用缩进表示层级关系<br>\n缩进时不允许使用 Tab 键，只允许使用空格。<br>\n缩进的空格数目不重要，只要相同层级的元素左侧对齐即可<br>\n<code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>\n<p>YAML 支持的数据结构有三种：</p>\n<p>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）<br>\n数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）<br>\n纯量（scalars）：单个的、不可再分的值</p>\n<h3>对象</h3>\n<p>对象的一组键值对，使用冒号结构表示</p>\n<p>animal: pets</p>\n<h3>数组</h3>\n<p>一组连词线开头的行，构成一个数组</p>\n<ul>\n<li>\n<p>Cat</p>\n</li>\n<li>\n<p>Dog</p>\n</li>\n<li>\n<p>Goldfish<br>\n数据结构的子成员是一个数组，则可以在该项下面缩进一个空格</p>\n</li>\n<li>\n<p>Array</p>\n</li>\n<li>\n<p>Cat</p>\n</li>\n<li>\n<p>Dog</p>\n</li>\n<li>\n<p>Goldfish</p>\n</li>\n</ul>\n<h3>复合结构</h3>\n<p>对象和数组可以结合使用，形成复合结构</p>\n<p>languages:</p>\n<ul>\n<li>Ruby</li>\n<li>Perl</li>\n<li>Python<br>\nwebsites:<br>\nYAML: <a href=\"http://yaml.org\" target=\"_blank\" rel=\"noopener\">yaml.org</a><br>\nRuby: <a href=\"http://ruby-lang.org\" target=\"_blank\" rel=\"noopener\">ruby-lang.org</a><br>\nPython: <a href=\"http://python.org\" target=\"_blank\" rel=\"noopener\">python.org</a><br>\nPerl: <a href=\"http://use.perl.org\" target=\"_blank\" rel=\"noopener\">use.perl.org</a></li>\n</ul>\n<h3>纯量</h3>\n<p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量</p>\n<p>字符串<br>\n布尔值<br>\n整数<br>\n浮点数<br>\nNull<br>\n时间<br>\n日期</p>\n<h1>为什么说 JSON 不适合做配置文件？</h1>\n<blockquote>\n<p>很多项目使用 JSON 作为配置文件，最明显的例子就是 npm 和 yarn 使用的 package.json 文件。当然，还有很多其他文件，例如 CloudFormation（最初只有 JSON，但现在也支持 YAML）和 composer（PHP）。</p>\n</blockquote>\n<p>但是，JSON 实际上是一种非常糟糕的配置语言。别误会我的意思，我其实是喜欢 JSON 的。它是一种相对灵活的文本格式，对于机器和人类来说都很容易阅读，而且是一种非常好的数据交换和存储格式。但作为一种配置语言，它有它的不足。</p>\n<h1>为什么流行使用 JSON 作为配置语言？</h1>\n<p>将 JSON 用作配置文件有几个方面的原因，其中最大的原因可能是它很容易实现。很多编程语言的标准库都支持 JSON，开发人员或用户可能已经很熟悉 JSON，所以不需要学习新的配置格式就可以使用那些产品。现在几乎所有的工具都提供 JSON 支持，包括语法突出显示、自动格式化、验证工具等。</p>\n<h2>JSON的问题</h2>\n<ul>\n<li>缺乏注释<br>\n无法写注释</li>\n<li>过于严格<br>\n格式必须整齐,多一个空格和少一个都有问题</li>\n<li>低信噪比<br>\njson的很多标点符号对阅读毫无用处,双引号无意义,对阅读有影响</li>\n<li>长字符串<br>\n不支持多行字符串,如果想换行必须使用\\n转义</li>\n<li>数字<br>\n某些情况下,JSON对数字的定义可能有问题.</li>\n</ul>\n<p>这些都是很好的理由，但这种无处不在的格式其实不适合用作配置。</p>\n<p>配置文件就是用配置文件语言,json就做为json数据格式.</p>\n<h2>参考资料</h2>\n<blockquote></blockquote>\n"},{"title":"Docker学习6-Dockerfile定制镜像1","catalog":true,"date":"2019-09-18T05:11:55.000Z","subtitle":null,"header-img":null,"_content":"\n#  Dockerfile\n\n## 作用\n可以将我们的应用程序打包进镜像,启动镜像的容器,一次编译处处运行.\n## Dockerfile是什么?\nwindows的脚本叫bat, linux的脚本叫shell,docker的脚本叫Dockerfile\n如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。\nDockerfile是一个文本文件,其中包含了一条一条的指令(Instruction),因此每一条指令的内容，就是描述该层应当如何构建.\n\n这次我将在我的阿里云服务器使用 Dockerfile 来定制tomcat镜像为例.\n\n## 起步\n- docker拉取tomcat\n`docker pull tomcat`\n\n- 进入docker拉取的tomcat\n`docker run -it tomcat bash`\n~~~\n~ sudo docker run -it tomcat bash\n[sudo] password for ziming:\nroot@071424b6b8ef:/usr/local/tomcat#\nroot@071424b6b8ef:/usr/local/tomcat# ls -al\ntotal 160\ndrwxr-sr-x 1 root staff  4096 Aug 22 00:26 .\ndrwxrwsr-x 1 root staff  4096 Aug 15 05:20 ..\n-rw-r--r-- 1 root root  19534 Aug 14 22:27 BUILDING.txt\n-rw-r--r-- 1 root root   5407 Aug 14 22:27 CONTRIBUTING.md\n-rw-r--r-- 1 root root  57011 Aug 14 22:27 LICENSE\n-rw-r--r-- 1 root root   1726 Aug 14 22:27 NOTICE\n-rw-r--r-- 1 root root   3255 Aug 14 22:27 README.md\n-rw-r--r-- 1 root root   7139 Aug 14 22:27 RELEASE-NOTES\n-rw-r--r-- 1 root root  16262 Aug 14 22:27 RUNNING.txt\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 bin\ndrwxr-sr-x 2 root root   4096 Aug 14 22:27 conf\ndrwxr-sr-x 2 root staff  4096 Aug 22 00:26 include\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 lib\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 logs\ndrwxr-sr-x 3 root staff  4096 Aug 22 00:26 native-jni-lib\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 temp\ndrwxr-xr-x 7 root root   4096 Aug 14 22:24 webapps\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 work\n~~~\n- 进入webapps/ROOT `ls -la`查看ROOT下文件\n~~~\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# ls -la\ntotal 192\ndrwxr-xr-x 3 root root  4096 Aug 22 00:26 .\ndrwxr-xr-x 7 root root  4096 Aug 14 22:24 ..\n-rw-r--r-- 1 root root  7139 Aug 14 22:27 RELEASE-NOTES.txt\ndrwxr-xr-x 2 root root  4096 Aug 22 00:26 WEB-INF\n-rw-r--r-- 1 root root 27235 Aug 14 22:27 asf-logo-wide.svg\n-rw-r--r-- 1 root root   713 Aug 14 22:24 bg-button.png\n-rw-r--r-- 1 root root  1918 Aug 14 22:24 bg-middle.png\n-rw-r--r-- 1 root root  1401 Aug 14 22:24 bg-nav.png\n-rw-r--r-- 1 root root  3103 Aug 14 22:24 bg-upper.png\n-rw-r--r-- 1 root root 21630 Aug 14 22:24 favicon.ico\n-rw-r--r-- 1 root root 12208 Aug 14 22:27 index.jsp\n-rw-r--r-- 1 root root  2376 Aug 14 22:24 tomcat-power.gif\n-rw-r--r-- 1 root root  5581 Aug 14 22:27 tomcat.css\n-rw-r--r-- 1 root root  2066 Aug 14 22:24 tomcat.gif\n-rw-r--r-- 1 root root  5103 Aug 14 22:24 tomcat.png\n-rw-r--r-- 1 root root 67795 Aug 14 22:27 tomcat.svg\n~~~\n- 查看index.jsp文件\n`cat index.jsp'\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# cat index.jsp\n\n- 追加hello docker tomcat 到 index.jsp中\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# echo \"hello docker tomcat\" >> index.jsp\n\n- 退出容器\nexit\n\n- 运行docker的tomcat\n因为我的8080端口本身就被宿主机的tomcat占用,所有这里解析到8081\n`docker run -p 8081:8080 tomcat`\n\t- run代表启动一个新容器,相当于new,触发隔离机制\n\t- `-P`(大写P) 参数来指定端口映射标记时，Docker 会随机映射一个端口到内部容器开放的网络端口 (端口范围在 Linux 系统使用的端口之外，一般都过万)\n\t- `-p`(小写p)可以指定要映射的端口，并且在一个指定的端口上只可以绑定一个容器。支持的格式有:IP:HostPort:ContainerPort | IP::ContainerPort | HostPort:ContainerPort \n\t- :之前的表示宿主机的端口\n\t- :之后的表示容器的端口\n\t- :表示映射\n- 在web端查看有没有hello docker tomcat\n发现没有\n**notice** docker的沙箱机制隔离机制.这里比较细,需要的搜索下资料.\n\n- 另外登录一个用户查看正在运行的docker容器\n查看正在运行的容器`docker ps` \n~~~\nbeae6fea7aa7        tomcat              \"catalina.sh run\"   24 seconds ago      Up 24 seconds       0.0.0.0:8081->8080/tcp   thirsty_jang\n~~~\n\n8080端口,宿主机本身的tomcat 版本为7.0.76\n![](Docker学习6-Dockerfile定制镜像1/8080.png)\n\n8081端口,Docker的tomcat容器 版本为8.5.45\n![](Docker学习6-Dockerfile定制镜像1/8081.png)\n\n\n\n- 交互的方式启动容器\n\t- docker run -p 8081:8080 tomcat\n\n- 交互的方式进入容器\n\t- docker exec -it 容器id bash\n~~~\n➜  ~ sudo docker exec -it 7db bash\nroot@7db5c8940e5a:/usr/local/tomcat# \nroot@7db5c8940e5a:/usr/local/tomcat# cd webapps/\nroot@7db5c8940e5a:/usr/local/tomcat/webapps# cd ROOT\nroot@7db5c8940e5a:/usr/local/tomcat/webapps/ROOT# echo \"hello docker tomcat\" >> index.jsp\nroot@7db5c8940e5a:/usr/local/tomcat/webapps/ROOT#\nroot@7db5c8940e5a:/usr/local/tomcat/webapps/ROOT# cat index.jsp\n</html>\nhello docker tomcat\n~~~\n此时我们看到,hello docker tomcat 已经在文件中了\n打开浏览器查看结果\n\n![](Docker学习6-Dockerfile定制镜像1/hellodocker)\n\n- 查看所有容器`docker ps -a`\n~~~\n➜  ~ sudo docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES\na83388199fb6        tomcat              \"catalina.sh run\"        12 minutes ago      Created                                         flamboyant_goldstine\n071424b6b8ef        tomcat              \"bash\"                   33 minutes ago      Exited (0) 17 minutes ago                       compassionate_jones\nf6007831657c        tomcat              \"catalina.sh run\"        20 hours ago        Created                                         wizardly_newton\n8191ed8e159c        tomcat              \"catalina.sh run\"        20 hours ago        Exited (130) 20 hours ago                       busy_bhabha\n7c01da3b0629        nginx:1.16.1        \"nginx -g 'daemon of…\"   3 weeks ago         Exited (0) 24 hours ago                         MyNginx\n~~~\n\n- 删除正在运行的tomcat容器\n`sudo docker rm f6007831657c` 后面那串字符是编号\n~~~\n➜  ~ sudo docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS   NAMES\n7c01da3b0629        nginx:1.16.1        \"nginx -g 'daemon of…\"   3 weeks ago         Exited   MyNginx\n~~~\n\n\n\n\n\n\n\n\n\n","source":"_posts/Docker学习6-Dockerfile定制镜像1.md","raw":"---\ntitle: Docker学习6-Dockerfile定制镜像1\ncatalog: true\ndate: 2019-09-18 13:11:55\nsubtitle:\nheader-img:\ntags: [Docker, Dockerfile]\n---\n\n#  Dockerfile\n\n## 作用\n可以将我们的应用程序打包进镜像,启动镜像的容器,一次编译处处运行.\n## Dockerfile是什么?\nwindows的脚本叫bat, linux的脚本叫shell,docker的脚本叫Dockerfile\n如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。\nDockerfile是一个文本文件,其中包含了一条一条的指令(Instruction),因此每一条指令的内容，就是描述该层应当如何构建.\n\n这次我将在我的阿里云服务器使用 Dockerfile 来定制tomcat镜像为例.\n\n## 起步\n- docker拉取tomcat\n`docker pull tomcat`\n\n- 进入docker拉取的tomcat\n`docker run -it tomcat bash`\n~~~\n~ sudo docker run -it tomcat bash\n[sudo] password for ziming:\nroot@071424b6b8ef:/usr/local/tomcat#\nroot@071424b6b8ef:/usr/local/tomcat# ls -al\ntotal 160\ndrwxr-sr-x 1 root staff  4096 Aug 22 00:26 .\ndrwxrwsr-x 1 root staff  4096 Aug 15 05:20 ..\n-rw-r--r-- 1 root root  19534 Aug 14 22:27 BUILDING.txt\n-rw-r--r-- 1 root root   5407 Aug 14 22:27 CONTRIBUTING.md\n-rw-r--r-- 1 root root  57011 Aug 14 22:27 LICENSE\n-rw-r--r-- 1 root root   1726 Aug 14 22:27 NOTICE\n-rw-r--r-- 1 root root   3255 Aug 14 22:27 README.md\n-rw-r--r-- 1 root root   7139 Aug 14 22:27 RELEASE-NOTES\n-rw-r--r-- 1 root root  16262 Aug 14 22:27 RUNNING.txt\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 bin\ndrwxr-sr-x 2 root root   4096 Aug 14 22:27 conf\ndrwxr-sr-x 2 root staff  4096 Aug 22 00:26 include\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 lib\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 logs\ndrwxr-sr-x 3 root staff  4096 Aug 22 00:26 native-jni-lib\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 temp\ndrwxr-xr-x 7 root root   4096 Aug 14 22:24 webapps\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 work\n~~~\n- 进入webapps/ROOT `ls -la`查看ROOT下文件\n~~~\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# ls -la\ntotal 192\ndrwxr-xr-x 3 root root  4096 Aug 22 00:26 .\ndrwxr-xr-x 7 root root  4096 Aug 14 22:24 ..\n-rw-r--r-- 1 root root  7139 Aug 14 22:27 RELEASE-NOTES.txt\ndrwxr-xr-x 2 root root  4096 Aug 22 00:26 WEB-INF\n-rw-r--r-- 1 root root 27235 Aug 14 22:27 asf-logo-wide.svg\n-rw-r--r-- 1 root root   713 Aug 14 22:24 bg-button.png\n-rw-r--r-- 1 root root  1918 Aug 14 22:24 bg-middle.png\n-rw-r--r-- 1 root root  1401 Aug 14 22:24 bg-nav.png\n-rw-r--r-- 1 root root  3103 Aug 14 22:24 bg-upper.png\n-rw-r--r-- 1 root root 21630 Aug 14 22:24 favicon.ico\n-rw-r--r-- 1 root root 12208 Aug 14 22:27 index.jsp\n-rw-r--r-- 1 root root  2376 Aug 14 22:24 tomcat-power.gif\n-rw-r--r-- 1 root root  5581 Aug 14 22:27 tomcat.css\n-rw-r--r-- 1 root root  2066 Aug 14 22:24 tomcat.gif\n-rw-r--r-- 1 root root  5103 Aug 14 22:24 tomcat.png\n-rw-r--r-- 1 root root 67795 Aug 14 22:27 tomcat.svg\n~~~\n- 查看index.jsp文件\n`cat index.jsp'\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# cat index.jsp\n\n- 追加hello docker tomcat 到 index.jsp中\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# echo \"hello docker tomcat\" >> index.jsp\n\n- 退出容器\nexit\n\n- 运行docker的tomcat\n因为我的8080端口本身就被宿主机的tomcat占用,所有这里解析到8081\n`docker run -p 8081:8080 tomcat`\n\t- run代表启动一个新容器,相当于new,触发隔离机制\n\t- `-P`(大写P) 参数来指定端口映射标记时，Docker 会随机映射一个端口到内部容器开放的网络端口 (端口范围在 Linux 系统使用的端口之外，一般都过万)\n\t- `-p`(小写p)可以指定要映射的端口，并且在一个指定的端口上只可以绑定一个容器。支持的格式有:IP:HostPort:ContainerPort | IP::ContainerPort | HostPort:ContainerPort \n\t- :之前的表示宿主机的端口\n\t- :之后的表示容器的端口\n\t- :表示映射\n- 在web端查看有没有hello docker tomcat\n发现没有\n**notice** docker的沙箱机制隔离机制.这里比较细,需要的搜索下资料.\n\n- 另外登录一个用户查看正在运行的docker容器\n查看正在运行的容器`docker ps` \n~~~\nbeae6fea7aa7        tomcat              \"catalina.sh run\"   24 seconds ago      Up 24 seconds       0.0.0.0:8081->8080/tcp   thirsty_jang\n~~~\n\n8080端口,宿主机本身的tomcat 版本为7.0.76\n![](Docker学习6-Dockerfile定制镜像1/8080.png)\n\n8081端口,Docker的tomcat容器 版本为8.5.45\n![](Docker学习6-Dockerfile定制镜像1/8081.png)\n\n\n\n- 交互的方式启动容器\n\t- docker run -p 8081:8080 tomcat\n\n- 交互的方式进入容器\n\t- docker exec -it 容器id bash\n~~~\n➜  ~ sudo docker exec -it 7db bash\nroot@7db5c8940e5a:/usr/local/tomcat# \nroot@7db5c8940e5a:/usr/local/tomcat# cd webapps/\nroot@7db5c8940e5a:/usr/local/tomcat/webapps# cd ROOT\nroot@7db5c8940e5a:/usr/local/tomcat/webapps/ROOT# echo \"hello docker tomcat\" >> index.jsp\nroot@7db5c8940e5a:/usr/local/tomcat/webapps/ROOT#\nroot@7db5c8940e5a:/usr/local/tomcat/webapps/ROOT# cat index.jsp\n</html>\nhello docker tomcat\n~~~\n此时我们看到,hello docker tomcat 已经在文件中了\n打开浏览器查看结果\n\n![](Docker学习6-Dockerfile定制镜像1/hellodocker)\n\n- 查看所有容器`docker ps -a`\n~~~\n➜  ~ sudo docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES\na83388199fb6        tomcat              \"catalina.sh run\"        12 minutes ago      Created                                         flamboyant_goldstine\n071424b6b8ef        tomcat              \"bash\"                   33 minutes ago      Exited (0) 17 minutes ago                       compassionate_jones\nf6007831657c        tomcat              \"catalina.sh run\"        20 hours ago        Created                                         wizardly_newton\n8191ed8e159c        tomcat              \"catalina.sh run\"        20 hours ago        Exited (130) 20 hours ago                       busy_bhabha\n7c01da3b0629        nginx:1.16.1        \"nginx -g 'daemon of…\"   3 weeks ago         Exited (0) 24 hours ago                         MyNginx\n~~~\n\n- 删除正在运行的tomcat容器\n`sudo docker rm f6007831657c` 后面那串字符是编号\n~~~\n➜  ~ sudo docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS   NAMES\n7c01da3b0629        nginx:1.16.1        \"nginx -g 'daemon of…\"   3 weeks ago         Exited   MyNginx\n~~~\n\n\n\n\n\n\n\n\n\n","slug":"Docker学习6-Dockerfile定制镜像1","published":1,"updated":"2021-04-20T13:28:10.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd250011zgl1qc08x4so","content":"<h1><span id=\"dockerfile\">Dockerfile</span></h1>\n<h2><span id=\"作用\">作用</span></h2>\n<p>可以将我们的应用程序打包进镜像,启动镜像的容器,一次编译处处运行.</p>\n<h2><span id=\"dockerfile是什么\">Dockerfile是什么?</span></h2>\n<p>windows的脚本叫bat, linux的脚本叫shell,docker的脚本叫Dockerfile<br>\n如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。<br>\nDockerfile是一个文本文件,其中包含了一条一条的指令(Instruction),因此每一条指令的内容，就是描述该层应当如何构建.</p>\n<p>这次我将在我的阿里云服务器使用 Dockerfile 来定制tomcat镜像为例.</p>\n<h2><span id=\"起步\">起步</span></h2>\n<ul>\n<li>\n<p>docker拉取tomcat<br>\n<code>docker pull tomcat</code></p>\n</li>\n<li>\n<p>进入docker拉取的tomcat<br>\n<code>docker run -it tomcat bash</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-it</span> <span class=\"string\">tomcat</span> <span class=\"string\">bash</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span></span><br><span class=\"line\"><span class=\"string\">root@071424b6b8ef:/usr/local/tomcat#</span></span><br><span class=\"line\"><span class=\"string\">root@071424b6b8ef:/usr/local/tomcat#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">160</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxrwsr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">15</span> <span class=\"number\">05</span><span class=\"string\">:20</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">19534</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">BUILDING.txt</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">5407</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">57011</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">LICENSE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">1726</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">NOTICE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">3255</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">README.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">16262</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RUNNING.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">bin</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">conf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">include</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">lib</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">logs</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">native-jni-lib</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">temp</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">7</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">webapps</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">work</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>进入webapps/ROOT <code>ls -la</code>查看ROOT下文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@071424b6b8ef:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">ls</span> <span class=\"string\">-la</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">192</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">7</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">WEB-INF</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">27235</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">asf-logo-wide.svg</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">713</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-button.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1918</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-middle.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1401</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-nav.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">3103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-upper.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">21630</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">favicon.ico</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">12208</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">index.jsp</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2376</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat-power.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5581</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.css</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2066</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">67795</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.svg</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>查看index.jsp文件<br>\n`cat index.jsp’<br>\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# cat index.jsp</p>\n</li>\n<li>\n<p>追加hello docker tomcat 到 index.jsp中<br>\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# echo “hello docker tomcat” &gt;&gt; index.jsp</p>\n</li>\n<li>\n<p>退出容器<br>\nexit</p>\n</li>\n<li>\n<p>运行docker的tomcat<br>\n因为我的8080端口本身就被宿主机的tomcat占用,所有这里解析到8081<br>\n<code>docker run -p 8081:8080 tomcat</code></p>\n<ul>\n<li>run代表启动一个新容器,相当于new,触发隔离机制</li>\n<li><code>-P</code>(大写P) 参数来指定端口映射标记时，Docker 会随机映射一个端口到内部容器开放的网络端口 (端口范围在 Linux 系统使用的端口之外，一般都过万)</li>\n<li><code>-p</code>(小写p)可以指定要映射的端口，并且在一个指定的端口上只可以绑定一个容器。支持的格式有:IP:HostPort:ContainerPort | IP::ContainerPort | HostPort:ContainerPort</li>\n<li>:之前的表示宿主机的端口</li>\n<li>:之后的表示容器的端口</li>\n<li>:表示映射</li>\n</ul>\n</li>\n<li>\n<p>在web端查看有没有hello docker tomcat<br>\n发现没有<br>\n<strong>notice</strong> docker的沙箱机制隔离机制.这里比较细,需要的搜索下资料.</p>\n</li>\n<li>\n<p>另外登录一个用户查看正在运行的docker容器<br>\n查看正在运行的容器<code>docker ps</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">beae6fea7aa7</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"number\">24</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">24</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">thirsty_jang</span></span><br></pre></td></tr></table></figure>\n<p>8080端口,宿主机本身的tomcat 版本为7.0.76<br>\n<img src=\"/2019/09/18/Docker学习6-Dockerfile定制镜像1/8080.png\" alt></p>\n<p>8081端口,Docker的tomcat容器 版本为8.5.45<br>\n<img src=\"/2019/09/18/Docker学习6-Dockerfile定制镜像1/8081.png\" alt></p>\n<ul>\n<li>\n<p>交互的方式启动容器</p>\n<ul>\n<li>docker run -p 8081:8080 tomcat</li>\n</ul>\n</li>\n<li>\n<p>交互的方式进入容器</p>\n<ul>\n<li>docker exec -it 容器id bash</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ sudo docker exec -it <span class=\"number\">7</span>db bash</span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat<span class=\"meta\"># </span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat<span class=\"meta\"># cd webapps/</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps<span class=\"meta\"># cd ROOT</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT<span class=\"meta\"># echo <span class=\"string\">\"hello docker tomcat\"</span> &gt;&gt; index.jsp</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT<span class=\"meta\">#</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT<span class=\"meta\"># cat index.jsp</span></span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">hello docker tomcat</span><br></pre></td></tr></table></figure>\n<p>此时我们看到,hello docker tomcat 已经在文件中了<br>\n打开浏览器查看结果</p>\n<p><img src=\"/2019/09/18/Docker学习6-Dockerfile定制镜像1/hellodocker\" alt></p>\n<ul>\n<li>查看所有容器<code>docker ps -a</code></li>\n</ul>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ sudo docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">a<span class=\"number\">83388199</span>fb<span class=\"number\">6</span>        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">12</span> minutes ago      Created                                         flamboyant_goldstine</span><br><span class=\"line\"><span class=\"number\">071424</span>b<span class=\"number\">6</span>b<span class=\"number\">8</span>ef        tomcat              <span class=\"string\">\"bash\"</span>                   <span class=\"number\">33</span> minutes ago      Exited (<span class=\"number\">0</span>) <span class=\"number\">17</span> minutes ago                       compassionate_jones</span><br><span class=\"line\">f<span class=\"number\">6007831657</span><span class=\"keyword\">c</span>        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">20</span> hours ago        Created                                         wizardly_newton</span><br><span class=\"line\"><span class=\"number\">8191</span>ed<span class=\"number\">8e159</span><span class=\"keyword\">c</span>        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">20</span> hours ago        Exited (<span class=\"number\">130</span>) <span class=\"number\">20</span> hours ago                       busy_bhabha</span><br><span class=\"line\"><span class=\"number\">7</span><span class=\"keyword\">c</span><span class=\"number\">01</span>da<span class=\"number\">3</span>b<span class=\"number\">0629</span>        nginx:<span class=\"number\">1.16</span>.<span class=\"number\">1</span>        <span class=\"string\">\"nginx -g 'daemon of…\"</span>   <span class=\"number\">3</span> weeks ago         Exited (<span class=\"number\">0</span>) <span class=\"number\">24</span> hours ago                         MyNginx</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除正在运行的tomcat容器<br>\n<code>sudo docker rm f6007831657c</code> 后面那串字符是编号</li>\n</ul>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  <span class=\"symbol\">~ sudo docker ps -a</span></span><br><span class=\"line\"><span class=\"symbol\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS   NAMES</span></span><br><span class=\"line\"><span class=\"symbol\">7c01da3b0629        nginx</span>:<span class=\"number\">1.16</span>.<span class=\"number\">1</span>        <span class=\"string\">\"nginx -g 'daemon of…\"</span>   <span class=\"number\">3</span> weeks ago         Exited   MyNginx</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>Dockerfile</h1>\n<h2>作用</h2>\n<p>可以将我们的应用程序打包进镜像,启动镜像的容器,一次编译处处运行.</p>\n<h2>Dockerfile是什么?</h2>\n<p>windows的脚本叫bat, linux的脚本叫shell,docker的脚本叫Dockerfile<br>\n如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。<br>\nDockerfile是一个文本文件,其中包含了一条一条的指令(Instruction),因此每一条指令的内容，就是描述该层应当如何构建.</p>\n<p>这次我将在我的阿里云服务器使用 Dockerfile 来定制tomcat镜像为例.</p>\n<h2>起步</h2>\n<ul>\n<li>\n<p>docker拉取tomcat<br>\n<code>docker pull tomcat</code></p>\n</li>\n<li>\n<p>进入docker拉取的tomcat<br>\n<code>docker run -it tomcat bash</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-it</span> <span class=\"string\">tomcat</span> <span class=\"string\">bash</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span></span><br><span class=\"line\"><span class=\"string\">root@071424b6b8ef:/usr/local/tomcat#</span></span><br><span class=\"line\"><span class=\"string\">root@071424b6b8ef:/usr/local/tomcat#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">160</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxrwsr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">15</span> <span class=\"number\">05</span><span class=\"string\">:20</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">19534</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">BUILDING.txt</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">5407</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">57011</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">LICENSE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">1726</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">NOTICE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">3255</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">README.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">16262</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RUNNING.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">bin</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">conf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">include</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">lib</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">logs</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">native-jni-lib</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">temp</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">7</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">webapps</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">work</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>进入webapps/ROOT <code>ls -la</code>查看ROOT下文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@071424b6b8ef:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">ls</span> <span class=\"string\">-la</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">192</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">7</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">WEB-INF</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">27235</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">asf-logo-wide.svg</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">713</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-button.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1918</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-middle.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1401</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-nav.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">3103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-upper.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">21630</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">favicon.ico</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">12208</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">index.jsp</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2376</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat-power.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5581</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.css</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2066</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">67795</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.svg</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>查看index.jsp文件<br>\n`cat index.jsp’<br>\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# cat index.jsp</p>\n</li>\n<li>\n<p>追加hello docker tomcat 到 index.jsp中<br>\nroot@071424b6b8ef:/usr/local/tomcat/webapps/ROOT# echo “hello docker tomcat” &gt;&gt; index.jsp</p>\n</li>\n<li>\n<p>退出容器<br>\nexit</p>\n</li>\n<li>\n<p>运行docker的tomcat<br>\n因为我的8080端口本身就被宿主机的tomcat占用,所有这里解析到8081<br>\n<code>docker run -p 8081:8080 tomcat</code></p>\n<ul>\n<li>run代表启动一个新容器,相当于new,触发隔离机制</li>\n<li><code>-P</code>(大写P) 参数来指定端口映射标记时，Docker 会随机映射一个端口到内部容器开放的网络端口 (端口范围在 Linux 系统使用的端口之外，一般都过万)</li>\n<li><code>-p</code>(小写p)可以指定要映射的端口，并且在一个指定的端口上只可以绑定一个容器。支持的格式有:IP:HostPort:ContainerPort | IP::ContainerPort | HostPort:ContainerPort</li>\n<li>:之前的表示宿主机的端口</li>\n<li>:之后的表示容器的端口</li>\n<li>:表示映射</li>\n</ul>\n</li>\n<li>\n<p>在web端查看有没有hello docker tomcat<br>\n发现没有<br>\n<strong>notice</strong> docker的沙箱机制隔离机制.这里比较细,需要的搜索下资料.</p>\n</li>\n<li>\n<p>另外登录一个用户查看正在运行的docker容器<br>\n查看正在运行的容器<code>docker ps</code></p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">beae6fea7aa7</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"number\">24</span> <span class=\"string\">seconds</span> <span class=\"string\">ago</span>      <span class=\"string\">Up</span> <span class=\"number\">24</span> <span class=\"string\">seconds</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">thirsty_jang</span></span><br></pre></td></tr></table></figure>\n<p>8080端口,宿主机本身的tomcat 版本为7.0.76<br>\n<img src=\"/2019/09/18/Docker学习6-Dockerfile定制镜像1/8080.png\" alt></p>\n<p>8081端口,Docker的tomcat容器 版本为8.5.45<br>\n<img src=\"/2019/09/18/Docker学习6-Dockerfile定制镜像1/8081.png\" alt></p>\n<ul>\n<li>\n<p>交互的方式启动容器</p>\n<ul>\n<li>docker run -p 8081:8080 tomcat</li>\n</ul>\n</li>\n<li>\n<p>交互的方式进入容器</p>\n<ul>\n<li>docker exec -it 容器id bash</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ sudo docker exec -it <span class=\"number\">7</span>db bash</span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat<span class=\"meta\"># </span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat<span class=\"meta\"># cd webapps/</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps<span class=\"meta\"># cd ROOT</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT<span class=\"meta\"># echo <span class=\"string\">\"hello docker tomcat\"</span> &gt;&gt; index.jsp</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT<span class=\"meta\">#</span></span><br><span class=\"line\">root<span class=\"symbol\">@7db5c8940e5a</span>:/usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT<span class=\"meta\"># cat index.jsp</span></span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">hello docker tomcat</span><br></pre></td></tr></table></figure>\n<p>此时我们看到,hello docker tomcat 已经在文件中了<br>\n打开浏览器查看结果</p>\n<p><img src=\"/2019/09/18/Docker学习6-Dockerfile定制镜像1/hellodocker\" alt></p>\n<ul>\n<li>查看所有容器<code>docker ps -a</code></li>\n</ul>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ sudo docker ps -a</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES</span><br><span class=\"line\">a<span class=\"number\">83388199</span>fb<span class=\"number\">6</span>        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">12</span> minutes ago      Created                                         flamboyant_goldstine</span><br><span class=\"line\"><span class=\"number\">071424</span>b<span class=\"number\">6</span>b<span class=\"number\">8</span>ef        tomcat              <span class=\"string\">\"bash\"</span>                   <span class=\"number\">33</span> minutes ago      Exited (<span class=\"number\">0</span>) <span class=\"number\">17</span> minutes ago                       compassionate_jones</span><br><span class=\"line\">f<span class=\"number\">6007831657</span><span class=\"keyword\">c</span>        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">20</span> hours ago        Created                                         wizardly_newton</span><br><span class=\"line\"><span class=\"number\">8191</span>ed<span class=\"number\">8e159</span><span class=\"keyword\">c</span>        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">20</span> hours ago        Exited (<span class=\"number\">130</span>) <span class=\"number\">20</span> hours ago                       busy_bhabha</span><br><span class=\"line\"><span class=\"number\">7</span><span class=\"keyword\">c</span><span class=\"number\">01</span>da<span class=\"number\">3</span>b<span class=\"number\">0629</span>        nginx:<span class=\"number\">1.16</span>.<span class=\"number\">1</span>        <span class=\"string\">\"nginx -g 'daemon of…\"</span>   <span class=\"number\">3</span> weeks ago         Exited (<span class=\"number\">0</span>) <span class=\"number\">24</span> hours ago                         MyNginx</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除正在运行的tomcat容器<br>\n<code>sudo docker rm f6007831657c</code> 后面那串字符是编号</li>\n</ul>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  <span class=\"symbol\">~ sudo docker ps -a</span></span><br><span class=\"line\"><span class=\"symbol\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS   NAMES</span></span><br><span class=\"line\"><span class=\"symbol\">7c01da3b0629        nginx</span>:<span class=\"number\">1.16</span>.<span class=\"number\">1</span>        <span class=\"string\">\"nginx -g 'daemon of…\"</span>   <span class=\"number\">3</span> weeks ago         Exited   MyNginx</span><br></pre></td></tr></table></figure>\n"},{"title":"Docker学习06-Dockerfile定制镜像03","catalog":true,"date":"2019-09-20T02:39:10.000Z","subtitle":"Dockerfile定制镜像03","header-img":null,"_content":"# Dockerfile定制镜像03\n\n## 镜像构建上下文(Context)\n`docker build -t <name> .`\n这里的点表示当前目录\n\n如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录，而 Dockerfile 就在当前目录，因此不少初学者以为这个路径是在指定 Dockerfile 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？\n\n首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。\n\n- 拓扑图如下\n~~~\nhost os          请求Rest Api          \ndocker run       <---------->      docker server\ndocker images        返回\n\nhost os                      请求Rest Api 带着当前目录的压缩包           docker server\ndocker build -t mydocker .       <--------------------->                 接收 docker build\n将当前目录打包                             返回                          构建镜像\n\n~~~\n如果在 Dockerfile 中这么写：\n~~~ Dockerfile\nCOPY ./package.json /app/\n~~~\n\n这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。\n- 上下文环境目录\n宿主机将. 当前目录打包后发送至docker server后,由docker解压打包文件后的目录.\n\n因此，COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 COPY ../package.json /app 或者 COPY /opt/xxxx /app 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。\n\n现在就可以理解刚才的命令 docker build -t nginx:v3 . 中的这个 .，实际上是在指定上下文的目录，docker build 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。\n\n实际上,dockerfile在打包过程中也说明了镜像构建的上下文\n\n## 在tomcat下新建一个index.html文件\n~~~ html\n<h1>Hello Docker</h1>\n~~~\n\n## 重新写dockerfile脚本\n~~~ dockerfile\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nCOPY index.html /usr/local/tomcat/webapps/ROOT\ntomcat sudo docker build -t test .\nSending build context to Docker daemon  15.87kB\n这里的context就已经构建到docker的守护进程中\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/4 : COPY index.html /usr/local/tomcat/webapps/ROOT\n ---> 1dbbbda7e1cb\nSuccessfully built 1dbbbda7e1cb\nSuccessfully tagged test:latest\n➜  tomcat sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ntest                latest              1dbbbda7e1cb        13 seconds ago      506MB\nmydocker            latest              4691fd38efff        2 hours ago         506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB\n~~~\n\n\n\n\n\n\n\n","source":"_posts/Docker学习6-Dockerfile定制镜像3.md","raw":"---\ntitle: Docker学习06-Dockerfile定制镜像03\ncatalog: true\ndate: 2019-09-20 10:39:10\nsubtitle: Dockerfile定制镜像03\nheader-img:\ntags: [Docker]\n---\n# Dockerfile定制镜像03\n\n## 镜像构建上下文(Context)\n`docker build -t <name> .`\n这里的点表示当前目录\n\n如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录，而 Dockerfile 就在当前目录，因此不少初学者以为这个路径是在指定 Dockerfile 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？\n\n首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。\n\n- 拓扑图如下\n~~~\nhost os          请求Rest Api          \ndocker run       <---------->      docker server\ndocker images        返回\n\nhost os                      请求Rest Api 带着当前目录的压缩包           docker server\ndocker build -t mydocker .       <--------------------->                 接收 docker build\n将当前目录打包                             返回                          构建镜像\n\n~~~\n如果在 Dockerfile 中这么写：\n~~~ Dockerfile\nCOPY ./package.json /app/\n~~~\n\n这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。\n- 上下文环境目录\n宿主机将. 当前目录打包后发送至docker server后,由docker解压打包文件后的目录.\n\n因此，COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 COPY ../package.json /app 或者 COPY /opt/xxxx /app 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。\n\n现在就可以理解刚才的命令 docker build -t nginx:v3 . 中的这个 .，实际上是在指定上下文的目录，docker build 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。\n\n实际上,dockerfile在打包过程中也说明了镜像构建的上下文\n\n## 在tomcat下新建一个index.html文件\n~~~ html\n<h1>Hello Docker</h1>\n~~~\n\n## 重新写dockerfile脚本\n~~~ dockerfile\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nCOPY index.html /usr/local/tomcat/webapps/ROOT\ntomcat sudo docker build -t test .\nSending build context to Docker daemon  15.87kB\n这里的context就已经构建到docker的守护进程中\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/4 : COPY index.html /usr/local/tomcat/webapps/ROOT\n ---> 1dbbbda7e1cb\nSuccessfully built 1dbbbda7e1cb\nSuccessfully tagged test:latest\n➜  tomcat sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\ntest                latest              1dbbbda7e1cb        13 seconds ago      506MB\nmydocker            latest              4691fd38efff        2 hours ago         506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB\n~~~\n\n\n\n\n\n\n\n","slug":"Docker学习6-Dockerfile定制镜像3","published":1,"updated":"2021-04-20T13:28:10.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd260013zgl18d5vlk2a","content":"<h1><span id=\"dockerfile定制镜像03\">Dockerfile定制镜像03</span></h1>\n<h2><span id=\"镜像构建上下文context\">镜像构建上下文(Context)</span></h2>\n<p><code>docker build -t &lt;name&gt; .</code><br>\n这里的点表示当前目录</p>\n<p>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录，而 Dockerfile 就在当前目录，因此不少初学者以为这个路径是在指定 Dockerfile 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？</p>\n<p>首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>\n<ul>\n<li>拓扑图如下</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host os          请求Rest Api          </span><br><span class=\"line\">docker <span class=\"builtin-name\">run</span>       &lt;----------&gt;      docker server</span><br><span class=\"line\">docker images        返回</span><br><span class=\"line\"></span><br><span class=\"line\">host os                      请求Rest Api 带着当前目录的压缩包           docker server</span><br><span class=\"line\">docker build -t mydocker .       &lt;---------------------&gt;                 接收 docker build</span><br><span class=\"line\">将当前目录打包                             返回                          构建镜像</span><br></pre></td></tr></table></figure>\n<p>如果在 Dockerfile 中这么写：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>\n<p>这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。</p>\n<ul>\n<li>上下文环境目录<br>\n宿主机将. 当前目录打包后发送至docker server后,由docker解压打包文件后的目录.</li>\n</ul>\n<p>因此，COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 COPY …/package.json /app 或者 COPY /opt/xxxx /app 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>\n<p>现在就可以理解刚才的命令 docker build -t nginx:v3 . 中的这个 .，实际上是在指定上下文的目录，docker build 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>\n<p>实际上,dockerfile在打包过程中也说明了镜像构建的上下文</p>\n<h2><span id=\"在tomcat下新建一个indexhtml文件\">在tomcat下新建一个index.html文件</span></h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Docker<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"重新写dockerfile脚本\">重新写dockerfile脚本</span></h2>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> index.html /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT</span></span><br><span class=\"line\">tomcat sudo docker build -t test .</span><br><span class=\"line\">Sending build context to Docker daemon  <span class=\"number\">15.87</span>kB</span><br><span class=\"line\">这里的context就已经构建到docker的守护进程中</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">4</span> : <span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">4</span> : <span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">4</span> : <span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">4</span> : <span class=\"keyword\">COPY</span><span class=\"bash\"> index.html /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT</span></span><br><span class=\"line\"> ---&gt; <span class=\"number\">1</span>dbbbda7e1cb</span><br><span class=\"line\">Successfully built <span class=\"number\">1</span>dbbbda7e1cb</span><br><span class=\"line\">Successfully tagged test:latest</span><br><span class=\"line\">➜  tomcat sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">test                latest              <span class=\"number\">1</span>dbbbda7e1cb        <span class=\"number\">13</span> seconds ago      <span class=\"number\">506</span>MB</span><br><span class=\"line\">mydocker            latest              <span class=\"number\">4691</span>fd38efff        <span class=\"number\">2</span> hours ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\"><span class=\"number\">1.16</span>.<span class=\"number\">1</span>              latest              <span class=\"number\">97423576</span>f288        <span class=\"number\">3</span> weeks ago         <span class=\"number\">126</span>MB</span><br><span class=\"line\">tomcat              latest              <span class=\"number\">96</span>c4e536d0eb        <span class=\"number\">4</span> weeks ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\">nginx               <span class=\"number\">1.16</span>.<span class=\"number\">1</span>              <span class=\"number\">41</span>e97992fcd8        <span class=\"number\">5</span> weeks ago         <span class=\"number\">126</span>MB</span><br><span class=\"line\">ubuntu              <span class=\"number\">16.04</span>               <span class=\"number\">5</span>e13f8dd4c1a        <span class=\"number\">8</span> weeks ago         <span class=\"number\">120</span>MB</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>Dockerfile定制镜像03</h1>\n<h2>镜像构建上下文(Context)</h2>\n<p><code>docker build -t &lt;name&gt; .</code><br>\n这里的点表示当前目录</p>\n<p>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录，而 Dockerfile 就在当前目录，因此不少初学者以为这个路径是在指定 Dockerfile 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？</p>\n<p>首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>\n<ul>\n<li>拓扑图如下</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">host os          请求Rest Api          </span><br><span class=\"line\">docker <span class=\"builtin-name\">run</span>       &lt;----------&gt;      docker server</span><br><span class=\"line\">docker images        返回</span><br><span class=\"line\"></span><br><span class=\"line\">host os                      请求Rest Api 带着当前目录的压缩包           docker server</span><br><span class=\"line\">docker build -t mydocker .       &lt;---------------------&gt;                 接收 docker build</span><br><span class=\"line\">将当前目录打包                             返回                          构建镜像</span><br></pre></td></tr></table></figure>\n<p>如果在 Dockerfile 中这么写：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>\n<p>这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。</p>\n<ul>\n<li>上下文环境目录<br>\n宿主机将. 当前目录打包后发送至docker server后,由docker解压打包文件后的目录.</li>\n</ul>\n<p>因此，COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 COPY …/package.json /app 或者 COPY /opt/xxxx /app 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>\n<p>现在就可以理解刚才的命令 docker build -t nginx:v3 . 中的这个 .，实际上是在指定上下文的目录，docker build 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>\n<p>实际上,dockerfile在打包过程中也说明了镜像构建的上下文</p>\n<h2>在tomcat下新建一个index.html文件</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Docker<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>重新写dockerfile脚本</h2>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> index.html /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT</span></span><br><span class=\"line\">tomcat sudo docker build -t test .</span><br><span class=\"line\">Sending build context to Docker daemon  <span class=\"number\">15.87</span>kB</span><br><span class=\"line\">这里的context就已经构建到docker的守护进程中</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">4</span> : <span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">4</span> : <span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">4</span> : <span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">4</span> : <span class=\"keyword\">COPY</span><span class=\"bash\"> index.html /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT</span></span><br><span class=\"line\"> ---&gt; <span class=\"number\">1</span>dbbbda7e1cb</span><br><span class=\"line\">Successfully built <span class=\"number\">1</span>dbbbda7e1cb</span><br><span class=\"line\">Successfully tagged test:latest</span><br><span class=\"line\">➜  tomcat sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">test                latest              <span class=\"number\">1</span>dbbbda7e1cb        <span class=\"number\">13</span> seconds ago      <span class=\"number\">506</span>MB</span><br><span class=\"line\">mydocker            latest              <span class=\"number\">4691</span>fd38efff        <span class=\"number\">2</span> hours ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\"><span class=\"number\">1.16</span>.<span class=\"number\">1</span>              latest              <span class=\"number\">97423576</span>f288        <span class=\"number\">3</span> weeks ago         <span class=\"number\">126</span>MB</span><br><span class=\"line\">tomcat              latest              <span class=\"number\">96</span>c4e536d0eb        <span class=\"number\">4</span> weeks ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\">nginx               <span class=\"number\">1.16</span>.<span class=\"number\">1</span>              <span class=\"number\">41</span>e97992fcd8        <span class=\"number\">5</span> weeks ago         <span class=\"number\">126</span>MB</span><br><span class=\"line\">ubuntu              <span class=\"number\">16.04</span>               <span class=\"number\">5</span>e13f8dd4c1a        <span class=\"number\">8</span> weeks ago         <span class=\"number\">120</span>MB</span><br></pre></td></tr></table></figure>\n"},{"title":"Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解","catalog":true,"date":"2019-09-23T02:10:01.000Z","subtitle":null,"header-img":null,"_content":"\n# Dockerfile指令详解\n我们已经介绍了 FROM，RUN，还提及了 COPY, ADD，其实 Dockerfile 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。\n\n## 练习过程\n将index.html打包成project.tar,使用dockerfile将project.tar部署到镜像,解压project.tar,并删除project.tar后,开启容器访问\n\n### 使用Dockerfile将压缩包导入镜像\n1. 准备压缩包里面的html\n~~~ html\n<h1>Hello Docker</h1>\n<h2>我是压缩后的文件</h2>\n~~~\n\n2. 编写dockerfile脚本\n~~~\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nCOPY project .\n~~~\n\n3. 测试Dockerfile脚本\n~~~\ncd /usr/local/docker\n[root@MyCentOS]/usr/local/docker# ls\ntomcat\n[root@MyCentOS]/usr/local/docker# cd tomcat\n[root@MyCentOS]/usr/local/docker/tomcat# ls\nDockerfile  index.html  project.tar\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon  13.82kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/4 : COPY project .\nCOPY failed: stat /var/lib/docker/tmp/docker-builder757135529/project: no such file or directory\n~~~\n报错的原因查看到时project没有写正确应该是project.tar\n\n4. 查看镜像里面的详情\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it mydocker bash\nroot@7590d3a9542a:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@7590d3a9542a:/usr/local/tomcat/webapps/ROOT#\n~~~\nindex.html也没有在原本的路径下删除.\n\n5. 重新修改Dockerfile文件.\n~~~ \n[root@MyCentOS]/usr/local/docker/tomcat# ls\nDockerfile  index.html  project.tar\n[root@MyCentOS]/usr/local/docker/tomcat# rm index.html\n[root@MyCentOS]/usr/local/docker/tomcat# ls\nDockerfile  project.tar\n[root@MyCentOS]/usr/local/docker/tomcat# vim Dockerfile\n[root@MyCentOS]/usr/local/docker/tomcat#\n~~~\n\n6. 再次执行`build`指令\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon   12.8kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/4 : COPY project.tar .\n ---> 3be1d6707ad0\nSuccessfully built 3be1d6707ad0\nSuccessfully tagged myproject:latest\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it myproject bash\nroot@3ea53b2ca71a:/usr/local/tomcat/webapps/ROOT# ls\nproject.tar\nroot@3ea53b2ca71a:/usr/local/tomcat/webapps/ROOT#\n~~~\n构建镜像成功,并且交互查看镜像路径下的tar文件存在.\n\n### 使用Dockerfile指令,解压打包的tar包并且删除tar包\n1. Dockerfile脚本\n~~~\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nCOPY project.tar .\nRUN tar -xf project.tar\nRUN rm project.tar\n~~~\n\n2. 执行`build`构建镜像\n~~~ \n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon   12.8kB\nStep 1/6 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/6 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/6 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/6 : COPY project.tar .\n ---> Using cache\n ---> 3be1d6707ad0\nStep 5/6 : RUN tar -xf project.tar\n ---> Running in 89050282e006\nRemoving intermediate container 89050282e006\n ---> e1ca7ee2959d\nStep 6/6 : RUN rm project.tar\n ---> Running in 6124469472a5\nRemoving intermediate container 6124469472a5\n ---> 1bb09f348be0\nSuccessfully built 1bb09f348be0\nSuccessfully tagged myproject:latest\n[root@MyCentOS]/usr/local/docker/tomcat#\n~~~\n3. 查看镜像里面的文件\n\n交互命令\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it --rm myproject bash\nroot@c7c2d4feff2c:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@c7c2d4feff2c:/usr/local/tomcat/webapps/ROOT#\n~~~\n\n4. 启动镜像容器\n~~~\nsudo docker run -p 8081:8080 myproject\n~~~\n\n5. 查看结果\n![](Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/1.png)\n字符编码未设置所有乱码.\n修改html\n~~~\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Docker文件测试</title>\n</head>\n\n<body>\n        <h1>Hello Docker</h1>\n        <h2>我是压缩后的文件</h2>\n</body>\n\n</html>\n~~~\n交互方式进入容器查看\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon   12.8kB\nStep 1/6 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/6 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/6 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/6 : COPY project.tar .\n ---> 2b0dfa7fb134\nStep 5/6 : RUN tar -xf project.tar\n ---> Running in 48de494adfe6\nRemoving intermediate container 48de494adfe6\n ---> 4ae473e72609\nStep 6/6 : RUN rm project.tar\n ---> Running in cb057261565c\nRemoving intermediate container cb057261565c\n ---> 98cdee09487c\nSuccessfully built 98cdee09487c\nSuccessfully tagged myproject:latest\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it --rm myproject bash\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# vi\nbash: vi: command not found\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# vi index.html\nbash: vi: command not found\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# cat index.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Docker文件测试</title>\n</head>\n\n<body>\n\t<h1>Hello Docker</h1>\n\t<h2>我是压缩后的文件</h2>\n</body>\n\n</html>\n~~~\n\n查看结果:\n\n![](Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/2.png)\n\n## 指令列表\n- COPY\n- ADD\n- CMD\n- ENTRYPOINT\n- ENV\n- VOLUME\n- EXPOSE\n- WORKDIR\n\n## COPY\n格式：\n~~~ dockerfile\nCOPY <源路径>... <目标路径>\nCOPY [\"<源路径1>\",... \"<目标路径>\"]\n~~~\n和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。\n\nCOPY 指令将从构建上下文目录中 <源路径> 的文件 / 目录复制到新的一层的镜像内的 <目标路径> 位置。比如：\n\nCOPY package.json /usr/src/app/\n<源路径> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：\n\nCOPY hom* /mydir/\nCOPY hom?.txt /mydir/\n<目标路径> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。\n\n此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。\n\n## ADD\nADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。\n\n比如 <源路径> 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <目标路径> 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。\n\n如果 <源路径> 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 <目标路径> 去。\n\n在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 ubuntu 中：\n\nFROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n...\n但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 ADD 命令了。\n\n在 Docker 官方的 Dockerfile 最佳实践文档 中要求，尽可能的使用 COPY，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。\n\n另外需要注意的是，ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。\n\n因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。\n\n## CMD\nCMD 指令的格式和 RUN 相似，也是两种格式：\n\nshell 格式：CMD <命令>\nexec 格式：CMD [\"可执行文件\", \"参数1\", \"参数2\"...]\n参数列表格式：CMD [\"参数1\", \"参数2\"...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。\n之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。\n\n在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 /bin/bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat /etc/os-release。这就是用 cat /etc/os-release 命令替换了默认的 /bin/bash 命令了，输出了系统版本信息。\n\n在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 \"，而不要使用单引号。\n\n如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：\n\nCMD echo $HOME\n在实际执行中，会将其变更为：\n\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。\n\n提到 CMD 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。\n\nDocker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。\n\n一些初学者将 CMD 写为：\n\nCMD service nginx start\n然后发现容器执行后就立即退出了。甚至在容器内去使用 systemctl 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。\n\n对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。\n\n而使用 service nginx start 命令，则是希望 upstart 来以后台守护进程形式启动 nginx 服务。而刚才说了 CMD service nginx start 会被理解为 CMD [ \"sh\", \"-c\", \"service nginx start\"]，因此主进程实际上是 sh。那么当 service nginx start 命令结束后，sh 也就结束了，sh 作为主进程退出了，自然就会令容器退出。\n\n正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n## ENTRYPOINT\nENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。\n\nENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。\n\n当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：\n\n<ENTRYPOINT> \"<CMD>\"\n那么有了 CMD 后，为什么还要有 ENTRYPOINT 呢？这种 <ENTRYPOINT> \"<CMD>\" 有什么好处么？让我们来看几个场景。\n\n## 场景一：让镜像变成像命令一样使用\n假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 CMD 来实现：\n\nFROM ubuntu:16.04\nRUN apt-get update \\\n    && apt-get install -y curl \\\n    && rm -rf /var/lib/apt/lists/*\nCMD [ \"curl\", \"-s\", \"http://ip.cn\" ]\n假如我们使用 docker build -t myip . 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：\n\n$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 CMD 中可以看到实质的命令是 curl，那么如果我们希望显示 HTTP 头信息，就需要加上 -i 参数。那么我们可以直接加 -i 参数给 docker run myip 么？\n\n$ docker run myip -i\ndocker: Error response from daemon: invalid header field value \"oci runtime error: container_linux.go:247: starting container process caused \\\"exec: \\\\\\\"-i\\\\\\\": executable file not found in $PATH\\\"\\n\".\n我们可以看到可执行文件找不到的报错，executable file not found。之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s http://ip.cn 后面。而 -i 根本不是命令，所以自然找不到。\n\n那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：\n\n$ docker run myip curl -s http://ip.cn -i\n这显然不是很好的解决方案，而使用 ENTRYPOINT 就可以解决这个问题。现在我们重新用 ENTRYPOINT 来实现这个镜像：\n\nFROM ubuntu:16.04\nRUN apt-get update \\\n    && apt-get install -y curl \\\n    && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [ \"curl\", \"-s\", \"http://ip.cn\" ]\n这次我们再来尝试直接使用 docker run myip -i：\n\n$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n\n$ docker run myip -i\nHTTP/1.1 200 OK\nServer: nginx/1.8.0\nDate: Tue, 22 Nov 2016 05:12:40 GMT\nContent-Type: text/html; charset=UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: 1.1 cache-2:80, 1.1 proxy-2_6:8006\nConnection: keep-alive\n\n当前 IP：61.148.226.66 来自：北京市 联通\n可以看到，这次成功了。这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 就是新的 CMD，因此会作为参数传给 curl，从而达到了我们预期的效果。\n\n## 场景二：应用运行前的准备工作\n启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。\n\n比如 mysql 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。\n\n此外，可能希望避免使用 root 用户去启动服务，从而提高安全性，而在启动服务前还需要以 root 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 root 身份执行，方便调试等。\n\n这些准备工作是和容器 CMD 无关的，无论 CMD 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 <CMD>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：\n\nFROM alpine:3.4\n...\nRUN addgroup -S redis && adduser -S -G redis redis\n...\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 6379\nCMD [ \"redis-server\" ]\n可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 docker-entrypoint.sh 脚本。\n\n## !/bin/sh\n~~~\n...\n# allow the container to be started with `--user`\nif [ \"$1\" = 'redis-server' -a \"$(id -u)\" = '0' ]; then\n\tchown -R redis .\n\texec su-exec redis \"$0\" \"$@\"\nfi\n\nexec \"$@\"\n~~~\n该脚本的内容就是根据 CMD 的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。比如：\n\n$ docker run -it redis id\nuid=0(root) gid=0(root) groups=0(root)\n## ENV\n格式有两种：\n\nENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>...\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。\n\nENV VERSION=1.0 DEBUG=on \\\n    NAME=\"Happy Feet\"\n这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。\n\n定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码：\n\nENV NODE_VERSION 7.2.0\n\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n  && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep \" node-v$NODE_VERSION-linux-x64.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n  && tar -xJf \"node-v$NODE_VERSION-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n  && rm \"node-v$NODE_VERSION-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。\n\n下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD。\n\n可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。\n\n## VOLUME\n格式为：\n\nVOLUME [\"<路径1>\", \"<路径2>\"...]\nVOLUME <路径>\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷 (volume) 中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\n\nVOLUME /data\n这里的 /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\n\ndocker run -d -v mydata:/data xxxx\n在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。\n\n## EXPOSE\n格式为 EXPOSE <端口1> [<端口2>...]。\n\nEXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 --icc=false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 --links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 --icc=false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。\n\n要将 EXPOSE 和在运行时使用 -p <宿主端口>:<容器端口> 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n## WORKDIR\n格式为 WORKDIR <工作目录路径>。\n\n使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。\n\n之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：\n\nRUN cd /app\nRUN echo \"hello\" > world.txt\n如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dockerfile 构建分层存储的概念不了解所导致的错误。\n\n之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd /app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。\n\n因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。\n\n\n## 参考文档\n> https://www.bilibili.com/video/av29384041/?p=37\n> https://www.funtl.com/zh/docker/Docker-%E6%93%8D%E4%BD%9C-Docker-%E5%AE%B9%E5%99%A8.html\n","source":"_posts/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解.md","raw":"---\ntitle: Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解\ncatalog: true\ndate: 2019-09-23 10:10:01\nsubtitle:\nheader-img:\ntags: [Docker, Dockerfile]\n---\n\n# Dockerfile指令详解\n我们已经介绍了 FROM，RUN，还提及了 COPY, ADD，其实 Dockerfile 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。\n\n## 练习过程\n将index.html打包成project.tar,使用dockerfile将project.tar部署到镜像,解压project.tar,并删除project.tar后,开启容器访问\n\n### 使用Dockerfile将压缩包导入镜像\n1. 准备压缩包里面的html\n~~~ html\n<h1>Hello Docker</h1>\n<h2>我是压缩后的文件</h2>\n~~~\n\n2. 编写dockerfile脚本\n~~~\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nCOPY project .\n~~~\n\n3. 测试Dockerfile脚本\n~~~\ncd /usr/local/docker\n[root@MyCentOS]/usr/local/docker# ls\ntomcat\n[root@MyCentOS]/usr/local/docker# cd tomcat\n[root@MyCentOS]/usr/local/docker/tomcat# ls\nDockerfile  index.html  project.tar\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon  13.82kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/4 : COPY project .\nCOPY failed: stat /var/lib/docker/tmp/docker-builder757135529/project: no such file or directory\n~~~\n报错的原因查看到时project没有写正确应该是project.tar\n\n4. 查看镜像里面的详情\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it mydocker bash\nroot@7590d3a9542a:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@7590d3a9542a:/usr/local/tomcat/webapps/ROOT#\n~~~\nindex.html也没有在原本的路径下删除.\n\n5. 重新修改Dockerfile文件.\n~~~ \n[root@MyCentOS]/usr/local/docker/tomcat# ls\nDockerfile  index.html  project.tar\n[root@MyCentOS]/usr/local/docker/tomcat# rm index.html\n[root@MyCentOS]/usr/local/docker/tomcat# ls\nDockerfile  project.tar\n[root@MyCentOS]/usr/local/docker/tomcat# vim Dockerfile\n[root@MyCentOS]/usr/local/docker/tomcat#\n~~~\n\n6. 再次执行`build`指令\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon   12.8kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/4 : COPY project.tar .\n ---> 3be1d6707ad0\nSuccessfully built 3be1d6707ad0\nSuccessfully tagged myproject:latest\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it myproject bash\nroot@3ea53b2ca71a:/usr/local/tomcat/webapps/ROOT# ls\nproject.tar\nroot@3ea53b2ca71a:/usr/local/tomcat/webapps/ROOT#\n~~~\n构建镜像成功,并且交互查看镜像路径下的tar文件存在.\n\n### 使用Dockerfile指令,解压打包的tar包并且删除tar包\n1. Dockerfile脚本\n~~~\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nCOPY project.tar .\nRUN tar -xf project.tar\nRUN rm project.tar\n~~~\n\n2. 执行`build`构建镜像\n~~~ \n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon   12.8kB\nStep 1/6 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/6 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/6 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/6 : COPY project.tar .\n ---> Using cache\n ---> 3be1d6707ad0\nStep 5/6 : RUN tar -xf project.tar\n ---> Running in 89050282e006\nRemoving intermediate container 89050282e006\n ---> e1ca7ee2959d\nStep 6/6 : RUN rm project.tar\n ---> Running in 6124469472a5\nRemoving intermediate container 6124469472a5\n ---> 1bb09f348be0\nSuccessfully built 1bb09f348be0\nSuccessfully tagged myproject:latest\n[root@MyCentOS]/usr/local/docker/tomcat#\n~~~\n3. 查看镜像里面的文件\n\n交互命令\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it --rm myproject bash\nroot@c7c2d4feff2c:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@c7c2d4feff2c:/usr/local/tomcat/webapps/ROOT#\n~~~\n\n4. 启动镜像容器\n~~~\nsudo docker run -p 8081:8080 myproject\n~~~\n\n5. 查看结果\n![](Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/1.png)\n字符编码未设置所有乱码.\n修改html\n~~~\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Docker文件测试</title>\n</head>\n\n<body>\n        <h1>Hello Docker</h1>\n        <h2>我是压缩后的文件</h2>\n</body>\n\n</html>\n~~~\n交互方式进入容器查看\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .\nSending build context to Docker daemon   12.8kB\nStep 1/6 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/6 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Using cache\n ---> 9350deb03d0d\nStep 3/6 : RUN rm -fr *\n ---> Using cache\n ---> f6814fab3fe4\nStep 4/6 : COPY project.tar .\n ---> 2b0dfa7fb134\nStep 5/6 : RUN tar -xf project.tar\n ---> Running in 48de494adfe6\nRemoving intermediate container 48de494adfe6\n ---> 4ae473e72609\nStep 6/6 : RUN rm project.tar\n ---> Running in cb057261565c\nRemoving intermediate container cb057261565c\n ---> 98cdee09487c\nSuccessfully built 98cdee09487c\nSuccessfully tagged myproject:latest\n[root@MyCentOS]/usr/local/docker/tomcat# docker run -it --rm myproject bash\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# vi\nbash: vi: command not found\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# vi index.html\nbash: vi: command not found\nroot@fff6dea62b52:/usr/local/tomcat/webapps/ROOT# cat index.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Docker文件测试</title>\n</head>\n\n<body>\n\t<h1>Hello Docker</h1>\n\t<h2>我是压缩后的文件</h2>\n</body>\n\n</html>\n~~~\n\n查看结果:\n\n![](Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/2.png)\n\n## 指令列表\n- COPY\n- ADD\n- CMD\n- ENTRYPOINT\n- ENV\n- VOLUME\n- EXPOSE\n- WORKDIR\n\n## COPY\n格式：\n~~~ dockerfile\nCOPY <源路径>... <目标路径>\nCOPY [\"<源路径1>\",... \"<目标路径>\"]\n~~~\n和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。\n\nCOPY 指令将从构建上下文目录中 <源路径> 的文件 / 目录复制到新的一层的镜像内的 <目标路径> 位置。比如：\n\nCOPY package.json /usr/src/app/\n<源路径> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：\n\nCOPY hom* /mydir/\nCOPY hom?.txt /mydir/\n<目标路径> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。\n\n此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。\n\n## ADD\nADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。\n\n比如 <源路径> 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <目标路径> 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。\n\n如果 <源路径> 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 <目标路径> 去。\n\n在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 ubuntu 中：\n\nFROM scratch\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /\n...\n但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 ADD 命令了。\n\n在 Docker 官方的 Dockerfile 最佳实践文档 中要求，尽可能的使用 COPY，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。\n\n另外需要注意的是，ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。\n\n因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。\n\n## CMD\nCMD 指令的格式和 RUN 相似，也是两种格式：\n\nshell 格式：CMD <命令>\nexec 格式：CMD [\"可执行文件\", \"参数1\", \"参数2\"...]\n参数列表格式：CMD [\"参数1\", \"参数2\"...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。\n之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。\n\n在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 /bin/bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat /etc/os-release。这就是用 cat /etc/os-release 命令替换了默认的 /bin/bash 命令了，输出了系统版本信息。\n\n在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 \"，而不要使用单引号。\n\n如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：\n\nCMD echo $HOME\n在实际执行中，会将其变更为：\n\nCMD [ \"sh\", \"-c\", \"echo $HOME\" ]\n这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。\n\n提到 CMD 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。\n\nDocker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。\n\n一些初学者将 CMD 写为：\n\nCMD service nginx start\n然后发现容器执行后就立即退出了。甚至在容器内去使用 systemctl 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。\n\n对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。\n\n而使用 service nginx start 命令，则是希望 upstart 来以后台守护进程形式启动 nginx 服务。而刚才说了 CMD service nginx start 会被理解为 CMD [ \"sh\", \"-c\", \"service nginx start\"]，因此主进程实际上是 sh。那么当 service nginx start 命令结束后，sh 也就结束了，sh 作为主进程退出了，自然就会令容器退出。\n\n正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n## ENTRYPOINT\nENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。\n\nENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。\n\n当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：\n\n<ENTRYPOINT> \"<CMD>\"\n那么有了 CMD 后，为什么还要有 ENTRYPOINT 呢？这种 <ENTRYPOINT> \"<CMD>\" 有什么好处么？让我们来看几个场景。\n\n## 场景一：让镜像变成像命令一样使用\n假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 CMD 来实现：\n\nFROM ubuntu:16.04\nRUN apt-get update \\\n    && apt-get install -y curl \\\n    && rm -rf /var/lib/apt/lists/*\nCMD [ \"curl\", \"-s\", \"http://ip.cn\" ]\n假如我们使用 docker build -t myip . 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：\n\n$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 CMD 中可以看到实质的命令是 curl，那么如果我们希望显示 HTTP 头信息，就需要加上 -i 参数。那么我们可以直接加 -i 参数给 docker run myip 么？\n\n$ docker run myip -i\ndocker: Error response from daemon: invalid header field value \"oci runtime error: container_linux.go:247: starting container process caused \\\"exec: \\\\\\\"-i\\\\\\\": executable file not found in $PATH\\\"\\n\".\n我们可以看到可执行文件找不到的报错，executable file not found。之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s http://ip.cn 后面。而 -i 根本不是命令，所以自然找不到。\n\n那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：\n\n$ docker run myip curl -s http://ip.cn -i\n这显然不是很好的解决方案，而使用 ENTRYPOINT 就可以解决这个问题。现在我们重新用 ENTRYPOINT 来实现这个镜像：\n\nFROM ubuntu:16.04\nRUN apt-get update \\\n    && apt-get install -y curl \\\n    && rm -rf /var/lib/apt/lists/*\nENTRYPOINT [ \"curl\", \"-s\", \"http://ip.cn\" ]\n这次我们再来尝试直接使用 docker run myip -i：\n\n$ docker run myip\n当前 IP：61.148.226.66 来自：北京市 联通\n\n$ docker run myip -i\nHTTP/1.1 200 OK\nServer: nginx/1.8.0\nDate: Tue, 22 Nov 2016 05:12:40 GMT\nContent-Type: text/html; charset=UTF-8\nVary: Accept-Encoding\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1\nX-Cache: MISS from cache-2\nX-Cache-Lookup: MISS from cache-2:80\nX-Cache: MISS from proxy-2_6\nTransfer-Encoding: chunked\nVia: 1.1 cache-2:80, 1.1 proxy-2_6:8006\nConnection: keep-alive\n\n当前 IP：61.148.226.66 来自：北京市 联通\n可以看到，这次成功了。这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 就是新的 CMD，因此会作为参数传给 curl，从而达到了我们预期的效果。\n\n## 场景二：应用运行前的准备工作\n启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。\n\n比如 mysql 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。\n\n此外，可能希望避免使用 root 用户去启动服务，从而提高安全性，而在启动服务前还需要以 root 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 root 身份执行，方便调试等。\n\n这些准备工作是和容器 CMD 无关的，无论 CMD 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 <CMD>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：\n\nFROM alpine:3.4\n...\nRUN addgroup -S redis && adduser -S -G redis redis\n...\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\nEXPOSE 6379\nCMD [ \"redis-server\" ]\n可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 docker-entrypoint.sh 脚本。\n\n## !/bin/sh\n~~~\n...\n# allow the container to be started with `--user`\nif [ \"$1\" = 'redis-server' -a \"$(id -u)\" = '0' ]; then\n\tchown -R redis .\n\texec su-exec redis \"$0\" \"$@\"\nfi\n\nexec \"$@\"\n~~~\n该脚本的内容就是根据 CMD 的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。比如：\n\n$ docker run -it redis id\nuid=0(root) gid=0(root) groups=0(root)\n## ENV\n格式有两种：\n\nENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>...\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。\n\nENV VERSION=1.0 DEBUG=on \\\n    NAME=\"Happy Feet\"\n这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。\n\n定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码：\n\nENV NODE_VERSION 7.2.0\n\nRUN curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" \\\n  && curl -SLO \"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" \\\n  && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\\n  && grep \" node-v$NODE_VERSION-linux-x64.tar.xz\\$\" SHASUMS256.txt | sha256sum -c - \\\n  && tar -xJf \"node-v$NODE_VERSION-linux-x64.tar.xz\" -C /usr/local --strip-components=1 \\\n  && rm \"node-v$NODE_VERSION-linux-x64.tar.xz\" SHASUMS256.txt.asc SHASUMS256.txt \\\n  && ln -s /usr/local/bin/node /usr/local/bin/nodejs\n在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。\n\n下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD。\n\n可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。\n\n## VOLUME\n格式为：\n\nVOLUME [\"<路径1>\", \"<路径2>\"...]\nVOLUME <路径>\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷 (volume) 中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\n\nVOLUME /data\n这里的 /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：\n\ndocker run -d -v mydata:/data xxxx\n在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。\n\n## EXPOSE\n格式为 EXPOSE <端口1> [<端口2>...]。\n\nEXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。\n\n此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 --icc=false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 --links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 --icc=false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。\n\n要将 EXPOSE 和在运行时使用 -p <宿主端口>:<容器端口> 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。\n\n## WORKDIR\n格式为 WORKDIR <工作目录路径>。\n\n使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。\n\n之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：\n\nRUN cd /app\nRUN echo \"hello\" > world.txt\n如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dockerfile 构建分层存储的概念不了解所导致的错误。\n\n之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd /app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。\n\n因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。\n\n\n## 参考文档\n> https://www.bilibili.com/video/av29384041/?p=37\n> https://www.funtl.com/zh/docker/Docker-%E6%93%8D%E4%BD%9C-Docker-%E5%AE%B9%E5%99%A8.html\n","slug":"Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解","published":1,"updated":"2021-04-20T13:28:10.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd270016zgl1250a7czn","content":"<h1><span id=\"dockerfile指令详解\">Dockerfile指令详解</span></h1>\n<p>我们已经介绍了 FROM，RUN，还提及了 COPY, ADD，其实 Dockerfile 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。</p>\n<h2><span id=\"练习过程\">练习过程</span></h2>\n<p>将index.html打包成project.tar,使用dockerfile将project.tar部署到镜像,解压project.tar,并删除project.tar后,开启容器访问</p>\n<h3><span id=\"使用dockerfile将压缩包导入镜像\">使用Dockerfile将压缩包导入镜像</span></h3>\n<ol>\n<li>准备压缩包里面的html</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Docker<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是压缩后的文件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编写dockerfile脚本</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> project .</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>测试Dockerfile脚本</li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/<span class=\"keyword\">local</span>/docker</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># ls</span></span><br><span class=\"line\">tomcat</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># cd tomcat</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># ls</span></span><br><span class=\"line\">Dockerfile  index.html  project.tar</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># docker build -t myproject .</span></span><br><span class=\"line\">Sending build context <span class=\"keyword\">to</span> Docker daemon  <span class=\"number\">13.82</span>kB</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">1</span>/<span class=\"number\">4</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">2</span>/<span class=\"number\">4</span> : WORKDIR /usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">3</span>/<span class=\"number\">4</span> : <span class=\"built_in\">RUN</span> rm -fr *</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">4</span>/<span class=\"number\">4</span> : COPY project .</span><br><span class=\"line\">COPY failed: stat /var/lib/docker/tmp/docker-builder757135529/project: no such file <span class=\"literal\">or</span> directory</span><br></pre></td></tr></table></figure>\n<p>报错的原因查看到时project没有写正确应该是project.tar</p>\n<ol start=\"4\">\n<li>查看镜像里面的详情</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker run -it mydocker bash</span></span><br><span class=\"line\">root<span class=\"variable\">@7590d3a9542a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root<span class=\"variable\">@7590d3a9542a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>index.html也没有在原本的路径下删除.</p>\n<ol start=\"5\">\n<li>重新修改Dockerfile文件.</li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># ls</span></span><br><span class=\"line\">Dockerfile  index.html  project.tar</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># rm index.html</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># ls</span></span><br><span class=\"line\">Dockerfile  project.tar</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># vim Dockerfile</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>再次执行<code>build</code>指令</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker build -t myproject .</span></span><br><span class=\"line\">Sending build context to Docker daemon   <span class=\"number\">12.8</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1/4</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96c4e536</span>d0eb</span><br><span class=\"line\">Step <span class=\"number\">2/4</span> : WORKDIR /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\">Step <span class=\"number\">3/4</span> : RUN rm -fr *</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step <span class=\"number\">4/4</span> : COPY project.tar .</span><br><span class=\"line\"> ---&gt; <span class=\"number\">3</span>be1d6707ad0</span><br><span class=\"line\">Successfully built <span class=\"number\">3</span>be1d6707ad0</span><br><span class=\"line\">Successfully tagged <span class=\"symbol\">myproject:</span>latest</span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker run -it myproject bash</span></span><br><span class=\"line\">root<span class=\"variable\">@3ea53b2ca71a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># ls</span></span><br><span class=\"line\">project.tar</span><br><span class=\"line\">root<span class=\"variable\">@3ea53b2ca71a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>构建镜像成功,并且交互查看镜像路径下的tar文件存在.</p>\n<h3><span id=\"使用dockerfile指令解压打包的tar包并且删除tar包\">使用Dockerfile指令,解压打包的tar包并且删除tar包</span></h3>\n<ol>\n<li>Dockerfile脚本</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> project.tar .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> tar -xf project.tar</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm project.tar</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>执行<code>build</code>构建镜像</li>\n</ol>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .</span><br><span class=\"line\">Sending build context to Docker daemon   <span class=\"number\">12.8</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">6</span> : <span class=\"type\">FROM</span> tomcat</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 96c4e536d0eb</span></span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">6</span> : <span class=\"type\">WORKDIR</span> /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Using cache</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; 9350deb03d0d</span></span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">6</span> : <span class=\"type\">RUN</span> rm -fr *</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Using cache</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; f6814fab3fe4</span></span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">6</span> : <span class=\"type\">COPY</span> project.tar .</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Using cache</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; 3be1d6707ad0</span></span><br><span class=\"line\">Step <span class=\"number\">5</span>/<span class=\"number\">6</span> : <span class=\"type\">RUN</span> tar -xf project.tar</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 89050282e006</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">89050282e006</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; e1ca7ee2959d</span></span><br><span class=\"line\">Step <span class=\"number\">6</span>/<span class=\"number\">6</span> : <span class=\"type\">RUN</span> rm project.tar</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 6124469472a5</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">6124469472</span>a5</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 1bb09f348be0</span></span><br><span class=\"line\">Successfully built <span class=\"number\">1</span>bb09f348be0</span><br><span class=\"line\">Successfully <span class=\"keyword\">tagged</span> myproject:latest</span><br><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat#</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看镜像里面的文件</li>\n</ol>\n<p>交互命令</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker run -it --rm myproject bash</span></span><br><span class=\"line\">root<span class=\"variable\">@c7c2d4feff2c</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root<span class=\"variable\">@c7c2d4feff2c</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>启动镜像容器</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker <span class=\"keyword\">run</span><span class=\"bash\"> -p 8081:8080 myproject</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>查看结果<br>\n<img src=\"/2019/09/23/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/1.png\" alt><br>\n字符编码未设置所有乱码.<br>\n修改html</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Docker文件测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Docker<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是压缩后的文件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>交互方式进入容器查看</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>tomcat<span class=\"meta\"># docker build -t myproject .</span></span><br><span class=\"line\">Sending build context to Docker daemon   <span class=\"number\">12.8</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">6</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">6</span> : WORKDIR <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">6</span> : RUN rm -fr *</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">6</span> : COPY project.tar .</span><br><span class=\"line\"> ---&gt; <span class=\"number\">2</span>b0dfa7fb134</span><br><span class=\"line\">Step <span class=\"number\">5</span>/<span class=\"number\">6</span> : RUN tar -xf project.tar</span><br><span class=\"line\"> ---&gt; Running in <span class=\"number\">48</span>de494adfe6</span><br><span class=\"line\">Removing intermediate container <span class=\"number\">48</span>de494adfe6</span><br><span class=\"line\"> ---&gt; <span class=\"number\">4</span>ae473e72609</span><br><span class=\"line\">Step <span class=\"number\">6</span>/<span class=\"number\">6</span> : RUN rm project.tar</span><br><span class=\"line\"> ---&gt; Running in cb057261565c</span><br><span class=\"line\">Removing intermediate container cb057261565c</span><br><span class=\"line\"> ---&gt; <span class=\"number\">98</span>cdee09487c</span><br><span class=\"line\">Successfully built <span class=\"number\">98</span>cdee09487c</span><br><span class=\"line\">Successfully tagged myproject:latest</span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>tomcat<span class=\"meta\"># docker run -it --rm myproject bash</span></span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># vi</span></span><br><span class=\"line\"><span class=\"symbol\">bash:</span> vi: command not found</span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># vi index.html</span></span><br><span class=\"line\"><span class=\"symbol\">bash:</span> vi: command not found</span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># cat index.html</span></span><br><span class=\"line\"><span class=\"params\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;meta charset=\"UTF<span class=\"number\">-8</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;title&gt;</span>Docker文件测试<span class=\"params\">&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/head&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;body&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h1&gt;</span>Hello Docker<span class=\"params\">&lt;/h1&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h2&gt;</span>我是压缩后的文件<span class=\"params\">&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/body&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>查看结果:</p>\n<p><img src=\"/2019/09/23/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/2.png\" alt></p>\n<h2><span id=\"指令列表\">指令列表</span></h2>\n<ul>\n<li>COPY</li>\n<li>ADD</li>\n<li>CMD</li>\n<li>ENTRYPOINT</li>\n<li>ENV</li>\n<li>VOLUME</li>\n<li>EXPOSE</li>\n<li>WORKDIR</li>\n</ul>\n<h2><span id=\"copy\">COPY</span></h2>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> &lt;源路径&gt;... &lt;目标路径&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> [<span class=\"string\">\"&lt;源路径1&gt;\"</span>,... <span class=\"string\">\"&lt;目标路径&gt;\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</p>\n<p>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件 / 目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。比如：</p>\n<p>COPY package.json /usr/src/app/<br>\n&lt;源路径&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p>\n<p>COPY hom* /mydir/<br>\nCOPY hom?.txt /mydir/<br>\n&lt;目标路径&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>\n<p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p>\n<h2><span id=\"add\">ADD</span></h2>\n<p>ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。</p>\n<p>比如 &lt;源路径&gt; 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;目标路径&gt; 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p>\n<p>如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。</p>\n<p>在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 ubuntu 中：</p>\n<p>FROM scratch<br>\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /<br>\n…<br>\n但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 ADD 命令了。</p>\n<p>在 Docker 官方的 Dockerfile 最佳实践文档 中要求，尽可能的使用 COPY，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。</p>\n<p>另外需要注意的是，ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>\n<p>因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。</p>\n<h2><span id=\"cmd\">CMD</span></h2>\n<p>CMD 指令的格式和 RUN 相似，也是两种格式：</p>\n<p>shell 格式：CMD &lt;命令&gt;<br>\nexec 格式：CMD [“可执行文件”, “参数1”, “参数2”…]<br>\n参数列表格式：CMD [“参数1”, “参数2”…]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。<br>\n之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。</p>\n<p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 /bin/bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat /etc/os-release。这就是用 cat /etc/os-release 命令替换了默认的 /bin/bash 命令了，输出了系统版本信息。</p>\n<p>在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &quot;，而不要使用单引号。</p>\n<p>如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：</p>\n<p>CMD echo $HOME<br>\n在实际执行中，会将其变更为：</p>\n<p>CMD [ “sh”, “-c”, “echo $HOME” ]<br>\n这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</p>\n<p>提到 CMD 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。</p>\n<p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。</p>\n<p>一些初学者将 CMD 写为：</p>\n<p>CMD service nginx start<br>\n然后发现容器执行后就立即退出了。甚至在容器内去使用 systemctl 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p>\n<p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p>\n<p>而使用 service nginx start 命令，则是希望 upstart 来以后台守护进程形式启动 nginx 服务。而刚才说了 CMD service nginx start 会被理解为 CMD [ “sh”, “-c”, “service nginx start”]，因此主进程实际上是 sh。那么当 service nginx start 命令结束后，sh 也就结束了，sh 作为主进程退出了，自然就会令容器退出。</p>\n<p>正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：</p>\n<p>CMD [“nginx”, “-g”, “daemon off;”]</p>\n<h2><span id=\"entrypoint\">ENTRYPOINT</span></h2>\n<p>ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。</p>\n<p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。</p>\n<p>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：</p>\n<p><entrypoint> &quot;<cmd>&quot;<br>\n那么有了 CMD 后，为什么还要有 ENTRYPOINT 呢？这种 <entrypoint> “<cmd>” 有什么好处么？让我们来看几个场景。</cmd></entrypoint></cmd></entrypoint></p>\n<h2><span id=\"场景一让镜像变成像命令一样使用\">场景一：让镜像变成像命令一样使用</span></h2>\n<p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 CMD 来实现：</p>\n<p>FROM ubuntu:16.04<br>\nRUN apt-get update <br>\n&amp;&amp; apt-get install -y curl <br>\n&amp;&amp; rm -rf /var/lib/apt/lists/*<br>\nCMD [ “curl”, “-s”, “<a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a>” ]<br>\n假如我们使用 docker build -t myip . 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p>\n<p>$ docker run myip<br>\n当前 IP：61.148.226.66 来自：北京市 联通<br>\n嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 CMD 中可以看到实质的命令是 curl，那么如果我们希望显示 HTTP 头信息，就需要加上 -i 参数。那么我们可以直接加 -i 参数给 docker run myip 么？</p>\n<p>$ docker run myip -i<br>\ndocker: Error response from daemon: invalid header field value “oci runtime error: container_linux.go:247: starting container process caused “exec: \\”-i\\”: executable file not found in $PATH&quot;\\n&quot;.<br>\n我们可以看到可执行文件找不到的报错，executable file not found。之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s <a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a> 后面。而 -i 根本不是命令，所以自然找不到。</p>\n<p>那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：</p>\n<p>$ docker run myip curl -s <a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a> -i<br>\n这显然不是很好的解决方案，而使用 ENTRYPOINT 就可以解决这个问题。现在我们重新用 ENTRYPOINT 来实现这个镜像：</p>\n<p>FROM ubuntu:16.04<br>\nRUN apt-get update <br>\n&amp;&amp; apt-get install -y curl <br>\n&amp;&amp; rm -rf /var/lib/apt/lists/*<br>\nENTRYPOINT [ “curl”, “-s”, “<a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a>” ]<br>\n这次我们再来尝试直接使用 docker run myip -i：</p>\n<p>$ docker run myip<br>\n当前 IP：61.148.226.66 来自：北京市 联通</p>\n<p>$ docker run myip -i<br>\nHTTP/1.1 200 OK<br>\nServer: nginx/1.8.0<br>\nDate: Tue, 22 Nov 2016 05:12:40 GMT<br>\nContent-Type: text/html; charset=UTF-8<br>\nVary: Accept-Encoding<br>\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1<br>\nX-Cache: MISS from cache-2<br>\nX-Cache-Lookup: MISS from cache-2:80<br>\nX-Cache: MISS from proxy-2_6<br>\nTransfer-Encoding: chunked<br>\nVia: 1.1 cache-2:80, 1.1 proxy-2_6:8006<br>\nConnection: keep-alive</p>\n<p>当前 IP：61.148.226.66 来自：北京市 联通<br>\n可以看到，这次成功了。这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 就是新的 CMD，因此会作为参数传给 curl，从而达到了我们预期的效果。</p>\n<h2><span id=\"场景二应用运行前的准备工作\">场景二：应用运行前的准备工作</span></h2>\n<p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p>\n<p>比如 mysql 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p>\n<p>此外，可能希望避免使用 root 用户去启动服务，从而提高安全性，而在启动服务前还需要以 root 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 root 身份执行，方便调试等。</p>\n<p>这些准备工作是和容器 CMD 无关的，无论 CMD 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 <cmd>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：</cmd></p>\n<p>FROM alpine:3.4<br>\n…<br>\nRUN addgroup -S redis &amp;&amp; adduser -S -G redis redis<br>\n…<br>\nENTRYPOINT [“<a href=\"http://docker-entrypoint.sh\" target=\"_blank\" rel=\"noopener\">docker-entrypoint.sh</a>”]</p>\n<p>EXPOSE 6379<br>\nCMD [ “redis-server” ]<br>\n可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 <a href=\"http://docker-entrypoint.sh\" target=\"_blank\" rel=\"noopener\">docker-entrypoint.sh</a> 脚本。</p>\n<h2><span id=\"binsh\">!/bin/sh</span></h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># allow the container to be started with `--user`</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> = <span class=\"string\">'redis-server'</span> -a <span class=\"string\">\"<span class=\"variable\">$(id -u)</span>\"</span> = <span class=\"string\">'0'</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\tchown -R redis .</span><br><span class=\"line\">\t<span class=\"built_in\">exec</span> su-exec redis <span class=\"string\">\"<span class=\"variable\">$0</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>该脚本的内容就是根据 CMD 的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。比如：</p>\n<p>$ docker run -it redis id<br>\nuid=0(root) gid=0(root) groups=0(root)</p>\n<h2><span id=\"env\">ENV</span></h2>\n<p>格式有两种：</p>\n<p>ENV <key> <value><br>\nENV <key1>=<value1> <key2>=<value2>…<br>\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</value2></key2></value1></key1></value></key></p>\n<p>ENV VERSION=1.0 DEBUG=on <br>\nNAME=&quot;Happy Feet&quot;<br>\n这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p>\n<p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码：</p>\n<p>ENV NODE_VERSION 7.2.0</p>\n<p>RUN curl -SLO “<a href=\"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz</a>” <br>\n&amp;&amp; curl -SLO “<a href=\"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc</a>” <br>\n&amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc <br>\n&amp;&amp; grep &quot; node-v$NODE_VERSION-linux-x64.tar.xz$&quot; SHASUMS256.txt | sha256sum -c - <br>\n&amp;&amp; tar -xJf “node-v$NODE_VERSION-linux-x64.tar.xz” -C /usr/local --strip-components=1 <br>\n&amp;&amp; rm “node-v$NODE_VERSION-linux-x64.tar.xz” SHASUMS256.txt.asc SHASUMS256.txt <br>\n&amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs<br>\n在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。</p>\n<p>下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD。</p>\n<p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。</p>\n<h2><span id=\"volume\">VOLUME</span></h2>\n<p>格式为：</p>\n<p>VOLUME [&quot;&lt;路径1&gt;&quot;, “&lt;路径2&gt;”…]<br>\nVOLUME &lt;路径&gt;<br>\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷 (volume) 中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>\n<p>VOLUME /data<br>\n这里的 /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>\n<p>docker run -d -v mydata:/data xxxx<br>\n在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</p>\n<h2><span id=\"expose\">EXPOSE</span></h2>\n<p>格式为 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;…]。</p>\n<p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</p>\n<p>此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 --icc=false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 --links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 --icc=false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。</p>\n<p>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h2><span id=\"workdir\">WORKDIR</span></h2>\n<p>格式为 WORKDIR &lt;工作目录路径&gt;。</p>\n<p>使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p>\n<p>之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p>\n<p>RUN cd /app<br>\nRUN echo “hello” &gt; world.txt<br>\n如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dockerfile 构建分层存储的概念不了解所导致的错误。</p>\n<p>之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd /app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p>\n<p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。</p>\n<h2><span id=\"参考文档\">参考文档</span></h2>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/av29384041/?p=37\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=37</a><br>\n<a href=\"https://www.funtl.com/zh/docker/Docker-%E6%93%8D%E4%BD%9C-Docker-%E5%AE%B9%E5%99%A8.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker/Docker-操作-Docker-容器.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Dockerfile指令详解</h1>\n<p>我们已经介绍了 FROM，RUN，还提及了 COPY, ADD，其实 Dockerfile 功能很强大，它提供了十多个指令。下面我们继续讲解其他的指令。</p>\n<h2>练习过程</h2>\n<p>将index.html打包成project.tar,使用dockerfile将project.tar部署到镜像,解压project.tar,并删除project.tar后,开启容器访问</p>\n<h3>使用Dockerfile将压缩包导入镜像</h3>\n<ol>\n<li>准备压缩包里面的html</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Docker<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是压缩后的文件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编写dockerfile脚本</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> project .</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>测试Dockerfile脚本</li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/<span class=\"keyword\">local</span>/docker</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># ls</span></span><br><span class=\"line\">tomcat</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># cd tomcat</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># ls</span></span><br><span class=\"line\">Dockerfile  index.html  project.tar</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># docker build -t myproject .</span></span><br><span class=\"line\">Sending build context <span class=\"keyword\">to</span> Docker daemon  <span class=\"number\">13.82</span>kB</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">1</span>/<span class=\"number\">4</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">2</span>/<span class=\"number\">4</span> : WORKDIR /usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">3</span>/<span class=\"number\">4</span> : <span class=\"built_in\">RUN</span> rm -fr *</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">4</span>/<span class=\"number\">4</span> : COPY project .</span><br><span class=\"line\">COPY failed: stat /var/lib/docker/tmp/docker-builder757135529/project: no such file <span class=\"literal\">or</span> directory</span><br></pre></td></tr></table></figure>\n<p>报错的原因查看到时project没有写正确应该是project.tar</p>\n<ol start=\"4\">\n<li>查看镜像里面的详情</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker run -it mydocker bash</span></span><br><span class=\"line\">root<span class=\"variable\">@7590d3a9542a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root<span class=\"variable\">@7590d3a9542a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>index.html也没有在原本的路径下删除.</p>\n<ol start=\"5\">\n<li>重新修改Dockerfile文件.</li>\n</ol>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># ls</span></span><br><span class=\"line\">Dockerfile  index.html  project.tar</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># rm index.html</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># ls</span></span><br><span class=\"line\">Dockerfile  project.tar</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># vim Dockerfile</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>再次执行<code>build</code>指令</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker build -t myproject .</span></span><br><span class=\"line\">Sending build context to Docker daemon   <span class=\"number\">12.8</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1/4</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96c4e536</span>d0eb</span><br><span class=\"line\">Step <span class=\"number\">2/4</span> : WORKDIR /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\">Step <span class=\"number\">3/4</span> : RUN rm -fr *</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step <span class=\"number\">4/4</span> : COPY project.tar .</span><br><span class=\"line\"> ---&gt; <span class=\"number\">3</span>be1d6707ad0</span><br><span class=\"line\">Successfully built <span class=\"number\">3</span>be1d6707ad0</span><br><span class=\"line\">Successfully tagged <span class=\"symbol\">myproject:</span>latest</span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker run -it myproject bash</span></span><br><span class=\"line\">root<span class=\"variable\">@3ea53b2ca71a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># ls</span></span><br><span class=\"line\">project.tar</span><br><span class=\"line\">root<span class=\"variable\">@3ea53b2ca71a</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>构建镜像成功,并且交互查看镜像路径下的tar文件存在.</p>\n<h3>使用Dockerfile指令,解压打包的tar包并且删除tar包</h3>\n<ol>\n<li>Dockerfile脚本</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> project.tar .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> tar -xf project.tar</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm project.tar</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>执行<code>build</code>构建镜像</li>\n</ol>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat# docker build -t myproject .</span><br><span class=\"line\">Sending build context to Docker daemon   <span class=\"number\">12.8</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">6</span> : <span class=\"type\">FROM</span> tomcat</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 96c4e536d0eb</span></span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">6</span> : <span class=\"type\">WORKDIR</span> /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Using cache</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; 9350deb03d0d</span></span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">6</span> : <span class=\"type\">RUN</span> rm -fr *</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Using cache</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; f6814fab3fe4</span></span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">6</span> : <span class=\"type\">COPY</span> project.tar .</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Using cache</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; 3be1d6707ad0</span></span><br><span class=\"line\">Step <span class=\"number\">5</span>/<span class=\"number\">6</span> : <span class=\"type\">RUN</span> tar -xf project.tar</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 89050282e006</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">89050282e006</span></span><br><span class=\"line\"> <span class=\"comment\">---&gt; e1ca7ee2959d</span></span><br><span class=\"line\">Step <span class=\"number\">6</span>/<span class=\"number\">6</span> : <span class=\"type\">RUN</span> rm project.tar</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 6124469472a5</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">6124469472</span>a5</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 1bb09f348be0</span></span><br><span class=\"line\">Successfully built <span class=\"number\">1</span>bb09f348be0</span><br><span class=\"line\">Successfully <span class=\"keyword\">tagged</span> myproject:latest</span><br><span class=\"line\">[root@MyCentOS]/usr/local/docker/tomcat#</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看镜像里面的文件</li>\n</ol>\n<p>交互命令</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]/usr/local/docker/tomcat<span class=\"comment\"># docker run -it --rm myproject bash</span></span><br><span class=\"line\">root<span class=\"variable\">@c7c2d4feff2c</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root<span class=\"variable\">@c7c2d4feff2c</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>启动镜像容器</li>\n</ol>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker <span class=\"keyword\">run</span><span class=\"bash\"> -p 8081:8080 myproject</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>查看结果<br>\n<img src=\"/2019/09/23/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/1.png\" alt><br>\n字符编码未设置所有乱码.<br>\n修改html</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Docker文件测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Docker<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是压缩后的文件<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>交互方式进入容器查看</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>tomcat<span class=\"meta\"># docker build -t myproject .</span></span><br><span class=\"line\">Sending build context to Docker daemon   <span class=\"number\">12.8</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">6</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">6</span> : WORKDIR <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; <span class=\"number\">9350</span>deb03d0d</span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">6</span> : RUN rm -fr *</span><br><span class=\"line\"> ---&gt; Using cache</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">6</span> : COPY project.tar .</span><br><span class=\"line\"> ---&gt; <span class=\"number\">2</span>b0dfa7fb134</span><br><span class=\"line\">Step <span class=\"number\">5</span>/<span class=\"number\">6</span> : RUN tar -xf project.tar</span><br><span class=\"line\"> ---&gt; Running in <span class=\"number\">48</span>de494adfe6</span><br><span class=\"line\">Removing intermediate container <span class=\"number\">48</span>de494adfe6</span><br><span class=\"line\"> ---&gt; <span class=\"number\">4</span>ae473e72609</span><br><span class=\"line\">Step <span class=\"number\">6</span>/<span class=\"number\">6</span> : RUN rm project.tar</span><br><span class=\"line\"> ---&gt; Running in cb057261565c</span><br><span class=\"line\">Removing intermediate container cb057261565c</span><br><span class=\"line\"> ---&gt; <span class=\"number\">98</span>cdee09487c</span><br><span class=\"line\">Successfully built <span class=\"number\">98</span>cdee09487c</span><br><span class=\"line\">Successfully tagged myproject:latest</span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>tomcat<span class=\"meta\"># docker run -it --rm myproject bash</span></span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># vi</span></span><br><span class=\"line\"><span class=\"symbol\">bash:</span> vi: command not found</span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># vi index.html</span></span><br><span class=\"line\"><span class=\"symbol\">bash:</span> vi: command not found</span><br><span class=\"line\">root@fff6dea62b52:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># cat index.html</span></span><br><span class=\"line\"><span class=\"params\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;meta charset=\"UTF<span class=\"number\">-8</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;title&gt;</span>Docker文件测试<span class=\"params\">&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/head&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;body&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h1&gt;</span>Hello Docker<span class=\"params\">&lt;/h1&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h2&gt;</span>我是压缩后的文件<span class=\"params\">&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/body&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>查看结果:</p>\n<p><img src=\"/2019/09/23/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/2.png\" alt></p>\n<h2>指令列表</h2>\n<ul>\n<li>COPY</li>\n<li>ADD</li>\n<li>CMD</li>\n<li>ENTRYPOINT</li>\n<li>ENV</li>\n<li>VOLUME</li>\n<li>EXPOSE</li>\n<li>WORKDIR</li>\n</ul>\n<h2>COPY</h2>\n<p>格式：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> &lt;源路径&gt;... &lt;目标路径&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> [<span class=\"string\">\"&lt;源路径1&gt;\"</span>,... <span class=\"string\">\"&lt;目标路径&gt;\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p>和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</p>\n<p>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件 / 目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。比如：</p>\n<p>COPY package.json /usr/src/app/<br>\n&lt;源路径&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p>\n<p>COPY hom* /mydir/<br>\nCOPY hom?.txt /mydir/<br>\n&lt;目标路径&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>\n<p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p>\n<h2>ADD</h2>\n<p>ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。</p>\n<p>比如 &lt;源路径&gt; 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;目标路径&gt; 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p>\n<p>如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。</p>\n<p>在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 ubuntu 中：</p>\n<p>FROM scratch<br>\nADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /<br>\n…<br>\n但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 ADD 命令了。</p>\n<p>在 Docker 官方的 Dockerfile 最佳实践文档 中要求，尽可能的使用 COPY，因为 COPY 的语义很明确，就是复制文件而已，而 ADD 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 ADD 的场合，就是所提及的需要自动解压缩的场合。</p>\n<p>另外需要注意的是，ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>\n<p>因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。</p>\n<h2>CMD</h2>\n<p>CMD 指令的格式和 RUN 相似，也是两种格式：</p>\n<p>shell 格式：CMD &lt;命令&gt;<br>\nexec 格式：CMD [“可执行文件”, “参数1”, “参数2”…]<br>\n参数列表格式：CMD [“参数1”, “参数2”…]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。<br>\n之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。</p>\n<p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 /bin/bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat /etc/os-release。这就是用 cat /etc/os-release 命令替换了默认的 /bin/bash 命令了，输出了系统版本信息。</p>\n<p>在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &quot;，而不要使用单引号。</p>\n<p>如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：</p>\n<p>CMD echo $HOME<br>\n在实际执行中，会将其变更为：</p>\n<p>CMD [ “sh”, “-c”, “echo $HOME” ]<br>\n这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</p>\n<p>提到 CMD 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。</p>\n<p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。</p>\n<p>一些初学者将 CMD 写为：</p>\n<p>CMD service nginx start<br>\n然后发现容器执行后就立即退出了。甚至在容器内去使用 systemctl 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p>\n<p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p>\n<p>而使用 service nginx start 命令，则是希望 upstart 来以后台守护进程形式启动 nginx 服务。而刚才说了 CMD service nginx start 会被理解为 CMD [ “sh”, “-c”, “service nginx start”]，因此主进程实际上是 sh。那么当 service nginx start 命令结束后，sh 也就结束了，sh 作为主进程退出了，自然就会令容器退出。</p>\n<p>正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：</p>\n<p>CMD [“nginx”, “-g”, “daemon off;”]</p>\n<h2>ENTRYPOINT</h2>\n<p>ENTRYPOINT 的格式和 RUN 指令格式一样，分为 exec 格式和 shell 格式。</p>\n<p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 --entrypoint 来指定。</p>\n<p>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：</p>\n<p><entrypoint> &quot;<cmd>&quot;<br>\n那么有了 CMD 后，为什么还要有 ENTRYPOINT 呢？这种 <entrypoint> “<cmd>” 有什么好处么？让我们来看几个场景。</cmd></entrypoint></cmd></entrypoint></p>\n<h2>场景一：让镜像变成像命令一样使用</h2>\n<p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 CMD 来实现：</p>\n<p>FROM ubuntu:16.04<br>\nRUN apt-get update <br>\n&amp;&amp; apt-get install -y curl <br>\n&amp;&amp; rm -rf /var/lib/apt/lists/*<br>\nCMD [ “curl”, “-s”, “<a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a>” ]<br>\n假如我们使用 docker build -t myip . 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p>\n<p>$ docker run myip<br>\n当前 IP：61.148.226.66 来自：北京市 联通<br>\n嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 CMD 中可以看到实质的命令是 curl，那么如果我们希望显示 HTTP 头信息，就需要加上 -i 参数。那么我们可以直接加 -i 参数给 docker run myip 么？</p>\n<p>$ docker run myip -i<br>\ndocker: Error response from daemon: invalid header field value “oci runtime error: container_linux.go:247: starting container process caused “exec: \\”-i\\”: executable file not found in $PATH&quot;\\n&quot;.<br>\n我们可以看到可执行文件找不到的报错，executable file not found。之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s <a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a> 后面。而 -i 根本不是命令，所以自然找不到。</p>\n<p>那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：</p>\n<p>$ docker run myip curl -s <a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a> -i<br>\n这显然不是很好的解决方案，而使用 ENTRYPOINT 就可以解决这个问题。现在我们重新用 ENTRYPOINT 来实现这个镜像：</p>\n<p>FROM ubuntu:16.04<br>\nRUN apt-get update <br>\n&amp;&amp; apt-get install -y curl <br>\n&amp;&amp; rm -rf /var/lib/apt/lists/*<br>\nENTRYPOINT [ “curl”, “-s”, “<a href=\"http://ip.cn\" target=\"_blank\" rel=\"noopener\">http://ip.cn</a>” ]<br>\n这次我们再来尝试直接使用 docker run myip -i：</p>\n<p>$ docker run myip<br>\n当前 IP：61.148.226.66 来自：北京市 联通</p>\n<p>$ docker run myip -i<br>\nHTTP/1.1 200 OK<br>\nServer: nginx/1.8.0<br>\nDate: Tue, 22 Nov 2016 05:12:40 GMT<br>\nContent-Type: text/html; charset=UTF-8<br>\nVary: Accept-Encoding<br>\nX-Powered-By: PHP/5.6.24-1~dotdeb+7.1<br>\nX-Cache: MISS from cache-2<br>\nX-Cache-Lookup: MISS from cache-2:80<br>\nX-Cache: MISS from proxy-2_6<br>\nTransfer-Encoding: chunked<br>\nVia: 1.1 cache-2:80, 1.1 proxy-2_6:8006<br>\nConnection: keep-alive</p>\n<p>当前 IP：61.148.226.66 来自：北京市 联通<br>\n可以看到，这次成功了。这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 就是新的 CMD，因此会作为参数传给 curl，从而达到了我们预期的效果。</p>\n<h2>场景二：应用运行前的准备工作</h2>\n<p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p>\n<p>比如 mysql 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p>\n<p>此外，可能希望避免使用 root 用户去启动服务，从而提高安全性，而在启动服务前还需要以 root 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 root 身份执行，方便调试等。</p>\n<p>这些准备工作是和容器 CMD 无关的，无论 CMD 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 <cmd>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：</cmd></p>\n<p>FROM alpine:3.4<br>\n…<br>\nRUN addgroup -S redis &amp;&amp; adduser -S -G redis redis<br>\n…<br>\nENTRYPOINT [“<a href=\"http://docker-entrypoint.sh\" target=\"_blank\" rel=\"noopener\">docker-entrypoint.sh</a>”]</p>\n<p>EXPOSE 6379<br>\nCMD [ “redis-server” ]<br>\n可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 <a href=\"http://docker-entrypoint.sh\" target=\"_blank\" rel=\"noopener\">docker-entrypoint.sh</a> 脚本。</p>\n<h2>!/bin/sh</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># allow the container to be started with `--user`</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> = <span class=\"string\">'redis-server'</span> -a <span class=\"string\">\"<span class=\"variable\">$(id -u)</span>\"</span> = <span class=\"string\">'0'</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\tchown -R redis .</span><br><span class=\"line\">\t<span class=\"built_in\">exec</span> su-exec redis <span class=\"string\">\"<span class=\"variable\">$0</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exec</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>该脚本的内容就是根据 CMD 的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。比如：</p>\n<p>$ docker run -it redis id<br>\nuid=0(root) gid=0(root) groups=0(root)</p>\n<h2>ENV</h2>\n<p>格式有两种：</p>\n<p>ENV <key> <value><br>\nENV <key1>=<value1> <key2>=<value2>…<br>\n这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</value2></key2></value1></key1></value></key></p>\n<p>ENV VERSION=1.0 DEBUG=on <br>\nNAME=&quot;Happy Feet&quot;<br>\n这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p>\n<p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码：</p>\n<p>ENV NODE_VERSION 7.2.0</p>\n<p>RUN curl -SLO “<a href=\"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz</a>” <br>\n&amp;&amp; curl -SLO “<a href=\"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc</a>” <br>\n&amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc <br>\n&amp;&amp; grep &quot; node-v$NODE_VERSION-linux-x64.tar.xz$&quot; SHASUMS256.txt | sha256sum -c - <br>\n&amp;&amp; tar -xJf “node-v$NODE_VERSION-linux-x64.tar.xz” -C /usr/local --strip-components=1 <br>\n&amp;&amp; rm “node-v$NODE_VERSION-linux-x64.tar.xz” SHASUMS256.txt.asc SHASUMS256.txt <br>\n&amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs<br>\n在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。</p>\n<p>下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD。</p>\n<p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。</p>\n<h2>VOLUME</h2>\n<p>格式为：</p>\n<p>VOLUME [&quot;&lt;路径1&gt;&quot;, “&lt;路径2&gt;”…]<br>\nVOLUME &lt;路径&gt;<br>\n之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷 (volume) 中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>\n<p>VOLUME /data<br>\n这里的 /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>\n<p>docker run -d -v mydata:/data xxxx<br>\n在这行命令中，就使用了 mydata 这个命名卷挂载到了 /data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</p>\n<h2>EXPOSE</h2>\n<p>格式为 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;…]。</p>\n<p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</p>\n<p>此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 --icc=false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 --links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 --icc=false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。</p>\n<p>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>\n<h2>WORKDIR</h2>\n<p>格式为 WORKDIR &lt;工作目录路径&gt;。</p>\n<p>使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p>\n<p>之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p>\n<p>RUN cd /app<br>\nRUN echo “hello” &gt; world.txt<br>\n如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 /app/world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dockerfile 构建分层存储的概念不了解所导致的错误。</p>\n<p>之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd /app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p>\n<p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。</p>\n<h2>参考文档</h2>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/av29384041/?p=37\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=37</a><br>\n<a href=\"https://www.funtl.com/zh/docker/Docker-%E6%93%8D%E4%BD%9C-Docker-%E5%AE%B9%E5%99%A8.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker/Docker-操作-Docker-容器.html</a></p>\n</blockquote>\n"},{"title":"Docker学习7-Docker容器","catalog":true,"date":"2019-09-23T07:26:49.000Z","subtitle":null,"header-img":null,"_content":"# Docker容器\n## 操作Docker容器\n容器是 Docker 又一核心概念。\n\n简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。\n\n本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。\n## 启动容器\n启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。\n\n因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。\n\n### 新建并启动\n所需要的命令主要为 docker run。\n\n例如，下面的命令输出一个 “Hello World”，之后终止容器。\n\n~~~\n$ docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n~~~\n这跟在本地直接执行 /bin/echo 'hello world' 几乎感觉不出任何区别。\n\n下面的命令则启动一个 bash 终端，允许用户进行交互。\n\n~~~\n$ docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n~~~\n\n其中，-t 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。\n\n在交互模式下，用户可以通过所创建的终端来输入命令，例如\n~~~\nroot@af8bae53bdd3:/# pwd\n/\nroot@af8bae53bdd3:/# ls\nbin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var\n~~~\n当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：\n\n检查本地是否存在指定的镜像，不存在就从公有仓库下载\n利用镜像创建并启动一个容器\n分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n从地址池配置一个 ip 地址给容器\n执行用户指定的应用程序\n执行完毕后容器被终止\n#启动已终止容器\n可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。\n\n容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。\n\n~~~\nroot@ba267838cc1b:/# ps\n  PID TTY          TIME CMD\n    1 ?        00:00:00 bash\n   11 ?        00:00:00 ps\n~~~\n可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。\n\n## 守护态运行\n更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下\n。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器\n\n`sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat`\n~~~\nsudo docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                    NAMES\nd53272c36764        tomcat              \"catalina.sh run\"   About a minute ago   Up About a minute   0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"   4 hours ago          Up 19 minutes       0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n结果查看:\n- 8081\n![](Docker学习7-Docker容器/1.png)\n- 8082\n![](Docker学习7-Docker容器/2.png)\n\n进程\n        主线程\n        工作线程\n## 终止进程\n终止容器\n可以使用 docker container stop 来终止一个运行中的容器。\n\n此外，当 Docker 容器中指定的应用终结时，容器也自动终止。\n\n例如对于上一章节中只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。\n\n终止状态的容器可以用 docker container ls -a 命令看到。例如\n~~~\ndocker container ls -a\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        ubuntu:14.04             \"/bin/bash\"            30 minutes ago      Exited (0) About a minute ago                       trusting_newton\n98e5efa7d997        training/webapp:latest   \"python app.py\"        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike\n~~~\n处于终止状态的容器，可以通过 docker container start 命令来重新启动。\n\n此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。\n## 进入容器\n在使用 -d 参数时，容器启动后会进入后台。\n\n某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，原因会在下面说明。\n\n### attach 命令\n\ndocker attach 是 Docker 自带的命令。下面示例如何使用该命令。\n~~~\n$ docker run -dit ubuntu\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n243c32535da7        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           nostalgic_hypatia\n\n$ docker attach 243c\nroot@243c32535da7:/#\n~~~\n\n注意： 如果从这个 stdin 中 exit，会导致容器的停止.\n\nexec 命令\n#-i -t 参数\ndocker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。\n\n只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。\n\n当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。\n~~~\n$ docker run -dit ubuntu\n69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n69d137adef7a        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           zealous_swirles\n\n$ docker exec -i 69d1 bash\nls\nbin\nboot\ndev\n...\n\n$ docker exec -it 69d1 bash\nroot@69d137adef7a:/#\n~~~\n如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。\n\n更多参数说明请使用 docker exec --help 查看。\n\n## 删除容器\n`docker rm <容器id>`\n`docker rm $(docker ps -a)`删除所有未运行容器\n`docker container prune` 删除所有未运行容器 prune意为修剪\n","source":"_posts/Docker学习7-Docker容器.md","raw":"---\ntitle: Docker学习7-Docker容器\ncatalog: true\ndate: 2019-09-23 15:26:49\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# Docker容器\n## 操作Docker容器\n容器是 Docker 又一核心概念。\n\n简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。\n\n本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。\n## 启动容器\n启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。\n\n因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。\n\n### 新建并启动\n所需要的命令主要为 docker run。\n\n例如，下面的命令输出一个 “Hello World”，之后终止容器。\n\n~~~\n$ docker run ubuntu:14.04 /bin/echo 'Hello world'\nHello world\n~~~\n这跟在本地直接执行 /bin/echo 'hello world' 几乎感觉不出任何区别。\n\n下面的命令则启动一个 bash 终端，允许用户进行交互。\n\n~~~\n$ docker run -t -i ubuntu:14.04 /bin/bash\nroot@af8bae53bdd3:/#\n~~~\n\n其中，-t 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。\n\n在交互模式下，用户可以通过所创建的终端来输入命令，例如\n~~~\nroot@af8bae53bdd3:/# pwd\n/\nroot@af8bae53bdd3:/# ls\nbin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var\n~~~\n当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：\n\n检查本地是否存在指定的镜像，不存在就从公有仓库下载\n利用镜像创建并启动一个容器\n分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n从地址池配置一个 ip 地址给容器\n执行用户指定的应用程序\n执行完毕后容器被终止\n#启动已终止容器\n可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。\n\n容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。\n\n~~~\nroot@ba267838cc1b:/# ps\n  PID TTY          TIME CMD\n    1 ?        00:00:00 bash\n   11 ?        00:00:00 ps\n~~~\n可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。\n\n## 守护态运行\n更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下\n。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器\n\n`sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat`\n~~~\nsudo docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                    NAMES\nd53272c36764        tomcat              \"catalina.sh run\"   About a minute ago   Up About a minute   0.0.0.0:8082->8080/tcp   mytomcat2\n849e5b576998        myproject           \"catalina.sh run\"   4 hours ago          Up 19 minutes       0.0.0.0:8081->8080/tcp   elastic_panini\n~~~\n结果查看:\n- 8081\n![](Docker学习7-Docker容器/1.png)\n- 8082\n![](Docker学习7-Docker容器/2.png)\n\n进程\n        主线程\n        工作线程\n## 终止进程\n终止容器\n可以使用 docker container stop 来终止一个运行中的容器。\n\n此外，当 Docker 容器中指定的应用终结时，容器也自动终止。\n\n例如对于上一章节中只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。\n\n终止状态的容器可以用 docker container ls -a 命令看到。例如\n~~~\ndocker container ls -a\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        ubuntu:14.04             \"/bin/bash\"            30 minutes ago      Exited (0) About a minute ago                       trusting_newton\n98e5efa7d997        training/webapp:latest   \"python app.py\"        About an hour ago   Exited (0) 34 minutes ago                           backstabbing_pike\n~~~\n处于终止状态的容器，可以通过 docker container start 命令来重新启动。\n\n此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。\n## 进入容器\n在使用 -d 参数时，容器启动后会进入后台。\n\n某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，原因会在下面说明。\n\n### attach 命令\n\ndocker attach 是 Docker 自带的命令。下面示例如何使用该命令。\n~~~\n$ docker run -dit ubuntu\n243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n243c32535da7        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           nostalgic_hypatia\n\n$ docker attach 243c\nroot@243c32535da7:/#\n~~~\n\n注意： 如果从这个 stdin 中 exit，会导致容器的停止.\n\nexec 命令\n#-i -t 参数\ndocker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。\n\n只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。\n\n当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。\n~~~\n$ docker run -dit ubuntu\n69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6\n\n$ docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n69d137adef7a        ubuntu:latest       \"/bin/bash\"         18 seconds ago      Up 17 seconds                           zealous_swirles\n\n$ docker exec -i 69d1 bash\nls\nbin\nboot\ndev\n...\n\n$ docker exec -it 69d1 bash\nroot@69d137adef7a:/#\n~~~\n如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。\n\n更多参数说明请使用 docker exec --help 查看。\n\n## 删除容器\n`docker rm <容器id>`\n`docker rm $(docker ps -a)`删除所有未运行容器\n`docker container prune` 删除所有未运行容器 prune意为修剪\n","slug":"Docker学习7-Docker容器","published":1,"updated":"2021-04-20T13:28:10.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd280018zgl14dfbbbtp","content":"<h1><span id=\"docker容器\">Docker容器</span></h1>\n<h2><span id=\"操作docker容器\">操作Docker容器</span></h2>\n<p>容器是 Docker 又一核心概念。</p>\n<p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p>\n<p>本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。</p>\n<h2><span id=\"启动容器\">启动容器</span></h2>\n<p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。</p>\n<p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p>\n<h3><span id=\"新建并启动\">新建并启动</span></h3>\n<p>所需要的命令主要为 docker run。</p>\n<p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">run</span><span class=\"bash\"> ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure>\n<p>这跟在本地直接执行 /bin/echo ‘hello world’ 几乎感觉不出任何区别。</p>\n<p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>docker run -t -i <span class=\"symbol\">ubuntu:</span><span class=\"number\">14.04</span> /bin/bash</span><br><span class=\"line\">root<span class=\"variable\">@af8bae53bdd3</span><span class=\"symbol\">:/</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>其中，-t 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p>\n<p>在交互模式下，用户可以通过所创建的终端来输入命令，例如</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"symbol\">af8bae53bdd3:</span>/<span class=\"comment\"># pwd</span></span><br><span class=\"line\">/</span><br><span class=\"line\">root@<span class=\"symbol\">af8bae53bdd3:</span>/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin boot dev etc home <span class=\"class\"><span class=\"keyword\">lib</span> <span class=\"title\">lib64</span> <span class=\"title\">media</span> <span class=\"title\">mnt</span> <span class=\"title\">opt</span> <span class=\"title\">proc</span> <span class=\"title\">root</span> <span class=\"title\">run</span> <span class=\"title\">sbin</span> <span class=\"title\">srv</span> <span class=\"title\">sys</span> <span class=\"title\">tmp</span> <span class=\"title\">usr</span> <span class=\"title\">var</span></span></span><br></pre></td></tr></table></figure>\n<p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>\n<p>检查本地是否存在指定的镜像，不存在就从公有仓库下载<br>\n利用镜像创建并启动一个容器<br>\n分配一个文件系统，并在只读的镜像层外面挂载一层可读写层<br>\n从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去<br>\n从地址池配置一个 ip 地址给容器<br>\n执行用户指定的应用程序<br>\n执行完毕后容器被终止<br>\n#启动已终止容器<br>\n可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。</p>\n<p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">root</span>@<span class=\"selector-tag\">ba267838cc1b</span>:/# <span class=\"selector-tag\">ps</span></span><br><span class=\"line\">  <span class=\"selector-tag\">PID</span> <span class=\"selector-tag\">TTY</span>          <span class=\"selector-tag\">TIME</span> <span class=\"selector-tag\">CMD</span></span><br><span class=\"line\">    <span class=\"selector-tag\">1</span> ?        <span class=\"selector-tag\">00</span><span class=\"selector-pseudo\">:00</span><span class=\"selector-pseudo\">:00</span> <span class=\"selector-tag\">bash</span></span><br><span class=\"line\">   <span class=\"selector-tag\">11</span> ?        <span class=\"selector-tag\">00</span><span class=\"selector-pseudo\">:00</span><span class=\"selector-pseudo\">:00</span> <span class=\"selector-tag\">ps</span></span><br></pre></td></tr></table></figure>\n<p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p>\n<h2><span id=\"守护态运行\">守护态运行</span></h2>\n<p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下<br>\n。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器</p>\n<p><code>sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>             <span class=\"string\">CREATED</span>              <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span> <span class=\"string\">ago</span>   <span class=\"string\">Up</span> <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span>   <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"number\">4</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<p>结果查看:</p>\n<ul>\n<li>8081<br>\n<img src=\"/2019/09/23/Docker学习7-Docker容器/1.png\" alt></li>\n<li>8082<br>\n<img src=\"/2019/09/23/Docker学习7-Docker容器/2.png\" alt></li>\n</ul>\n<p>进程<br>\n主线程<br>\n工作线程</p>\n<h2><span id=\"终止进程\">终止进程</span></h2>\n<p>终止容器<br>\n可以使用 docker container stop 来终止一个运行中的容器。</p>\n<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>\n<p>例如对于上一章节中只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</p>\n<p>终止状态的容器可以用 docker container ls -a 命令看到。例如</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"keyword\">ls</span> -a</span><br><span class=\"line\">CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES</span><br><span class=\"line\">ba267838cc1b        ubuntu:14.04             <span class=\"string\">\"/bin/bash\"</span>            30 minutes ago      Exited (0) <span class=\"keyword\">About</span> a minute ago                       trusting_newton</span><br><span class=\"line\">98e5efa7d997        training/webapp:latest   <span class=\"string\">\"python app.py\"</span>        <span class=\"keyword\">About</span> <span class=\"keyword\">an</span> hour ago   Exited (0) 34 minutes ago                           backstabbing_pike</span><br></pre></td></tr></table></figure>\n<p>处于终止状态的容器，可以通过 docker container start 命令来重新启动。</p>\n<p>此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。</p>\n<h2><span id=\"进入容器\">进入容器</span></h2>\n<p>在使用 -d 参数时，容器启动后会进入后台。</p>\n<p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，原因会在下面说明。</p>\n<h3><span id=\"attach-命令\">attach 命令</span></h3>\n<p>docker attach 是 Docker 自带的命令。下面示例如何使用该命令。</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\"><span class=\"number\">243</span><span class=\"keyword\">c</span><span class=\"number\">32535</span>da<span class=\"number\">7</span>d<span class=\"number\">142</span>fb<span class=\"number\">0e6</span>df<span class=\"number\">616</span>a<span class=\"number\">3</span><span class=\"keyword\">c</span><span class=\"number\">3</span>ada<span class=\"number\">0</span>b<span class=\"number\">8</span>ab<span class=\"number\">417937</span><span class=\"keyword\">c</span><span class=\"number\">853</span>a<span class=\"number\">9e1</span><span class=\"keyword\">c</span><span class=\"number\">251</span>f<span class=\"number\">499</span>f<span class=\"number\">550</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\"><span class=\"number\">243</span><span class=\"keyword\">c</span><span class=\"number\">32535</span>da<span class=\"number\">7</span>        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         <span class=\"number\">18</span> seconds ago      Up <span class=\"number\">17</span> seconds                           nostalgic_hypatia</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker attach <span class=\"number\">243</span><span class=\"keyword\">c</span></span><br><span class=\"line\">root<span class=\"title\">@243</span><span class=\"keyword\">c</span><span class=\"number\">32535</span>da<span class=\"number\">7</span>:/#</span><br></pre></td></tr></table></figure>\n<p>注意： 如果从这个 stdin 中 exit，会导致容器的停止.</p>\n<p>exec 命令<br>\n#-i -t 参数<br>\ndocker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。</p>\n<p>只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p>\n<p>当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\"><span class=\"number\">69</span>d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\"><span class=\"symbol\">CONTAINER</span> ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\"><span class=\"number\">69</span>d137adef7a        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         <span class=\"number\">18</span> seconds ago      Up <span class=\"number\">17</span> seconds                           zealous_swirles</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker exec -i <span class=\"number\">69</span><span class=\"built_in\">d1</span> <span class=\"keyword\">bash</span></span><br><span class=\"line\"><span class=\"keyword\">ls</span></span><br><span class=\"line\"><span class=\"keyword\">bin</span></span><br><span class=\"line\"><span class=\"keyword\">boot</span></span><br><span class=\"line\"><span class=\"keyword\">dev</span></span><br><span class=\"line\"><span class=\"keyword\">...</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>docker exec -<span class=\"keyword\">it </span><span class=\"number\">69</span><span class=\"built_in\">d1</span> <span class=\"keyword\">bash</span></span><br><span class=\"line\"><span class=\"keyword\">root@69d137adef7a:/#</span></span><br></pre></td></tr></table></figure>\n<p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。</p>\n<p>更多参数说明请使用 docker exec --help 查看。</p>\n<h2><span id=\"删除容器\">删除容器</span></h2>\n<p><code>docker rm &lt;容器id&gt;</code><br>\n<code>docker rm $(docker ps -a)</code>删除所有未运行容器<br>\n<code>docker container prune</code> 删除所有未运行容器 prune意为修剪</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker容器</h1>\n<h2>操作Docker容器</h2>\n<p>容器是 Docker 又一核心概念。</p>\n<p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p>\n<p>本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。</p>\n<h2>启动容器</h2>\n<p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。</p>\n<p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p>\n<h3>新建并启动</h3>\n<p>所需要的命令主要为 docker run。</p>\n<p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">run</span><span class=\"bash\"> ubuntu:14.04 /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'Hello world'</span></span></span><br><span class=\"line\">Hello world</span><br></pre></td></tr></table></figure>\n<p>这跟在本地直接执行 /bin/echo ‘hello world’ 几乎感觉不出任何区别。</p>\n<p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>docker run -t -i <span class=\"symbol\">ubuntu:</span><span class=\"number\">14.04</span> /bin/bash</span><br><span class=\"line\">root<span class=\"variable\">@af8bae53bdd3</span><span class=\"symbol\">:/</span><span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<p>其中，-t 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。</p>\n<p>在交互模式下，用户可以通过所创建的终端来输入命令，例如</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"symbol\">af8bae53bdd3:</span>/<span class=\"comment\"># pwd</span></span><br><span class=\"line\">/</span><br><span class=\"line\">root@<span class=\"symbol\">af8bae53bdd3:</span>/<span class=\"comment\"># ls</span></span><br><span class=\"line\">bin boot dev etc home <span class=\"class\"><span class=\"keyword\">lib</span> <span class=\"title\">lib64</span> <span class=\"title\">media</span> <span class=\"title\">mnt</span> <span class=\"title\">opt</span> <span class=\"title\">proc</span> <span class=\"title\">root</span> <span class=\"title\">run</span> <span class=\"title\">sbin</span> <span class=\"title\">srv</span> <span class=\"title\">sys</span> <span class=\"title\">tmp</span> <span class=\"title\">usr</span> <span class=\"title\">var</span></span></span><br></pre></td></tr></table></figure>\n<p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>\n<p>检查本地是否存在指定的镜像，不存在就从公有仓库下载<br>\n利用镜像创建并启动一个容器<br>\n分配一个文件系统，并在只读的镜像层外面挂载一层可读写层<br>\n从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去<br>\n从地址池配置一个 ip 地址给容器<br>\n执行用户指定的应用程序<br>\n执行完毕后容器被终止<br>\n#启动已终止容器<br>\n可以利用 docker container start 命令，直接将一个已经终止的容器启动运行。</p>\n<p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 ps 或 top 来查看进程信息。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">root</span>@<span class=\"selector-tag\">ba267838cc1b</span>:/# <span class=\"selector-tag\">ps</span></span><br><span class=\"line\">  <span class=\"selector-tag\">PID</span> <span class=\"selector-tag\">TTY</span>          <span class=\"selector-tag\">TIME</span> <span class=\"selector-tag\">CMD</span></span><br><span class=\"line\">    <span class=\"selector-tag\">1</span> ?        <span class=\"selector-tag\">00</span><span class=\"selector-pseudo\">:00</span><span class=\"selector-pseudo\">:00</span> <span class=\"selector-tag\">bash</span></span><br><span class=\"line\">   <span class=\"selector-tag\">11</span> ?        <span class=\"selector-tag\">00</span><span class=\"selector-pseudo\">:00</span><span class=\"selector-pseudo\">:00</span> <span class=\"selector-tag\">ps</span></span><br></pre></td></tr></table></figure>\n<p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p>\n<h2>守护态运行</h2>\n<p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下<br>\n。此时，可以通过添加 -d 参数来实现。避免每次都需要开一个线程进去操作容器</p>\n<p><code>sudo docker run -p 8082:8080 --name mytomcat2 -d tomcat</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>               <span class=\"string\">COMMAND</span>             <span class=\"string\">CREATED</span>              <span class=\"string\">STATUS</span>              <span class=\"string\">PORTS</span>                    <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">d53272c36764</span>        <span class=\"string\">tomcat</span>              <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span> <span class=\"string\">ago</span>   <span class=\"string\">Up</span> <span class=\"string\">About</span> <span class=\"string\">a</span> <span class=\"string\">minute</span>   <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8082-&gt;8080/tcp</span>   <span class=\"string\">mytomcat2</span></span><br><span class=\"line\"><span class=\"string\">849e5b576998</span>        <span class=\"string\">myproject</span>           <span class=\"string\">\"catalina.sh run\"</span>   <span class=\"number\">4</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">19</span> <span class=\"string\">minutes</span>       <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>   <span class=\"string\">elastic_panini</span></span><br></pre></td></tr></table></figure>\n<p>结果查看:</p>\n<ul>\n<li>8081<br>\n<img src=\"/2019/09/23/Docker学习7-Docker容器/1.png\" alt></li>\n<li>8082<br>\n<img src=\"/2019/09/23/Docker学习7-Docker容器/2.png\" alt></li>\n</ul>\n<p>进程<br>\n主线程<br>\n工作线程</p>\n<h2>终止进程</h2>\n<p>终止容器<br>\n可以使用 docker container stop 来终止一个运行中的容器。</p>\n<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>\n<p>例如对于上一章节中只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。</p>\n<p>终止状态的容器可以用 docker container ls -a 命令看到。例如</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container <span class=\"keyword\">ls</span> -a</span><br><span class=\"line\">CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES</span><br><span class=\"line\">ba267838cc1b        ubuntu:14.04             <span class=\"string\">\"/bin/bash\"</span>            30 minutes ago      Exited (0) <span class=\"keyword\">About</span> a minute ago                       trusting_newton</span><br><span class=\"line\">98e5efa7d997        training/webapp:latest   <span class=\"string\">\"python app.py\"</span>        <span class=\"keyword\">About</span> <span class=\"keyword\">an</span> hour ago   Exited (0) 34 minutes ago                           backstabbing_pike</span><br></pre></td></tr></table></figure>\n<p>处于终止状态的容器，可以通过 docker container start 命令来重新启动。</p>\n<p>此外，docker container restart 命令会将一个运行态的容器终止，然后再重新启动它。</p>\n<h2>进入容器</h2>\n<p>在使用 -d 参数时，容器启动后会进入后台。</p>\n<p>某些时候需要进入容器进行操作，包括使用 docker attach 命令或 docker exec 命令，推荐大家使用 docker exec 命令，原因会在下面说明。</p>\n<h3>attach 命令</h3>\n<p>docker attach 是 Docker 自带的命令。下面示例如何使用该命令。</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\"><span class=\"number\">243</span><span class=\"keyword\">c</span><span class=\"number\">32535</span>da<span class=\"number\">7</span>d<span class=\"number\">142</span>fb<span class=\"number\">0e6</span>df<span class=\"number\">616</span>a<span class=\"number\">3</span><span class=\"keyword\">c</span><span class=\"number\">3</span>ada<span class=\"number\">0</span>b<span class=\"number\">8</span>ab<span class=\"number\">417937</span><span class=\"keyword\">c</span><span class=\"number\">853</span>a<span class=\"number\">9e1</span><span class=\"keyword\">c</span><span class=\"number\">251</span>f<span class=\"number\">499</span>f<span class=\"number\">550</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\"><span class=\"number\">243</span><span class=\"keyword\">c</span><span class=\"number\">32535</span>da<span class=\"number\">7</span>        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         <span class=\"number\">18</span> seconds ago      Up <span class=\"number\">17</span> seconds                           nostalgic_hypatia</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker attach <span class=\"number\">243</span><span class=\"keyword\">c</span></span><br><span class=\"line\">root<span class=\"title\">@243</span><span class=\"keyword\">c</span><span class=\"number\">32535</span>da<span class=\"number\">7</span>:/#</span><br></pre></td></tr></table></figure>\n<p>注意： 如果从这个 stdin 中 exit，会导致容器的停止.</p>\n<p>exec 命令<br>\n#-i -t 参数<br>\ndocker exec 后边可以跟多个参数，这里主要说明 -i -t 参数。</p>\n<p>只用 -i 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p>\n<p>当 -i -t 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -dit ubuntu</span><br><span class=\"line\"><span class=\"number\">69</span>d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker container ls</span><br><span class=\"line\"><span class=\"symbol\">CONTAINER</span> ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class=\"line\"><span class=\"number\">69</span>d137adef7a        ubuntu:latest       <span class=\"string\">\"/bin/bash\"</span>         <span class=\"number\">18</span> seconds ago      Up <span class=\"number\">17</span> seconds                           zealous_swirles</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker exec -i <span class=\"number\">69</span><span class=\"built_in\">d1</span> <span class=\"keyword\">bash</span></span><br><span class=\"line\"><span class=\"keyword\">ls</span></span><br><span class=\"line\"><span class=\"keyword\">bin</span></span><br><span class=\"line\"><span class=\"keyword\">boot</span></span><br><span class=\"line\"><span class=\"keyword\">dev</span></span><br><span class=\"line\"><span class=\"keyword\">...</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">$ </span>docker exec -<span class=\"keyword\">it </span><span class=\"number\">69</span><span class=\"built_in\">d1</span> <span class=\"keyword\">bash</span></span><br><span class=\"line\"><span class=\"keyword\">root@69d137adef7a:/#</span></span><br></pre></td></tr></table></figure>\n<p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 docker exec 的原因。</p>\n<p>更多参数说明请使用 docker exec --help 查看。</p>\n<h2>删除容器</h2>\n<p><code>docker rm &lt;容器id&gt;</code><br>\n<code>docker rm $(docker ps -a)</code>删除所有未运行容器<br>\n<code>docker container prune</code> 删除所有未运行容器 prune意为修剪</p>\n"},{"title":"Docker学习8-Docker仓库2-私有仓库","catalog":true,"date":"2019-09-23T07:47:49.000Z","subtitle":null,"header-img":null,"_content":"# Docker私有仓库\n可以创建自己的私有仓库用于上传和下载私有镜像.\n\n\n","source":"_posts/Docker学习8-Docker仓库2-私有仓库.md","raw":"---\ntitle: Docker学习8-Docker仓库2-私有仓库\ncatalog: true\ndate: 2019-09-23 15:47:49\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# Docker私有仓库\n可以创建自己的私有仓库用于上传和下载私有镜像.\n\n\n","slug":"Docker学习8-Docker仓库2-私有仓库","published":1,"updated":"2021-04-20T13:28:10.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd29001azgl1ray0gh9p","content":"<h1><span id=\"docker私有仓库\">Docker私有仓库</span></h1>\n<p>可以创建自己的私有仓库用于上传和下载私有镜像.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker私有仓库</h1>\n<p>可以创建自己的私有仓库用于上传和下载私有镜像.</p>\n"},{"title":"Docker学习9-Docker数据卷","catalog":true,"date":"2019-09-23T07:54:04.000Z","subtitle":null,"header-img":null,"_content":"# Docker数据卷\n数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：\n\n- 数据卷 可以在容器之间共享和重用\n- 对 数据卷 的修改会立马生效\n- 对 数据卷 的更新，不会影响镜像\n- 数据卷 默认会一直存在，即使容器被删除\n> 注意：数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 数据卷。\n\n![](Docker学习9-Docker数据卷/1.png)\n\n数据卷 Docker容器的数据持久化\n\n## 使用数据卷\n~~~\n➜  ROOT sudo docker run -p 8083:8080 --name volumeDemo -d -v /usr/local/docker/tomcat/ROOT:/usr/local/tomcat/webapps/ROOT tomcat\n[sudo] password for ziming: \n52ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed\n➜  ROOT sudo docker run -p 8083:8080 --name volumeDemo -d -v /usr/local/docker/tomcat/ROOT:/usr/local/tomcat/webapps/ROOT tomcat\n[sudo] password for ziming:\n52ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed\n~~~\n\n`docker exec -it tomcat bash`交互的方式进入\n~~~\ntomcat sudo docker run -p 8083:8080 --name volumeDemo -d -v /us\nr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT tomcat\na569649fcc5abaf4dbf4b6be4bd031ce57cafe27e7082fd687f90e3ab2244a78\n➜  tomcat sudo docker exec -it volumeDemo bash\nroot@a569649fcc5a:/usr/local/tomcat# cd webapps/ROOT/\nroot@a569649fcc5a:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@a569649fcc5a:/usr/local/tomcat/webapps/ROOT# cat index.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Docker文件测试</title>\n</head>\n\n<body>\n\t<h1>Hello Docker</h1>\n\t<h2>数据卷测试页</h2>\n</body>\n\n</html>\nroot@a569649fcc5a:/usr/local/tomcat/webapps/ROOT#\n~~~\n\n## 查看结果\n- volumeDemo\n![](Docker学习9-Docker数据卷/2.png)\n\n- volumeDemo1\n![](Docker学习9-Docker数据卷/3.png)\n\n## 参考资料\n> https://www.funtl.com/zh/docker/Docker-%E6%95%B0%E6%8D%AE%E5%8D%B7.html#%E9%80%89%E6%8B%A9-v-%E8%BF%98%E6%98%AF-%E2%80%93mount-%E5%8F%82%E6%95%B0\n\n\n\n\n\n\n\n\n","source":"_posts/Docker学习9-Docker数据卷.md","raw":"---\ntitle: Docker学习9-Docker数据卷\ncatalog: true\ndate: 2019-09-23 15:54:04\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# Docker数据卷\n数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：\n\n- 数据卷 可以在容器之间共享和重用\n- 对 数据卷 的修改会立马生效\n- 对 数据卷 的更新，不会影响镜像\n- 数据卷 默认会一直存在，即使容器被删除\n> 注意：数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 数据卷。\n\n![](Docker学习9-Docker数据卷/1.png)\n\n数据卷 Docker容器的数据持久化\n\n## 使用数据卷\n~~~\n➜  ROOT sudo docker run -p 8083:8080 --name volumeDemo -d -v /usr/local/docker/tomcat/ROOT:/usr/local/tomcat/webapps/ROOT tomcat\n[sudo] password for ziming: \n52ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed\n➜  ROOT sudo docker run -p 8083:8080 --name volumeDemo -d -v /usr/local/docker/tomcat/ROOT:/usr/local/tomcat/webapps/ROOT tomcat\n[sudo] password for ziming:\n52ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed\n~~~\n\n`docker exec -it tomcat bash`交互的方式进入\n~~~\ntomcat sudo docker run -p 8083:8080 --name volumeDemo -d -v /us\nr/local/docker/tomcat/ROOT/:/usr/local/tomcat/webapps/ROOT tomcat\na569649fcc5abaf4dbf4b6be4bd031ce57cafe27e7082fd687f90e3ab2244a78\n➜  tomcat sudo docker exec -it volumeDemo bash\nroot@a569649fcc5a:/usr/local/tomcat# cd webapps/ROOT/\nroot@a569649fcc5a:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@a569649fcc5a:/usr/local/tomcat/webapps/ROOT# cat index.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Docker文件测试</title>\n</head>\n\n<body>\n\t<h1>Hello Docker</h1>\n\t<h2>数据卷测试页</h2>\n</body>\n\n</html>\nroot@a569649fcc5a:/usr/local/tomcat/webapps/ROOT#\n~~~\n\n## 查看结果\n- volumeDemo\n![](Docker学习9-Docker数据卷/2.png)\n\n- volumeDemo1\n![](Docker学习9-Docker数据卷/3.png)\n\n## 参考资料\n> https://www.funtl.com/zh/docker/Docker-%E6%95%B0%E6%8D%AE%E5%8D%B7.html#%E9%80%89%E6%8B%A9-v-%E8%BF%98%E6%98%AF-%E2%80%93mount-%E5%8F%82%E6%95%B0\n\n\n\n\n\n\n\n\n","slug":"Docker学习9-Docker数据卷","published":1,"updated":"2021-04-20T13:28:10.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2a001czgl1ntvwnrec","content":"<h1><span id=\"docker数据卷\">Docker数据卷</span></h1>\n<p>数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>\n<ul>\n<li>数据卷 可以在容器之间共享和重用</li>\n<li>对 数据卷 的修改会立马生效</li>\n<li>对 数据卷 的更新，不会影响镜像</li>\n<li>数据卷 默认会一直存在，即使容器被删除</li>\n</ul>\n<blockquote>\n<p>注意：数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 数据卷。</p>\n</blockquote>\n<p><img src=\"/2019/09/23/Docker学习9-Docker数据卷/1.png\" alt></p>\n<p>数据卷 Docker容器的数据持久化</p>\n<h2><span id=\"使用数据卷\">使用数据卷</span></h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ROOT sudo docker run -p <span class=\"number\">8083</span>:<span class=\"number\">8080</span> --name volumeDemo -d -v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"regexp\">/ROOT:/</span>usr<span class=\"regexp\">/local/</span>tomcat<span class=\"regexp\">/webapps/</span>ROOT tomcat</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> <span class=\"string\">ziming:</span> </span><br><span class=\"line\"><span class=\"number\">52</span>ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed</span><br><span class=\"line\">➜  ROOT sudo docker run -p <span class=\"number\">8083</span>:<span class=\"number\">8080</span> --name volumeDemo -d -v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"regexp\">/ROOT:/</span>usr<span class=\"regexp\">/local/</span>tomcat<span class=\"regexp\">/webapps/</span>ROOT tomcat</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> <span class=\"string\">ziming:</span></span><br><span class=\"line\"><span class=\"number\">52</span>ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed</span><br></pre></td></tr></table></figure>\n<p><code>docker exec -it tomcat bash</code>交互的方式进入</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tomcat sudo docker run -p <span class=\"number\">8083</span>:<span class=\"number\">8080</span> --name volumeDemo -d -v /us</span><br><span class=\"line\">r<span class=\"meta-keyword\">/local/</span>docker<span class=\"meta-keyword\">/tomcat/</span>ROOT/:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT tomcat</span><br><span class=\"line\">a569649fcc5abaf4dbf4b6be4bd031ce57cafe27e7082fd687f90e3ab2244a78</span><br><span class=\"line\">➜  tomcat sudo docker exec -it volumeDemo bash</span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local/tomcat<span class=\"meta\"># cd webapps/ROOT/</span></span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># cat index.html</span></span><br><span class=\"line\"><span class=\"params\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;meta charset=\"UTF<span class=\"number\">-8</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;title&gt;</span>Docker文件测试<span class=\"params\">&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/head&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;body&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h1&gt;</span>Hello Docker<span class=\"params\">&lt;/h1&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h2&gt;</span>数据卷测试页<span class=\"params\">&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/body&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;/html&gt;</span></span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<ul>\n<li>\n<p>volumeDemo<br>\n<img src=\"/2019/09/23/Docker学习9-Docker数据卷/2.png\" alt></p>\n</li>\n<li>\n<p>volumeDemo1<br>\n<img src=\"/2019/09/23/Docker学习9-Docker数据卷/3.png\" alt></p>\n</li>\n</ul>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker/Docker-%E6%95%B0%E6%8D%AE%E5%8D%B7.html#%E9%80%89%E6%8B%A9-v-%E8%BF%98%E6%98%AF-%E2%80%93mount-%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker/Docker-数据卷.html#选择-v-还是-–mount-参数</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker数据卷</h1>\n<p>数据卷 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>\n<ul>\n<li>数据卷 可以在容器之间共享和重用</li>\n<li>对 数据卷 的修改会立马生效</li>\n<li>对 数据卷 的更新，不会影响镜像</li>\n<li>数据卷 默认会一直存在，即使容器被删除</li>\n</ul>\n<blockquote>\n<p>注意：数据卷 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 数据卷。</p>\n</blockquote>\n<p><img src=\"/2019/09/23/Docker学习9-Docker数据卷/1.png\" alt></p>\n<p>数据卷 Docker容器的数据持久化</p>\n<h2>使用数据卷</h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ROOT sudo docker run -p <span class=\"number\">8083</span>:<span class=\"number\">8080</span> --name volumeDemo -d -v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"regexp\">/ROOT:/</span>usr<span class=\"regexp\">/local/</span>tomcat<span class=\"regexp\">/webapps/</span>ROOT tomcat</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> <span class=\"string\">ziming:</span> </span><br><span class=\"line\"><span class=\"number\">52</span>ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed</span><br><span class=\"line\">➜  ROOT sudo docker run -p <span class=\"number\">8083</span>:<span class=\"number\">8080</span> --name volumeDemo -d -v <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"regexp\">/ROOT:/</span>usr<span class=\"regexp\">/local/</span>tomcat<span class=\"regexp\">/webapps/</span>ROOT tomcat</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> <span class=\"string\">ziming:</span></span><br><span class=\"line\"><span class=\"number\">52</span>ae0e61dcf59e6f02f3a05c2173fd5c7d8966e99c0bda725573cae58b393fed</span><br></pre></td></tr></table></figure>\n<p><code>docker exec -it tomcat bash</code>交互的方式进入</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tomcat sudo docker run -p <span class=\"number\">8083</span>:<span class=\"number\">8080</span> --name volumeDemo -d -v /us</span><br><span class=\"line\">r<span class=\"meta-keyword\">/local/</span>docker<span class=\"meta-keyword\">/tomcat/</span>ROOT/:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT tomcat</span><br><span class=\"line\">a569649fcc5abaf4dbf4b6be4bd031ce57cafe27e7082fd687f90e3ab2244a78</span><br><span class=\"line\">➜  tomcat sudo docker exec -it volumeDemo bash</span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local/tomcat<span class=\"meta\"># cd webapps/ROOT/</span></span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># ls</span></span><br><span class=\"line\">index.html</span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\"># cat index.html</span></span><br><span class=\"line\"><span class=\"params\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;meta charset=\"UTF<span class=\"number\">-8</span>\"&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;title&gt;</span>Docker文件测试<span class=\"params\">&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/head&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;body&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h1&gt;</span>Hello Docker<span class=\"params\">&lt;/h1&gt;</span></span><br><span class=\"line\">\t<span class=\"params\">&lt;h2&gt;</span>数据卷测试页<span class=\"params\">&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"params\">&lt;/body&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"params\">&lt;/html&gt;</span></span><br><span class=\"line\">root@a569649fcc5a:<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/tomcat/</span>webapps/ROOT<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<h2>查看结果</h2>\n<ul>\n<li>\n<p>volumeDemo<br>\n<img src=\"/2019/09/23/Docker学习9-Docker数据卷/2.png\" alt></p>\n</li>\n<li>\n<p>volumeDemo1<br>\n<img src=\"/2019/09/23/Docker学习9-Docker数据卷/3.png\" alt></p>\n</li>\n</ul>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/docker/Docker-%E6%95%B0%E6%8D%AE%E5%8D%B7.html#%E9%80%89%E6%8B%A9-v-%E8%BF%98%E6%98%AF-%E2%80%93mount-%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/docker/Docker-数据卷.html#选择-v-还是-–mount-参数</a></p>\n</blockquote>\n"},{"title":"Docker学习8-Docker仓库1-Docker-Hub","catalog":true,"date":"2019-09-23T07:38:43.000Z","subtitle":null,"header-img":null,"_content":"# Docker Hub\nDocker Hub是官方维护了一个公共仓库,其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。\n\n## 注册\n你可以在 https://cloud.docker.com 免费注册一个 Docker 账号。\n\n## 登录\n可以通过执行 docker login 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。\n\n你可以通过 docker logout 退出登录。\n## 拉取镜像\n- docker search\n查找官方仓库中的镜像\n- docker pull\n下载到本地\n\n### 查找官方镜像\n~~~\n$ docker search centos\nNAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\ncentos                                          The official build of CentOS.                   465       [OK]\ntianon/centos                                   CentOS 5 and 6, created using rinse instea...   28\nblalor/centos                                   Bare-bones base CentOS 6.5 image                6                    [OK]\nsaltstack/centos-6-minimal                                                                      6                    [OK]\ntutum/centos-6.4                                DEPRECATED. Use tutum/centos:6.4 instead. ...   5                    [OK]\n\n~~~\n\n\n可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建、是否自动创建。\n\n官方的镜像说明是官方项目组创建和维护的，automated 资源允许用户验证镜像的来源和内容。\n\n根据是否是官方提供，可将镜像资源分为两类。\n\n一种是类似 centos 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。\n\n还有一种类型，比如 tianon/centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户名称前缀。可以通过前缀 username/ 来指定使用某个用户提供的镜像，比如 tianon 用户。\n\n另外，在查找的时候通过 --filter=stars=N 参数可以指定仅显示收藏数量为 N 以上的镜像。\n\n### 下载官方 centos 镜像到本地。\n\n~~~\n$ docker pull centos\nPulling repository centos\n0b443ba03958: Download complete\n539c0211cd76: Download complete\n511136ea3c5a: Download complete\n7064731afe90: Download complete\n\n➜  ~ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmyproject           latest              98cdee09487c        5 hours ago         506MB\n<none>              <none>              1bb09f348be0        5 hours ago         506MB\nmydocker            latest              4691fd38efff        3 days ago          506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\ncentos              latest              67fa590cfc1c        4 weeks ago         202MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        2 months ago        120MB\n~~~\n\n## 推送镜像\n用户也可以在登录后通过 docker push 命令来将自己的镜像推送到 Docker Hub。\n以下命令中的 username 请替换为你的 Docker 账号用户名。\n~~~\n$ docker tag ubuntu:17.10 username/ubuntu:17.10\n\n$ docker image ls\n\nREPOSITORY                                               TAG                    IMAGE ID            CREATED             SIZE\nubuntu                                                   17.10                  275d79972a86        6 days ago          94.6MB\nusername/ubuntu                                          17.10                  275d79972a86        6 days ago          94.6MB\n\n$ docker push username/ubuntu:17.10\n\n$ docker search username\n\nNAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nusername/ubuntu\n~~~\n## 自动创建\n自动创建（Automated Builds）功能对于需要经常升级镜像内程序来说，十分方便。\n\n有时候，用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像。\n\n而自动创建允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub 或 BitBucket）上的项目，一旦项目发生新的提交或者创建新的标签（tag），Docker Hub 会自动构建镜像并推送到 Docker Hub 中。\n\n要配置自动创建，包括如下的步骤：\n\n创建并登录 Docker Hub，以及目标网站；\n在目标网站中连接帐户到 Docker Hub；\n在 Docker Hub 中 配置一个自动创建；\n选取一个目标网站中的项目（需要含 Dockerfile）和分支；\n指定 Dockerfile 的位置，并提交创建。\n之后，可以在 Docker Hub 的 自动创建页面 中跟踪每次创建的状态。\n\n\n\n\n\n\n","source":"_posts/Docker学习8-Docker仓库1-Docker-Hub.md","raw":"---\ntitle: Docker学习8-Docker仓库1-Docker-Hub\ncatalog: true\ndate: 2019-09-23 15:38:43\nsubtitle:\nheader-img:\ntags: [Docker]\n---\n# Docker Hub\nDocker Hub是官方维护了一个公共仓库,其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。\n\n## 注册\n你可以在 https://cloud.docker.com 免费注册一个 Docker 账号。\n\n## 登录\n可以通过执行 docker login 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。\n\n你可以通过 docker logout 退出登录。\n## 拉取镜像\n- docker search\n查找官方仓库中的镜像\n- docker pull\n下载到本地\n\n### 查找官方镜像\n~~~\n$ docker search centos\nNAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\ncentos                                          The official build of CentOS.                   465       [OK]\ntianon/centos                                   CentOS 5 and 6, created using rinse instea...   28\nblalor/centos                                   Bare-bones base CentOS 6.5 image                6                    [OK]\nsaltstack/centos-6-minimal                                                                      6                    [OK]\ntutum/centos-6.4                                DEPRECATED. Use tutum/centos:6.4 instead. ...   5                    [OK]\n\n~~~\n\n\n可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建、是否自动创建。\n\n官方的镜像说明是官方项目组创建和维护的，automated 资源允许用户验证镜像的来源和内容。\n\n根据是否是官方提供，可将镜像资源分为两类。\n\n一种是类似 centos 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。\n\n还有一种类型，比如 tianon/centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户名称前缀。可以通过前缀 username/ 来指定使用某个用户提供的镜像，比如 tianon 用户。\n\n另外，在查找的时候通过 --filter=stars=N 参数可以指定仅显示收藏数量为 N 以上的镜像。\n\n### 下载官方 centos 镜像到本地。\n\n~~~\n$ docker pull centos\nPulling repository centos\n0b443ba03958: Download complete\n539c0211cd76: Download complete\n511136ea3c5a: Download complete\n7064731afe90: Download complete\n\n➜  ~ sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmyproject           latest              98cdee09487c        5 hours ago         506MB\n<none>              <none>              1bb09f348be0        5 hours ago         506MB\nmydocker            latest              4691fd38efff        3 days ago          506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\ncentos              latest              67fa590cfc1c        4 weeks ago         202MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        2 months ago        120MB\n~~~\n\n## 推送镜像\n用户也可以在登录后通过 docker push 命令来将自己的镜像推送到 Docker Hub。\n以下命令中的 username 请替换为你的 Docker 账号用户名。\n~~~\n$ docker tag ubuntu:17.10 username/ubuntu:17.10\n\n$ docker image ls\n\nREPOSITORY                                               TAG                    IMAGE ID            CREATED             SIZE\nubuntu                                                   17.10                  275d79972a86        6 days ago          94.6MB\nusername/ubuntu                                          17.10                  275d79972a86        6 days ago          94.6MB\n\n$ docker push username/ubuntu:17.10\n\n$ docker search username\n\nNAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED\nusername/ubuntu\n~~~\n## 自动创建\n自动创建（Automated Builds）功能对于需要经常升级镜像内程序来说，十分方便。\n\n有时候，用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像。\n\n而自动创建允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub 或 BitBucket）上的项目，一旦项目发生新的提交或者创建新的标签（tag），Docker Hub 会自动构建镜像并推送到 Docker Hub 中。\n\n要配置自动创建，包括如下的步骤：\n\n创建并登录 Docker Hub，以及目标网站；\n在目标网站中连接帐户到 Docker Hub；\n在 Docker Hub 中 配置一个自动创建；\n选取一个目标网站中的项目（需要含 Dockerfile）和分支；\n指定 Dockerfile 的位置，并提交创建。\n之后，可以在 Docker Hub 的 自动创建页面 中跟踪每次创建的状态。\n\n\n\n\n\n\n","slug":"Docker学习8-Docker仓库1-Docker-Hub","published":1,"updated":"2021-04-20T13:28:10.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2b001fzgl1xoc5el25","content":"<h1><span id=\"docker-hub\">Docker Hub</span></h1>\n<p>Docker Hub是官方维护了一个公共仓库,其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p>\n<h2><span id=\"注册\">注册</span></h2>\n<p>你可以在 <a href=\"https://cloud.docker.com\" target=\"_blank\" rel=\"noopener\">https://cloud.docker.com</a> 免费注册一个 Docker 账号。</p>\n<h2><span id=\"登录\">登录</span></h2>\n<p>可以通过执行 docker login 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p>\n<p>你可以通过 docker logout 退出登录。</p>\n<h2><span id=\"拉取镜像\">拉取镜像</span></h2>\n<ul>\n<li>docker search<br>\n查找官方仓库中的镜像</li>\n<li>docker pull<br>\n下载到本地</li>\n</ul>\n<h3><span id=\"查找官方镜像\">查找官方镜像</span></h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">docker</span> <span class=\"string\">search</span> <span class=\"string\">centos</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>                                            <span class=\"string\">DESCRIPTION</span>                                     <span class=\"string\">STARS</span>     <span class=\"string\">OFFICIAL</span>   <span class=\"string\">AUTOMATED</span></span><br><span class=\"line\"><span class=\"string\">centos</span>                                          <span class=\"string\">The</span> <span class=\"string\">official</span> <span class=\"string\">build</span> <span class=\"string\">of</span> <span class=\"string\">CentOS.</span>                   <span class=\"number\">465</span>       <span class=\"string\">[OK]</span></span><br><span class=\"line\"><span class=\"string\">tianon/centos</span>                                   <span class=\"string\">CentOS</span> <span class=\"number\">5</span> <span class=\"string\">and</span> <span class=\"number\">6</span><span class=\"string\">,</span> <span class=\"string\">created</span> <span class=\"string\">using</span> <span class=\"string\">rinse</span> <span class=\"string\">instea...</span>   <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"string\">blalor/centos</span>                                   <span class=\"string\">Bare-bones</span> <span class=\"string\">base</span> <span class=\"string\">CentOS</span> <span class=\"number\">6.5</span> <span class=\"string\">image</span>                <span class=\"number\">6</span>                    <span class=\"string\">[OK]</span></span><br><span class=\"line\"><span class=\"string\">saltstack/centos-6-minimal</span>                                                                      <span class=\"number\">6</span>                    <span class=\"string\">[OK]</span></span><br><span class=\"line\"><span class=\"string\">tutum/centos-6.4</span>                                <span class=\"string\">DEPRECATED.</span> <span class=\"string\">Use</span> <span class=\"string\">tutum/centos:6.4</span> <span class=\"string\">instead.</span> <span class=\"string\">...</span>   <span class=\"number\">5</span>                    <span class=\"string\">[OK]</span></span><br></pre></td></tr></table></figure>\n<p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建、是否自动创建。</p>\n<p>官方的镜像说明是官方项目组创建和维护的，automated 资源允许用户验证镜像的来源和内容。</p>\n<p>根据是否是官方提供，可将镜像资源分为两类。</p>\n<p>一种是类似 centos 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。</p>\n<p>还有一种类型，比如 tianon/centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户名称前缀。可以通过前缀 username/ 来指定使用某个用户提供的镜像，比如 tianon 用户。</p>\n<p>另外，在查找的时候通过 --filter=stars=N 参数可以指定仅显示收藏数量为 N 以上的镜像。</p>\n<h3><span id=\"下载官方-centos-镜像到本地\">下载官方 centos 镜像到本地。</span></h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">docker</span> <span class=\"string\">pull</span> <span class=\"string\">centos</span></span><br><span class=\"line\"><span class=\"string\">Pulling</span> <span class=\"string\">repository</span> <span class=\"string\">centos</span></span><br><span class=\"line\"><span class=\"attr\">0b443ba03958:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"><span class=\"attr\">539c0211cd76:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"><span class=\"attr\">511136ea3c5a:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"><span class=\"attr\">7064731afe90:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>          <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"string\">myproject</span>           <span class=\"string\">latest</span>              <span class=\"string\">98cdee09487c</span>        <span class=\"number\">5</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;none&gt;</span>              <span class=\"string\">&lt;none&gt;</span>              <span class=\"string\">1bb09f348be0</span>        <span class=\"number\">5</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">mydocker</span>            <span class=\"string\">latest</span>              <span class=\"string\">4691fd38efff</span>        <span class=\"number\">3</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">latest</span>              <span class=\"string\">97423576f288</span>        <span class=\"number\">3</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>              <span class=\"string\">latest</span>              <span class=\"string\">96c4e536d0eb</span>        <span class=\"number\">4</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">centos</span>              <span class=\"string\">latest</span>              <span class=\"string\">67fa590cfc1c</span>        <span class=\"number\">4</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">202MB</span></span><br><span class=\"line\"><span class=\"string\">nginx</span>               <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">41e97992fcd8</span>        <span class=\"number\">5</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">ubuntu</span>              <span class=\"number\">16.04</span>               <span class=\"string\">5e13f8dd4c1a</span>        <span class=\"number\">2</span> <span class=\"string\">months</span> <span class=\"string\">ago</span>        <span class=\"string\">120MB</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"推送镜像\">推送镜像</span></h2>\n<p>用户也可以在登录后通过 docker push 命令来将自己的镜像推送到 Docker Hub。<br>\n以下命令中的 username 请替换为你的 Docker 账号用户名。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">tag</span> <span class=\"title\">ubuntu</span>:<span class=\"number\">17.10</span> username/ubuntu:<span class=\"number\">17.10</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY                                               <span class=\"keyword\">TAG</span>                    <span class=\"title\">IMAGE</span> ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu                                                   <span class=\"number\">17.10</span>                  <span class=\"number\">275</span>d79972a86        <span class=\"number\">6</span> days ago          <span class=\"number\">94.6M</span>B</span><br><span class=\"line\">username/ubuntu                                          <span class=\"number\">17.10</span>                  <span class=\"number\">275</span>d79972a86        <span class=\"number\">6</span> days ago          <span class=\"number\">94.6M</span>B</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker push username/ubuntu:<span class=\"number\">17.10</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker search username</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">username/ubuntu</span><br></pre></td></tr></table></figure>\n<h2><span id=\"自动创建\">自动创建</span></h2>\n<p>自动创建（Automated Builds）功能对于需要经常升级镜像内程序来说，十分方便。</p>\n<p>有时候，用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像。</p>\n<p>而自动创建允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub 或 BitBucket）上的项目，一旦项目发生新的提交或者创建新的标签（tag），Docker Hub 会自动构建镜像并推送到 Docker Hub 中。</p>\n<p>要配置自动创建，包括如下的步骤：</p>\n<p>创建并登录 Docker Hub，以及目标网站；<br>\n在目标网站中连接帐户到 Docker Hub；<br>\n在 Docker Hub 中 配置一个自动创建；<br>\n选取一个目标网站中的项目（需要含 Dockerfile）和分支；<br>\n指定 Dockerfile 的位置，并提交创建。<br>\n之后，可以在 Docker Hub 的 自动创建页面 中跟踪每次创建的状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Docker Hub</h1>\n<p>Docker Hub是官方维护了一个公共仓库,其中已经包括了数量超过 15,000 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p>\n<h2>注册</h2>\n<p>你可以在 <a href=\"https://cloud.docker.com\" target=\"_blank\" rel=\"noopener\">https://cloud.docker.com</a> 免费注册一个 Docker 账号。</p>\n<h2>登录</h2>\n<p>可以通过执行 docker login 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p>\n<p>你可以通过 docker logout 退出登录。</p>\n<h2>拉取镜像</h2>\n<ul>\n<li>docker search<br>\n查找官方仓库中的镜像</li>\n<li>docker pull<br>\n下载到本地</li>\n</ul>\n<h3>查找官方镜像</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">docker</span> <span class=\"string\">search</span> <span class=\"string\">centos</span></span><br><span class=\"line\"><span class=\"string\">NAME</span>                                            <span class=\"string\">DESCRIPTION</span>                                     <span class=\"string\">STARS</span>     <span class=\"string\">OFFICIAL</span>   <span class=\"string\">AUTOMATED</span></span><br><span class=\"line\"><span class=\"string\">centos</span>                                          <span class=\"string\">The</span> <span class=\"string\">official</span> <span class=\"string\">build</span> <span class=\"string\">of</span> <span class=\"string\">CentOS.</span>                   <span class=\"number\">465</span>       <span class=\"string\">[OK]</span></span><br><span class=\"line\"><span class=\"string\">tianon/centos</span>                                   <span class=\"string\">CentOS</span> <span class=\"number\">5</span> <span class=\"string\">and</span> <span class=\"number\">6</span><span class=\"string\">,</span> <span class=\"string\">created</span> <span class=\"string\">using</span> <span class=\"string\">rinse</span> <span class=\"string\">instea...</span>   <span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"string\">blalor/centos</span>                                   <span class=\"string\">Bare-bones</span> <span class=\"string\">base</span> <span class=\"string\">CentOS</span> <span class=\"number\">6.5</span> <span class=\"string\">image</span>                <span class=\"number\">6</span>                    <span class=\"string\">[OK]</span></span><br><span class=\"line\"><span class=\"string\">saltstack/centos-6-minimal</span>                                                                      <span class=\"number\">6</span>                    <span class=\"string\">[OK]</span></span><br><span class=\"line\"><span class=\"string\">tutum/centos-6.4</span>                                <span class=\"string\">DEPRECATED.</span> <span class=\"string\">Use</span> <span class=\"string\">tutum/centos:6.4</span> <span class=\"string\">instead.</span> <span class=\"string\">...</span>   <span class=\"number\">5</span>                    <span class=\"string\">[OK]</span></span><br></pre></td></tr></table></figure>\n<p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建、是否自动创建。</p>\n<p>官方的镜像说明是官方项目组创建和维护的，automated 资源允许用户验证镜像的来源和内容。</p>\n<p>根据是否是官方提供，可将镜像资源分为两类。</p>\n<p>一种是类似 centos 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。</p>\n<p>还有一种类型，比如 tianon/centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户名称前缀。可以通过前缀 username/ 来指定使用某个用户提供的镜像，比如 tianon 用户。</p>\n<p>另外，在查找的时候通过 --filter=stars=N 参数可以指定仅显示收藏数量为 N 以上的镜像。</p>\n<h3>下载官方 centos 镜像到本地。</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">docker</span> <span class=\"string\">pull</span> <span class=\"string\">centos</span></span><br><span class=\"line\"><span class=\"string\">Pulling</span> <span class=\"string\">repository</span> <span class=\"string\">centos</span></span><br><span class=\"line\"><span class=\"attr\">0b443ba03958:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"><span class=\"attr\">539c0211cd76:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"><span class=\"attr\">511136ea3c5a:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"><span class=\"attr\">7064731afe90:</span> <span class=\"string\">Download</span> <span class=\"string\">complete</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>          <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"string\">myproject</span>           <span class=\"string\">latest</span>              <span class=\"string\">98cdee09487c</span>        <span class=\"number\">5</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">&lt;none&gt;</span>              <span class=\"string\">&lt;none&gt;</span>              <span class=\"string\">1bb09f348be0</span>        <span class=\"number\">5</span> <span class=\"string\">hours</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">mydocker</span>            <span class=\"string\">latest</span>              <span class=\"string\">4691fd38efff</span>        <span class=\"number\">3</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">latest</span>              <span class=\"string\">97423576f288</span>        <span class=\"number\">3</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>              <span class=\"string\">latest</span>              <span class=\"string\">96c4e536d0eb</span>        <span class=\"number\">4</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">centos</span>              <span class=\"string\">latest</span>              <span class=\"string\">67fa590cfc1c</span>        <span class=\"number\">4</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">202MB</span></span><br><span class=\"line\"><span class=\"string\">nginx</span>               <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">41e97992fcd8</span>        <span class=\"number\">5</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">ubuntu</span>              <span class=\"number\">16.04</span>               <span class=\"string\">5e13f8dd4c1a</span>        <span class=\"number\">2</span> <span class=\"string\">months</span> <span class=\"string\">ago</span>        <span class=\"string\">120MB</span></span><br></pre></td></tr></table></figure>\n<h2>推送镜像</h2>\n<p>用户也可以在登录后通过 docker push 命令来将自己的镜像推送到 Docker Hub。<br>\n以下命令中的 username 请替换为你的 Docker 账号用户名。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"keyword\">tag</span> <span class=\"title\">ubuntu</span>:<span class=\"number\">17.10</span> username/ubuntu:<span class=\"number\">17.10</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY                                               <span class=\"keyword\">TAG</span>                    <span class=\"title\">IMAGE</span> ID            CREATED             SIZE</span><br><span class=\"line\">ubuntu                                                   <span class=\"number\">17.10</span>                  <span class=\"number\">275</span>d79972a86        <span class=\"number\">6</span> days ago          <span class=\"number\">94.6M</span>B</span><br><span class=\"line\">username/ubuntu                                          <span class=\"number\">17.10</span>                  <span class=\"number\">275</span>d79972a86        <span class=\"number\">6</span> days ago          <span class=\"number\">94.6M</span>B</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker push username/ubuntu:<span class=\"number\">17.10</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ docker search username</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class=\"line\">username/ubuntu</span><br></pre></td></tr></table></figure>\n<h2>自动创建</h2>\n<p>自动创建（Automated Builds）功能对于需要经常升级镜像内程序来说，十分方便。</p>\n<p>有时候，用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像。</p>\n<p>而自动创建允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub 或 BitBucket）上的项目，一旦项目发生新的提交或者创建新的标签（tag），Docker Hub 会自动构建镜像并推送到 Docker Hub 中。</p>\n<p>要配置自动创建，包括如下的步骤：</p>\n<p>创建并登录 Docker Hub，以及目标网站；<br>\n在目标网站中连接帐户到 Docker Hub；<br>\n在 Docker Hub 中 配置一个自动创建；<br>\n选取一个目标网站中的项目（需要含 Dockerfile）和分支；<br>\n指定 Dockerfile 的位置，并提交创建。<br>\n之后，可以在 Docker Hub 的 自动创建页面 中跟踪每次创建的状态。</p>\n"},{"title":"Docker学习6-Dockerfile定制镜像2","catalog":true,"date":"2019-09-19T06:23:53.000Z","subtitle":null,"header-img":null,"_content":"\n## Docker学习6-Dockerfile定制镜像2\n\n- Docker 停止一个运行的容器\n`docker stop <id>`\n~~~\n7db5c8940e5a        tomcat              \"catalina.sh run\"        29 minutes ago       Up 29 minutes               0.0.0.0:8081->8080/tcp   dreamy_moore\n[root@MyCentOS]~# docker rm 898\n898\n[root@MyCentOS]~# docker stop 7db\n7db\n[root@MyCentOS]~#\n~~~\n\n## 自己配置镜像\n这个是用户经常操作的目录所有把文件存放在这里,所有和docker相关的都在里面\n~~~\n[root@MyCentOS]~# cd /usr/local\n[root@MyCentOS]/usr/local#\n[root@MyCentOS]/usr/local# mkdir docker\n[root@MyCentOS]/usr/local# cd docker\n[root@MyCentOS]/usr/local/docker# mkdir tomcat\n[root@MyCentOS]/usr/local/docker# cd tomcat\n[root@MyCentOS]/usr/local/docker/tomcat# vi Dockerfile\n~~~\n\n这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，FROM 和 RUN\n# Dockerfile脚本开始\n~~~\nFROM tomcat\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.jsp\n~                                                                                        \n~                                                                                           \n~ \n~~~\n## FROM指定基础镜像\n所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。\n\n## RUN 执行命令\nRUN执行命令行命令的命令\n\n所有的Dockerfile第一行都必须是FROM命令,RUN 指令在定制镜像时是最常用的指令之一\n- shell格式:`RUN`就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。\n~~~\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.jsp\n~~~\n\n- exec 格式：RUN [\"可执行文件\", \"参数1\", \"参数2\"]，这更像是函数调用中的格式\n\n既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：\n\nDockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。\n\n而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。\n\nUnion FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。\n\n~~~\nFROM debian:jessie\n\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n~~~\n\n上面的 Dockerfile 正确的写法应该是这样：\n~~~\nFROM debian:jessie\n\nRUN buildDeps='gcc libc6-dev make' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n~~~\n\n- 以交互的方式启动一条命令\n`~ sudo docker run -it --rm tomcat bash`\n~~~\n➜  ~ sudo docker run -it --rm tomcat bash\nroot@14630cb2f338:/usr/local/tomcat# ls -al\ntotal 160\ndrwxr-sr-x 1 root staff  4096 Aug 22 00:26 .\ndrwxrwsr-x 1 root staff  4096 Aug 15 05:20 ..\n-rw-r--r-- 1 root root  19534 Aug 14 22:27 BUILDING.txt\n-rw-r--r-- 1 root root   5407 Aug 14 22:27 CONTRIBUTING.md\n-rw-r--r-- 1 root root  57011 Aug 14 22:27 LICENSE\n-rw-r--r-- 1 root root   1726 Aug 14 22:27 NOTICE\n-rw-r--r-- 1 root root   3255 Aug 14 22:27 README.md\n-rw-r--r-- 1 root root   7139 Aug 14 22:27 RELEASE-NOTES\n-rw-r--r-- 1 root root  16262 Aug 14 22:27 RUNNING.txt\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 bin\ndrwxr-sr-x 2 root root   4096 Aug 14 22:27 conf\ndrwxr-sr-x 2 root staff  4096 Aug 22 00:26 include\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 lib\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 logs\ndrwxr-sr-x 3 root staff  4096 Aug 22 00:26 native-jni-lib\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 temp\ndrwxr-xr-x 7 root root   4096 Aug 14 22:24 webapps\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 work\n\nroot@14630cb2f338:/usr/local/tomcat# cd webapps/ROOT/\nroot@14630cb2f338:/usr/local/tomcat/webapps/ROOT# ls\nRELEASE-NOTES.txt  bg-button.png  bg-upper.png\ttomcat-power.gif  tomcat.png\nWEB-INF\t\t   bg-middle.png  favicon.ico\ttomcat.css\t  tomcat.svg\nasf-logo-wide.svg  bg-nav.png\t  index.jsp\ttomcat.gif\nroot@14630cb2f338:/usr/local/tomcat/webapps/ROOT#\n\nroot@14630cb2f338:/usr/local/tomcat/webapps/ROOT# pwd\n/usr/local/tomcat/webapps/ROOT\n~~~\n查看脚本\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# cat Dockerfile\n## Dockerfile脚本开始\nFROM tomcat\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n~~~\n## 构建镜像\n- 在 Dockerfile 文件所在目录执行：\n`docker build [选项] <上下文路径/URL/->`\n`docker build -t <name> .`\n`docker build -t <name> <Dockerfile>`\n\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t mytomcatdocker .\nSending build context to Docker daemon  2.048kB\nStep 1/2 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/2 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n ---> Running in 5d88c8eacd22\nRemoving intermediate container 5d88c8eacd22\n ---> 12aa14e2403d\nSuccessfully built 12aa14e2403d\nSuccessfully tagged mytomcatdocker:latest\n[root@MyCentOS]/usr/local/docker/tomcat#\n~~~\nRUN指令启动了一个容器 5d88c8eacd22 执行了所要求的命令，并最后提交了这一层 12aa14e2403d 随后删除了 5d88c8eacd22\n\n- 查看镜像\n~~~\n➜  ~ sudo docker images\n[sudo] password for ziming:\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmytomcatdocker      latest              12aa14e2403d        6 minutes ago       506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB\n~~~\n\n- 再以交互的方式进入mytomcatdocker\n~~~\n~ sudo docker run -it mytomcatdocker bash\nroot@8de78a99decd:/usr/local/tomcat# ls -al\n~~~\n- 查看文件\n~~~\nroot@8de78a99decd:/usr/local/tomcat# ls -al\ntotal 160\ndrwxr-sr-x 1 root staff  4096 Aug 22 00:26 .\ndrwxrwsr-x 1 root staff  4096 Aug 15 05:20 ..\n-rw-r--r-- 1 root root  19534 Aug 14 22:27 BUILDING.txt\n-rw-r--r-- 1 root root   5407 Aug 14 22:27 CONTRIBUTING.md\n-rw-r--r-- 1 root root  57011 Aug 14 22:27 LICENSE\n-rw-r--r-- 1 root root   1726 Aug 14 22:27 NOTICE\n-rw-r--r-- 1 root root   3255 Aug 14 22:27 README.md\n-rw-r--r-- 1 root root   7139 Aug 14 22:27 RELEASE-NOTES\n-rw-r--r-- 1 root root  16262 Aug 14 22:27 RUNNING.txt\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 bin\ndrwxr-sr-x 2 root root   4096 Aug 14 22:27 conf\ndrwxr-sr-x 2 root staff  4096 Aug 22 00:26 include\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 lib\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 logs\ndrwxr-sr-x 3 root staff  4096 Aug 22 00:26 native-jni-lib\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 temp\ndrwxr-xr-x 1 root root   4096 Aug 14 22:24 webapps\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 work\n~~~\n- 进入root\n~~~\nroot@8de78a99decd:/usr/local/tomcat# cd webapps/ROOT/\nroot@8de78a99decd:/usr/local/tomcat/webapps/ROOT#\nroot@8de78a99decd:/usr/local/tomcat/webapps/ROOT# ls -al\ntotal 196\ndrwxr-xr-x 1 root root  4096 Sep 20 01:34 .\ndrwxr-xr-x 1 root root  4096 Aug 14 22:24 ..\n-rw-r--r-- 1 root root  7139 Aug 14 22:27 RELEASE-NOTES.txt\ndrwxr-xr-x 2 root root  4096 Aug 22 00:26 WEB-INF\n-rw-r--r-- 1 root root 27235 Aug 14 22:27 asf-logo-wide.svg\n-rw-r--r-- 1 root root   713 Aug 14 22:24 bg-button.png\n-rw-r--r-- 1 root root  1918 Aug 14 22:24 bg-middle.png\n-rw-r--r-- 1 root root  1401 Aug 14 22:24 bg-nav.png\n-rw-r--r-- 1 root root  3103 Aug 14 22:24 bg-upper.png\n-rw-r--r-- 1 root root 21630 Aug 14 22:24 favicon.ico\n-rw-r--r-- 1 root root    24 Sep 20 01:34 index.html\n-rw-r--r-- 1 root root 12208 Aug 14 22:27 index.jsp\n-rw-r--r-- 1 root root  2376 Aug 14 22:24 tomcat-power.gif\n-rw-r--r-- 1 root root  5581 Aug 14 22:27 tomcat.css\n-rw-r--r-- 1 root root  2066 Aug 14 22:24 tomcat.gif\n-rw-r--r-- 1 root root  5103 Aug 14 22:24 tomcat.png\n-rw-r--r-- 1 root root 67795 Aug 14 22:27 tomcat.svg\n~~~\nindex.html存在了\n- 查看index.html\n~~~\nroot@8de78a99decd:/usr/local/tomcat/webapps/ROOT# cat index.html\n<h1>Hello, Docker!</h1>\n~~~\n## 删除index.jsp\n但是我不想要index.jsp,所以需要在dockerfile脚本中删除ROOT下所有的东西这样,我暴露8081端口的时候只能看到index.html中的内容\n\n- 进入Dockerfile\n~~~\n➜  ~ cd /usr/local/docker/tomcat\n➜  tomcat ls\nDockerfile\n➜  tomcat\n~~~\n- 修改Dockerfile\n~~~\n# Dockerfile脚本开始\nFROM tomcat\nRUN cd /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n~~~\n\n- 重复先前的操作\n删除掉原先创建的镜像\nsudo docker image rm 12a\n\n~~~\n➜  tomcat sudo docker build -t mydocker .\nSending build context to Docker daemon  2.048kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : RUN cd /usr/local/tomcat/webapps/ROOT/\n ---> Running in 582adfa700d2\nRemoving intermediate container 582adfa700d2\n ---> 300e7b9c024b\nStep 3/4 : RUN rm -fr *\n ---> Running in 0637d8d5df11\nRemoving intermediate container 0637d8d5df11\n ---> 137fe42507bf\nStep 4/4 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n ---> Running in 55a7cef531e0\n/bin/sh: 1: cannot create /usr/local/tomcat/webapps/ROOT/index.html: Directory nonexistent\nThe command '/bin/sh -c echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html' returned a non-zero code: 2\n➜  tomcat docker images\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/images/json: dial unix /var/run/docker.sock: connect: permission denied\n➜  tomcat sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\n<none>              <none>              137fe42507bf        About a minute ago   506MB\n1.16.1              latest              97423576f288        3 weeks ago          126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago          506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago          126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago          120MB\n➜  tomcat\n~~~\n在创建过程中`RUN rm -rf *` 连着ROOT也一起删除了所有会报错,所以新的镜像成为了虚悬镜像\n\n- 修改脚本\n~~~ linux\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n➜  tomcat sudo docker build -t mydocker .\nSending build context to Docker daemon  2.048kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Running in 57f471bc028d\nRemoving intermediate container 57f471bc028d\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Running in dbaf4d7ad1d1\nRemoving intermediate container dbaf4d7ad1d1\n ---> f6814fab3fe4\nStep 4/4 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n ---> Running in 91aa52622c26\nRemoving intermediate container 91aa52622c26\n ---> 4691fd38efff\nSuccessfully built 4691fd38efff\nSuccessfully tagged mydocker:latest\n➜  tomcat sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmydocker            latest              4691fd38efff        34 seconds ago      506MB\n<none>              <none>              137fe42507bf        6 minutes ago       506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB\n➜  tomcat sudo docker run -it 4691 bash\nroot@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# cat index.html \n<h1>Hello, Docker!</h1>\n~~~\n** notice 各个相同源镜像的空间是公用的 **\n\n`docker image prune` 删除虚悬镜像\n\n~~~\n➜  tomcat sudo docker run -p 8081:8080 4691\n~~~\n查看网页是否成功\n![](Docker学习6-Dockerfile定制镜像2/mydocker.png)\n\ndocker的又一大特性出现了,与运行环境无关,真正做到了一次构建,到处运行.\n\n","source":"_posts/Docker学习6-Dockerfile定制镜像2.md","raw":"---\ntitle: Docker学习6-Dockerfile定制镜像2\ncatalog: true\ndate: 2019-09-19 14:23:53\nsubtitle:\nheader-img:\ntags: [Docker, Dockerfile]\n---\n\n## Docker学习6-Dockerfile定制镜像2\n\n- Docker 停止一个运行的容器\n`docker stop <id>`\n~~~\n7db5c8940e5a        tomcat              \"catalina.sh run\"        29 minutes ago       Up 29 minutes               0.0.0.0:8081->8080/tcp   dreamy_moore\n[root@MyCentOS]~# docker rm 898\n898\n[root@MyCentOS]~# docker stop 7db\n7db\n[root@MyCentOS]~#\n~~~\n\n## 自己配置镜像\n这个是用户经常操作的目录所有把文件存放在这里,所有和docker相关的都在里面\n~~~\n[root@MyCentOS]~# cd /usr/local\n[root@MyCentOS]/usr/local#\n[root@MyCentOS]/usr/local# mkdir docker\n[root@MyCentOS]/usr/local# cd docker\n[root@MyCentOS]/usr/local/docker# mkdir tomcat\n[root@MyCentOS]/usr/local/docker# cd tomcat\n[root@MyCentOS]/usr/local/docker/tomcat# vi Dockerfile\n~~~\n\n这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，FROM 和 RUN\n# Dockerfile脚本开始\n~~~\nFROM tomcat\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.jsp\n~                                                                                        \n~                                                                                           \n~ \n~~~\n## FROM指定基础镜像\n所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。\n\n## RUN 执行命令\nRUN执行命令行命令的命令\n\n所有的Dockerfile第一行都必须是FROM命令,RUN 指令在定制镜像时是最常用的指令之一\n- shell格式:`RUN`就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。\n~~~\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.jsp\n~~~\n\n- exec 格式：RUN [\"可执行文件\", \"参数1\", \"参数2\"]，这更像是函数调用中的格式\n\n既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：\n\nDockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。\n\n而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。\n\nUnion FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。\n\n~~~\nFROM debian:jessie\n\nRUN apt-get update\nRUN apt-get install -y gcc libc6-dev make\nRUN wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\"\nRUN mkdir -p /usr/src/redis\nRUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1\nRUN make -C /usr/src/redis\nRUN make -C /usr/src/redis install\n~~~\n\n上面的 Dockerfile 正确的写法应该是这样：\n~~~\nFROM debian:jessie\n\nRUN buildDeps='gcc libc6-dev make' \\\n    && apt-get update \\\n    && apt-get install -y $buildDeps \\\n    && wget -O redis.tar.gz \"http://download.redis.io/releases/redis-3.2.5.tar.gz\" \\\n    && mkdir -p /usr/src/redis \\\n    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\\n    && make -C /usr/src/redis \\\n    && make -C /usr/src/redis install \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && rm redis.tar.gz \\\n    && rm -r /usr/src/redis \\\n    && apt-get purge -y --auto-remove $buildDeps\n~~~\n\n- 以交互的方式启动一条命令\n`~ sudo docker run -it --rm tomcat bash`\n~~~\n➜  ~ sudo docker run -it --rm tomcat bash\nroot@14630cb2f338:/usr/local/tomcat# ls -al\ntotal 160\ndrwxr-sr-x 1 root staff  4096 Aug 22 00:26 .\ndrwxrwsr-x 1 root staff  4096 Aug 15 05:20 ..\n-rw-r--r-- 1 root root  19534 Aug 14 22:27 BUILDING.txt\n-rw-r--r-- 1 root root   5407 Aug 14 22:27 CONTRIBUTING.md\n-rw-r--r-- 1 root root  57011 Aug 14 22:27 LICENSE\n-rw-r--r-- 1 root root   1726 Aug 14 22:27 NOTICE\n-rw-r--r-- 1 root root   3255 Aug 14 22:27 README.md\n-rw-r--r-- 1 root root   7139 Aug 14 22:27 RELEASE-NOTES\n-rw-r--r-- 1 root root  16262 Aug 14 22:27 RUNNING.txt\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 bin\ndrwxr-sr-x 2 root root   4096 Aug 14 22:27 conf\ndrwxr-sr-x 2 root staff  4096 Aug 22 00:26 include\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 lib\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 logs\ndrwxr-sr-x 3 root staff  4096 Aug 22 00:26 native-jni-lib\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 temp\ndrwxr-xr-x 7 root root   4096 Aug 14 22:24 webapps\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 work\n\nroot@14630cb2f338:/usr/local/tomcat# cd webapps/ROOT/\nroot@14630cb2f338:/usr/local/tomcat/webapps/ROOT# ls\nRELEASE-NOTES.txt  bg-button.png  bg-upper.png\ttomcat-power.gif  tomcat.png\nWEB-INF\t\t   bg-middle.png  favicon.ico\ttomcat.css\t  tomcat.svg\nasf-logo-wide.svg  bg-nav.png\t  index.jsp\ttomcat.gif\nroot@14630cb2f338:/usr/local/tomcat/webapps/ROOT#\n\nroot@14630cb2f338:/usr/local/tomcat/webapps/ROOT# pwd\n/usr/local/tomcat/webapps/ROOT\n~~~\n查看脚本\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# cat Dockerfile\n## Dockerfile脚本开始\nFROM tomcat\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n~~~\n## 构建镜像\n- 在 Dockerfile 文件所在目录执行：\n`docker build [选项] <上下文路径/URL/->`\n`docker build -t <name> .`\n`docker build -t <name> <Dockerfile>`\n\n~~~\n[root@MyCentOS]/usr/local/docker/tomcat# docker build -t mytomcatdocker .\nSending build context to Docker daemon  2.048kB\nStep 1/2 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/2 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n ---> Running in 5d88c8eacd22\nRemoving intermediate container 5d88c8eacd22\n ---> 12aa14e2403d\nSuccessfully built 12aa14e2403d\nSuccessfully tagged mytomcatdocker:latest\n[root@MyCentOS]/usr/local/docker/tomcat#\n~~~\nRUN指令启动了一个容器 5d88c8eacd22 执行了所要求的命令，并最后提交了这一层 12aa14e2403d 随后删除了 5d88c8eacd22\n\n- 查看镜像\n~~~\n➜  ~ sudo docker images\n[sudo] password for ziming:\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmytomcatdocker      latest              12aa14e2403d        6 minutes ago       506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB\n~~~\n\n- 再以交互的方式进入mytomcatdocker\n~~~\n~ sudo docker run -it mytomcatdocker bash\nroot@8de78a99decd:/usr/local/tomcat# ls -al\n~~~\n- 查看文件\n~~~\nroot@8de78a99decd:/usr/local/tomcat# ls -al\ntotal 160\ndrwxr-sr-x 1 root staff  4096 Aug 22 00:26 .\ndrwxrwsr-x 1 root staff  4096 Aug 15 05:20 ..\n-rw-r--r-- 1 root root  19534 Aug 14 22:27 BUILDING.txt\n-rw-r--r-- 1 root root   5407 Aug 14 22:27 CONTRIBUTING.md\n-rw-r--r-- 1 root root  57011 Aug 14 22:27 LICENSE\n-rw-r--r-- 1 root root   1726 Aug 14 22:27 NOTICE\n-rw-r--r-- 1 root root   3255 Aug 14 22:27 README.md\n-rw-r--r-- 1 root root   7139 Aug 14 22:27 RELEASE-NOTES\n-rw-r--r-- 1 root root  16262 Aug 14 22:27 RUNNING.txt\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 bin\ndrwxr-sr-x 2 root root   4096 Aug 14 22:27 conf\ndrwxr-sr-x 2 root staff  4096 Aug 22 00:26 include\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 lib\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 logs\ndrwxr-sr-x 3 root staff  4096 Aug 22 00:26 native-jni-lib\ndrwxr-xr-x 2 root root   4096 Aug 22 00:26 temp\ndrwxr-xr-x 1 root root   4096 Aug 14 22:24 webapps\ndrwxrwxrwx 2 root root   4096 Aug 14 22:24 work\n~~~\n- 进入root\n~~~\nroot@8de78a99decd:/usr/local/tomcat# cd webapps/ROOT/\nroot@8de78a99decd:/usr/local/tomcat/webapps/ROOT#\nroot@8de78a99decd:/usr/local/tomcat/webapps/ROOT# ls -al\ntotal 196\ndrwxr-xr-x 1 root root  4096 Sep 20 01:34 .\ndrwxr-xr-x 1 root root  4096 Aug 14 22:24 ..\n-rw-r--r-- 1 root root  7139 Aug 14 22:27 RELEASE-NOTES.txt\ndrwxr-xr-x 2 root root  4096 Aug 22 00:26 WEB-INF\n-rw-r--r-- 1 root root 27235 Aug 14 22:27 asf-logo-wide.svg\n-rw-r--r-- 1 root root   713 Aug 14 22:24 bg-button.png\n-rw-r--r-- 1 root root  1918 Aug 14 22:24 bg-middle.png\n-rw-r--r-- 1 root root  1401 Aug 14 22:24 bg-nav.png\n-rw-r--r-- 1 root root  3103 Aug 14 22:24 bg-upper.png\n-rw-r--r-- 1 root root 21630 Aug 14 22:24 favicon.ico\n-rw-r--r-- 1 root root    24 Sep 20 01:34 index.html\n-rw-r--r-- 1 root root 12208 Aug 14 22:27 index.jsp\n-rw-r--r-- 1 root root  2376 Aug 14 22:24 tomcat-power.gif\n-rw-r--r-- 1 root root  5581 Aug 14 22:27 tomcat.css\n-rw-r--r-- 1 root root  2066 Aug 14 22:24 tomcat.gif\n-rw-r--r-- 1 root root  5103 Aug 14 22:24 tomcat.png\n-rw-r--r-- 1 root root 67795 Aug 14 22:27 tomcat.svg\n~~~\nindex.html存在了\n- 查看index.html\n~~~\nroot@8de78a99decd:/usr/local/tomcat/webapps/ROOT# cat index.html\n<h1>Hello, Docker!</h1>\n~~~\n## 删除index.jsp\n但是我不想要index.jsp,所以需要在dockerfile脚本中删除ROOT下所有的东西这样,我暴露8081端口的时候只能看到index.html中的内容\n\n- 进入Dockerfile\n~~~\n➜  ~ cd /usr/local/docker/tomcat\n➜  tomcat ls\nDockerfile\n➜  tomcat\n~~~\n- 修改Dockerfile\n~~~\n# Dockerfile脚本开始\nFROM tomcat\nRUN cd /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n~~~\n\n- 重复先前的操作\n删除掉原先创建的镜像\nsudo docker image rm 12a\n\n~~~\n➜  tomcat sudo docker build -t mydocker .\nSending build context to Docker daemon  2.048kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : RUN cd /usr/local/tomcat/webapps/ROOT/\n ---> Running in 582adfa700d2\nRemoving intermediate container 582adfa700d2\n ---> 300e7b9c024b\nStep 3/4 : RUN rm -fr *\n ---> Running in 0637d8d5df11\nRemoving intermediate container 0637d8d5df11\n ---> 137fe42507bf\nStep 4/4 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n ---> Running in 55a7cef531e0\n/bin/sh: 1: cannot create /usr/local/tomcat/webapps/ROOT/index.html: Directory nonexistent\nThe command '/bin/sh -c echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html' returned a non-zero code: 2\n➜  tomcat docker images\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/images/json: dial unix /var/run/docker.sock: connect: permission denied\n➜  tomcat sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\n<none>              <none>              137fe42507bf        About a minute ago   506MB\n1.16.1              latest              97423576f288        3 weeks ago          126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago          506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago          126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago          120MB\n➜  tomcat\n~~~\n在创建过程中`RUN rm -rf *` 连着ROOT也一起删除了所有会报错,所以新的镜像成为了虚悬镜像\n\n- 修改脚本\n~~~ linux\n# Dockerfile脚本开始\nFROM tomcat\nWORKDIR /usr/local/tomcat/webapps/ROOT/\nRUN rm -fr *\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n➜  tomcat sudo docker build -t mydocker .\nSending build context to Docker daemon  2.048kB\nStep 1/4 : FROM tomcat\n ---> 96c4e536d0eb\nStep 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/\n ---> Running in 57f471bc028d\nRemoving intermediate container 57f471bc028d\n ---> 9350deb03d0d\nStep 3/4 : RUN rm -fr *\n ---> Running in dbaf4d7ad1d1\nRemoving intermediate container dbaf4d7ad1d1\n ---> f6814fab3fe4\nStep 4/4 : RUN echo '<h1>Hello, Docker!</h1>' > /usr/local/tomcat/webapps/ROOT/index.html\n ---> Running in 91aa52622c26\nRemoving intermediate container 91aa52622c26\n ---> 4691fd38efff\nSuccessfully built 4691fd38efff\nSuccessfully tagged mydocker:latest\n➜  tomcat sudo docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmydocker            latest              4691fd38efff        34 seconds ago      506MB\n<none>              <none>              137fe42507bf        6 minutes ago       506MB\n1.16.1              latest              97423576f288        3 weeks ago         126MB\ntomcat              latest              96c4e536d0eb        4 weeks ago         506MB\nnginx               1.16.1              41e97992fcd8        5 weeks ago         126MB\nubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB\n➜  tomcat sudo docker run -it 4691 bash\nroot@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# ls\nindex.html\nroot@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# cat index.html \n<h1>Hello, Docker!</h1>\n~~~\n** notice 各个相同源镜像的空间是公用的 **\n\n`docker image prune` 删除虚悬镜像\n\n~~~\n➜  tomcat sudo docker run -p 8081:8080 4691\n~~~\n查看网页是否成功\n![](Docker学习6-Dockerfile定制镜像2/mydocker.png)\n\ndocker的又一大特性出现了,与运行环境无关,真正做到了一次构建,到处运行.\n\n","slug":"Docker学习6-Dockerfile定制镜像2","published":1,"updated":"2021-04-20T13:28:10.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2c001hzgl1hct8g5l8","content":"<h2><span id=\"docker学习6-dockerfile定制镜像2\">Docker学习6-Dockerfile定制镜像2</span></h2>\n<ul>\n<li>Docker 停止一个运行的容器<br>\n<code>docker stop &lt;id&gt;</code></li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span>db5c8940e5a        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">29</span> minutes ago       Up <span class=\"number\">29</span> minutes               0.0.0.0<span class=\"symbol\">:</span><span class=\"number\">8081</span>-&gt;<span class=\"number\">8080</span>/tcp   dreamy_moore</span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\"># docker rm 898</span></span><br><span class=\"line\"><span class=\"number\">898</span></span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\"># docker stop 7db</span></span><br><span class=\"line\"><span class=\"number\">7</span>db</span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"自己配置镜像\">自己配置镜像</span></h2>\n<p>这个是用户经常操作的目录所有把文件存放在这里,所有和docker相关的都在里面</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /usr/local</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span><span class=\"meta\">#</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span><span class=\"meta\"># mkdir docker</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span><span class=\"meta\"># cd docker</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># mkdir tomcat</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># cd tomcat</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># vi Dockerfile</span></span><br></pre></td></tr></table></figure>\n<p>这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，FROM 和 RUN</p>\n<h1><span id=\"dockerfile脚本开始\">Dockerfile脚本开始</span></h1>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.jsp</span></span><br><span class=\"line\">~                                                                                        </span><br><span class=\"line\">~                                                                                           </span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h2><span id=\"from指定基础镜像\">FROM指定基础镜像</span></h2>\n<p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。</p>\n<h2><span id=\"run-执行命令\">RUN 执行命令</span></h2>\n<p>RUN执行命令行命令的命令</p>\n<p>所有的Dockerfile第一行都必须是FROM命令,RUN 指令在定制镜像时是最常用的指令之一</p>\n<ul>\n<li>shell格式:<code>RUN</code>就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.jsp</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>exec 格式：RUN [“可执行文件”, “参数1”, “参数2”]，这更像是函数调用中的格式</li>\n</ul>\n<p>既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p>\n<p>Dockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。</p>\n<p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p>\n<p>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> apt-<span class=\"builtin-name\">get</span> install -y gcc libc6-dev make</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span></span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> mkdir -p /usr/src/redis</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> tar -xzf redis.tar.gz -C /usr/src/redis <span class=\"attribute\">--strip-components</span>=1</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> make -C /usr/src/redis</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> make -C /usr/src/redis install</span><br></pre></td></tr></table></figure>\n<p>上面的 Dockerfile 正确的写法应该是这样：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\">RUN buildDeps=<span class=\"string\">'gcc libc6-dev make'</span> \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y <span class=\"variable\">$buildDeps</span> \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span> \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/redis \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; tar -xzf redis.tar.gz -C /u</span>sr<span class=\"regexp\">/src/</span>redis --strip-components=<span class=\"number\">1</span> \\</span><br><span class=\"line\">    &amp;&amp; make -C <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/redis \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; make -C /u</span>sr<span class=\"regexp\">/src/</span>redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf <span class=\"regexp\">/var/</span>lib<span class=\"regexp\">/apt/</span>lists<span class=\"regexp\">/* \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; rm redis.tar.gz \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; rm -r /u</span>sr<span class=\"regexp\">/src/</span>redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove <span class=\"variable\">$buildDeps</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>以交互的方式启动一条命令<br>\n<code>~ sudo docker run -it --rm tomcat bash</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-it</span> <span class=\"string\">--rm</span> <span class=\"string\">tomcat</span> <span class=\"string\">bash</span></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">160</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxrwsr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">15</span> <span class=\"number\">05</span><span class=\"string\">:20</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">19534</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">BUILDING.txt</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">5407</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">57011</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">LICENSE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">1726</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">NOTICE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">3255</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">README.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">16262</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RUNNING.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">bin</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">conf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">include</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">lib</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">logs</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">native-jni-lib</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">temp</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">7</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">webapps</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">work</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat#</span> <span class=\"string\">cd</span> <span class=\"string\">webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">RELEASE-NOTES.txt</span>  <span class=\"string\">bg-button.png</span>  <span class=\"string\">bg-upper.png</span>\t<span class=\"string\">tomcat-power.gif</span>  <span class=\"string\">tomcat.png</span></span><br><span class=\"line\"><span class=\"string\">WEB-INF</span>\t\t   <span class=\"string\">bg-middle.png</span>  <span class=\"string\">favicon.ico</span>\t<span class=\"string\">tomcat.css</span>\t  <span class=\"string\">tomcat.svg</span></span><br><span class=\"line\"><span class=\"string\">asf-logo-wide.svg</span>  <span class=\"string\">bg-nav.png</span>\t  <span class=\"string\">index.jsp</span>\t<span class=\"string\">tomcat.gif</span></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat/webapps/ROOT#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/tomcat/webapps/ROOT</span></span><br></pre></td></tr></table></figure>\n<p>查看脚本</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"comment\"># cat Dockerfile</span></span><br><span class=\"line\"><span class=\"comment\">## Dockerfile脚本开始</span></span><br><span class=\"line\">FROM tomcat</span><br><span class=\"line\">RUN echo <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>webapps<span class=\"regexp\">/ROOT/i</span>ndex.html</span><br></pre></td></tr></table></figure>\n<h2><span id=\"构建镜像\">构建镜像</span></h2>\n<ul>\n<li>在 Dockerfile 文件所在目录执行：<br>\n<code>docker build [选项] &lt;上下文路径/URL/-&gt;</code><br>\n<code>docker build -t &lt;name&gt; .</code><br>\n<code>docker build -t &lt;name&gt; &lt;Dockerfile&gt;</code></li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># docker build -t mytomcatdocker .</span></span><br><span class=\"line\">Sending build context <span class=\"keyword\">to</span> Docker daemon  <span class=\"number\">2.048</span>kB</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">1</span>/<span class=\"number\">2</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">2</span>/<span class=\"number\">2</span> : <span class=\"built_in\">RUN</span> echo <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> <span class=\"number\">5</span>d88c8eacd22</span><br><span class=\"line\">Removing intermediate container <span class=\"number\">5</span>d88c8eacd22</span><br><span class=\"line\"> ---&gt; <span class=\"number\">12</span>aa14e2403d</span><br><span class=\"line\">Successfully built <span class=\"number\">12</span>aa14e2403d</span><br><span class=\"line\">Successfully tagged mytomcatdocker:latest</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<p>RUN指令启动了一个容器 5d88c8eacd22 执行了所要求的命令，并最后提交了这一层 12aa14e2403d 随后删除了 5d88c8eacd22</p>\n<ul>\n<li>查看镜像</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>          <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"string\">mytomcatdocker</span>      <span class=\"string\">latest</span>              <span class=\"string\">12aa14e2403d</span>        <span class=\"number\">6</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>       <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">latest</span>              <span class=\"string\">97423576f288</span>        <span class=\"number\">3</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>              <span class=\"string\">latest</span>              <span class=\"string\">96c4e536d0eb</span>        <span class=\"number\">4</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">nginx</span>               <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">41e97992fcd8</span>        <span class=\"number\">5</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">ubuntu</span>              <span class=\"number\">16.04</span>               <span class=\"string\">5e13f8dd4c1a</span>        <span class=\"number\">8</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">120MB</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>再以交互的方式进入mytomcatdocker</li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ sudo docker run -it mytomcatdocker bash</span><br><span class=\"line\">root<span class=\"variable\">@8de78a99decd</span><span class=\"symbol\">:/usr/local/tomcat</span><span class=\"comment\"># ls -al</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">160</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxrwsr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">15</span> <span class=\"number\">05</span><span class=\"string\">:20</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">19534</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">BUILDING.txt</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">5407</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">57011</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">LICENSE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">1726</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">NOTICE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">3255</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">README.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">16262</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RUNNING.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">bin</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">conf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">include</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">lib</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">logs</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">native-jni-lib</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">temp</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">webapps</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">work</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>进入root</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat#</span> <span class=\"string\">cd</span> <span class=\"string\">webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat/webapps/ROOT#</span></span><br><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">196</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">20</span> <span class=\"number\">01</span><span class=\"string\">:34</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">WEB-INF</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">27235</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">asf-logo-wide.svg</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">713</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-button.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1918</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-middle.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1401</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-nav.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">3103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-upper.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">21630</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">favicon.ico</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>    <span class=\"number\">24</span> <span class=\"string\">Sep</span> <span class=\"number\">20</span> <span class=\"number\">01</span><span class=\"string\">:34</span> <span class=\"string\">index.html</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">12208</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">index.jsp</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2376</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat-power.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5581</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.css</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2066</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">67795</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.svg</span></span><br></pre></td></tr></table></figure>\n<p>index.html存在了</p>\n<ul>\n<li>查看index.html</li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@8de78a99decd</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># cat index.html</span></span><br><span class=\"line\">&lt;h1&gt;Hello, Docker!&lt;<span class=\"regexp\">/h1&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"删除indexjsp\">删除index.jsp</span></h2>\n<p>但是我不想要index.jsp,所以需要在dockerfile脚本中删除ROOT下所有的东西这样,我暴露8081端口的时候只能看到index.html中的内容</p>\n<ul>\n<li>进入Dockerfile</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ <span class=\"keyword\">cd</span> <span class=\"string\">/usr/local/docker/tomcat</span></span><br><span class=\"line\">➜  tomcat <span class=\"keyword\">ls</span></span><br><span class=\"line\">Dockerfile</span><br><span class=\"line\">➜  tomcat</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改Dockerfile</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.html</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>重复先前的操作<br>\n删除掉原先创建的镜像<br>\nsudo docker image rm 12a</li>\n</ul>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  tomcat sudo docker build -t mydocker .</span><br><span class=\"line\">Sending build context <span class=\"built_in\">to</span> Docker daemon  <span class=\"number\">2.048</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">4</span> : FROM tomcat</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 96c4e536d0eb</span></span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">4</span> : RUN cd /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 582adfa700d2</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">582</span>adfa700d2</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 300e7b9c024b</span></span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">4</span> : RUN rm -fr *</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 0637d8d5df11</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">0637</span>d8d5df11</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 137fe42507bf</span></span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">4</span> : RUN echo <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 55a7cef531e0</span></span><br><span class=\"line\">/bin/sh: <span class=\"number\">1</span>: cannot <span class=\"built_in\">create</span> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.html: Directory nonexistent</span><br><span class=\"line\">The <span class=\"keyword\">command</span> <span class=\"string\">'/bin/sh -c echo '</span>&lt;<span class=\"title\">h1</span>&gt;<span class=\"title\">Hello</span>, <span class=\"title\">Docker</span>!&lt;/<span class=\"title\">h1</span>&gt;<span class=\"string\">' &gt; /usr/local/tomcat/webapps/ROOT/index.html'</span> <span class=\"title\">returned</span> <span class=\"title\">a</span> <span class=\"title\">non-zero</span> <span class=\"title\">code</span>: <span class=\"title\">2</span></span><br><span class=\"line\">➜  tomcat docker images</span><br><span class=\"line\">Got permission denied <span class=\"keyword\">while</span> trying <span class=\"built_in\">to</span> connect <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> Docker daemon <span class=\"built_in\">socket</span> <span class=\"keyword\">at</span> unix:<span class=\"comment\">///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/images/json: dial unix /var/run/docker.sock: connect: permission denied</span></span><br><span class=\"line\">➜  tomcat sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class=\"line\">&lt;<span class=\"literal\">none</span>&gt;              &lt;<span class=\"literal\">none</span>&gt;              <span class=\"number\">137</span>fe42507bf        About <span class=\"keyword\">a</span> minute ago   <span class=\"number\">506</span>MB</span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>              latest              <span class=\"number\">97423576</span>f288        <span class=\"number\">3</span> weeks ago          <span class=\"number\">126</span>MB</span><br><span class=\"line\">tomcat              latest              <span class=\"number\">96</span>c4e536d0eb        <span class=\"number\">4</span> weeks ago          <span class=\"number\">506</span>MB</span><br><span class=\"line\">nginx               <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"number\">41e97992</span>fcd8        <span class=\"number\">5</span> weeks ago          <span class=\"number\">126</span>MB</span><br><span class=\"line\">ubuntu              <span class=\"number\">16.04</span>               <span class=\"number\">5e13</span>f8dd4c1a        <span class=\"number\">8</span> weeks ago          <span class=\"number\">120</span>MB</span><br><span class=\"line\">➜  tomcat</span><br></pre></td></tr></table></figure>\n<p>在创建过程中<code>RUN rm -rf *</code> 连着ROOT也一起删除了所有会报错,所以新的镜像成为了虚悬镜像</p>\n<ul>\n<li>修改脚本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dockerfile脚本开始</span><br><span class=\"line\">FROM tomcat</span><br><span class=\"line\">WORKDIR /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\">RUN rm -fr *</span><br><span class=\"line\">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/local/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\">➜  tomcat sudo docker build -t mydocker .</span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/4 : FROM tomcat</span><br><span class=\"line\"> ---&gt; 96c4e536d0eb</span><br><span class=\"line\">Step 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Running in 57f471bc028d</span><br><span class=\"line\">Removing intermediate container 57f471bc028d</span><br><span class=\"line\"> ---&gt; 9350deb03d0d</span><br><span class=\"line\">Step 3/4 : RUN rm -fr *</span><br><span class=\"line\"> ---&gt; Running in dbaf4d7ad1d1</span><br><span class=\"line\">Removing intermediate container dbaf4d7ad1d1</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step 4/4 : RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/local/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\"> ---&gt; Running in 91aa52622c26</span><br><span class=\"line\">Removing intermediate container 91aa52622c26</span><br><span class=\"line\"> ---&gt; 4691fd38efff</span><br><span class=\"line\">Successfully built 4691fd38efff</span><br><span class=\"line\">Successfully tagged mydocker:latest</span><br><span class=\"line\">➜  tomcat sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mydocker            latest              4691fd38efff        34 seconds ago      506MB</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              137fe42507bf        6 minutes ago       506MB</span><br><span class=\"line\">1.16.1              latest              97423576f288        3 weeks ago         126MB</span><br><span class=\"line\">tomcat              latest              96c4e536d0eb        4 weeks ago         506MB</span><br><span class=\"line\">nginx               1.16.1              41e97992fcd8        5 weeks ago         126MB</span><br><span class=\"line\">ubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB</span><br><span class=\"line\">➜  tomcat sudo docker run -it 4691 bash</span><br><span class=\"line\">root@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# ls</span><br><span class=\"line\">index.html</span><br><span class=\"line\">root@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# cat index.html </span><br><span class=\"line\">&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>** notice 各个相同源镜像的空间是公用的 **</p>\n<p><code>docker image prune</code> 删除虚悬镜像</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  tomcat sudo docker <span class=\"keyword\">run</span><span class=\"bash\"> -p 8081:8080 4691</span></span><br></pre></td></tr></table></figure>\n<p>查看网页是否成功<br>\n<img src=\"/2019/09/19/Docker学习6-Dockerfile定制镜像2/mydocker.png\" alt></p>\n<p>docker的又一大特性出现了,与运行环境无关,真正做到了一次构建,到处运行.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>Docker学习6-Dockerfile定制镜像2</h2>\n<ul>\n<li>Docker 停止一个运行的容器<br>\n<code>docker stop &lt;id&gt;</code></li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span>db5c8940e5a        tomcat              <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">29</span> minutes ago       Up <span class=\"number\">29</span> minutes               0.0.0.0<span class=\"symbol\">:</span><span class=\"number\">8081</span>-&gt;<span class=\"number\">8080</span>/tcp   dreamy_moore</span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\"># docker rm 898</span></span><br><span class=\"line\"><span class=\"number\">898</span></span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\"># docker stop 7db</span></span><br><span class=\"line\"><span class=\"number\">7</span>db</span><br><span class=\"line\">[root<span class=\"variable\">@MyCentOS</span>]~<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n<h2>自己配置镜像</h2>\n<p>这个是用户经常操作的目录所有把文件存放在这里,所有和docker相关的都在里面</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>~<span class=\"meta\"># cd /usr/local</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span><span class=\"meta\">#</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span><span class=\"meta\"># mkdir docker</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span><span class=\"meta\"># cd docker</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># mkdir tomcat</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker<span class=\"meta\"># cd tomcat</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># vi Dockerfile</span></span><br></pre></td></tr></table></figure>\n<p>这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，FROM 和 RUN</p>\n<h1>Dockerfile脚本开始</h1>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.jsp</span></span><br><span class=\"line\">~                                                                                        </span><br><span class=\"line\">~                                                                                           </span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h2>FROM指定基础镜像</h2>\n<p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。</p>\n<h2>RUN 执行命令</h2>\n<p>RUN执行命令行命令的命令</p>\n<p>所有的Dockerfile第一行都必须是FROM命令,RUN 指令在定制镜像时是最常用的指令之一</p>\n<ul>\n<li>shell格式:<code>RUN</code>就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.jsp</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>exec 格式：RUN [“可执行文件”, “参数1”, “参数2”]，这更像是函数调用中的格式</li>\n</ul>\n<p>既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p>\n<p>Dockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。</p>\n<p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p>\n<p>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> apt-<span class=\"builtin-name\">get</span> update</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> apt-<span class=\"builtin-name\">get</span> install -y gcc libc6-dev make</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span></span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> mkdir -p /usr/src/redis</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> tar -xzf redis.tar.gz -C /usr/src/redis <span class=\"attribute\">--strip-components</span>=1</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> make -C /usr/src/redis</span><br><span class=\"line\"><span class=\"builtin-name\">RUN</span> make -C /usr/src/redis install</span><br></pre></td></tr></table></figure>\n<p>上面的 Dockerfile 正确的写法应该是这样：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian:jessie</span><br><span class=\"line\"></span><br><span class=\"line\">RUN buildDeps=<span class=\"string\">'gcc libc6-dev make'</span> \\</span><br><span class=\"line\">    &amp;&amp; apt-get update \\</span><br><span class=\"line\">    &amp;&amp; apt-get install -y <span class=\"variable\">$buildDeps</span> \\</span><br><span class=\"line\">    &amp;&amp; wget -O redis.tar.gz <span class=\"string\">\"http://download.redis.io/releases/redis-3.2.5.tar.gz\"</span> \\</span><br><span class=\"line\">    &amp;&amp; mkdir -p <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/redis \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; tar -xzf redis.tar.gz -C /u</span>sr<span class=\"regexp\">/src/</span>redis --strip-components=<span class=\"number\">1</span> \\</span><br><span class=\"line\">    &amp;&amp; make -C <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/redis \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; make -C /u</span>sr<span class=\"regexp\">/src/</span>redis install \\</span><br><span class=\"line\">    &amp;&amp; rm -rf <span class=\"regexp\">/var/</span>lib<span class=\"regexp\">/apt/</span>lists<span class=\"regexp\">/* \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; rm redis.tar.gz \\</span></span><br><span class=\"line\"><span class=\"regexp\">    &amp;&amp; rm -r /u</span>sr<span class=\"regexp\">/src/</span>redis \\</span><br><span class=\"line\">    &amp;&amp; apt-get purge -y --auto-remove <span class=\"variable\">$buildDeps</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>以交互的方式启动一条命令<br>\n<code>~ sudo docker run -it --rm tomcat bash</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-it</span> <span class=\"string\">--rm</span> <span class=\"string\">tomcat</span> <span class=\"string\">bash</span></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">160</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxrwsr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">15</span> <span class=\"number\">05</span><span class=\"string\">:20</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">19534</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">BUILDING.txt</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">5407</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">57011</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">LICENSE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">1726</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">NOTICE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">3255</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">README.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">16262</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RUNNING.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">bin</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">conf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">include</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">lib</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">logs</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">native-jni-lib</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">temp</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">7</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">webapps</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">work</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat#</span> <span class=\"string\">cd</span> <span class=\"string\">webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">RELEASE-NOTES.txt</span>  <span class=\"string\">bg-button.png</span>  <span class=\"string\">bg-upper.png</span>\t<span class=\"string\">tomcat-power.gif</span>  <span class=\"string\">tomcat.png</span></span><br><span class=\"line\"><span class=\"string\">WEB-INF</span>\t\t   <span class=\"string\">bg-middle.png</span>  <span class=\"string\">favicon.ico</span>\t<span class=\"string\">tomcat.css</span>\t  <span class=\"string\">tomcat.svg</span></span><br><span class=\"line\"><span class=\"string\">asf-logo-wide.svg</span>  <span class=\"string\">bg-nav.png</span>\t  <span class=\"string\">index.jsp</span>\t<span class=\"string\">tomcat.gif</span></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat/webapps/ROOT#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">root@14630cb2f338:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">/usr/local/tomcat/webapps/ROOT</span></span><br></pre></td></tr></table></figure>\n<p>查看脚本</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/</span>tomcat<span class=\"comment\"># cat Dockerfile</span></span><br><span class=\"line\"><span class=\"comment\">## Dockerfile脚本开始</span></span><br><span class=\"line\">FROM tomcat</span><br><span class=\"line\">RUN echo <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>webapps<span class=\"regexp\">/ROOT/i</span>ndex.html</span><br></pre></td></tr></table></figure>\n<h2>构建镜像</h2>\n<ul>\n<li>在 Dockerfile 文件所在目录执行：<br>\n<code>docker build [选项] &lt;上下文路径/URL/-&gt;</code><br>\n<code>docker build -t &lt;name&gt; .</code><br>\n<code>docker build -t &lt;name&gt; &lt;Dockerfile&gt;</code></li>\n</ul>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\"># docker build -t mytomcatdocker .</span></span><br><span class=\"line\">Sending build context <span class=\"keyword\">to</span> Docker daemon  <span class=\"number\">2.048</span>kB</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">1</span>/<span class=\"number\">2</span> : FROM tomcat</span><br><span class=\"line\"> ---&gt; <span class=\"number\">96</span>c4e536d0eb</span><br><span class=\"line\"><span class=\"keyword\">Step</span> <span class=\"number\">2</span>/<span class=\"number\">2</span> : <span class=\"built_in\">RUN</span> echo <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"keyword\">local</span>/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\"> ---&gt; Running <span class=\"keyword\">in</span> <span class=\"number\">5</span>d88c8eacd22</span><br><span class=\"line\">Removing intermediate container <span class=\"number\">5</span>d88c8eacd22</span><br><span class=\"line\"> ---&gt; <span class=\"number\">12</span>aa14e2403d</span><br><span class=\"line\">Successfully built <span class=\"number\">12</span>aa14e2403d</span><br><span class=\"line\">Successfully tagged mytomcatdocker:latest</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/tomcat<span class=\"meta\">#</span></span><br></pre></td></tr></table></figure>\n<p>RUN指令启动了一个容器 5d88c8eacd22 执行了所要求的命令，并最后提交了这一层 12aa14e2403d 随后删除了 5d88c8eacd22</p>\n<ul>\n<li>查看镜像</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">➜</span>  <span class=\"string\">~</span> <span class=\"string\">sudo</span> <span class=\"string\">docker</span> <span class=\"string\">images</span></span><br><span class=\"line\"><span class=\"string\">[sudo]</span> <span class=\"attr\">password for ziming:</span></span><br><span class=\"line\"><span class=\"string\">REPOSITORY</span>          <span class=\"string\">TAG</span>                 <span class=\"string\">IMAGE</span> <span class=\"string\">ID</span>            <span class=\"string\">CREATED</span>             <span class=\"string\">SIZE</span></span><br><span class=\"line\"><span class=\"string\">mytomcatdocker</span>      <span class=\"string\">latest</span>              <span class=\"string\">12aa14e2403d</span>        <span class=\"number\">6</span> <span class=\"string\">minutes</span> <span class=\"string\">ago</span>       <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">latest</span>              <span class=\"string\">97423576f288</span>        <span class=\"number\">3</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">tomcat</span>              <span class=\"string\">latest</span>              <span class=\"string\">96c4e536d0eb</span>        <span class=\"number\">4</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">506MB</span></span><br><span class=\"line\"><span class=\"string\">nginx</span>               <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"string\">41e97992fcd8</span>        <span class=\"number\">5</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">126MB</span></span><br><span class=\"line\"><span class=\"string\">ubuntu</span>              <span class=\"number\">16.04</span>               <span class=\"string\">5e13f8dd4c1a</span>        <span class=\"number\">8</span> <span class=\"string\">weeks</span> <span class=\"string\">ago</span>         <span class=\"string\">120MB</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>再以交互的方式进入mytomcatdocker</li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~ sudo docker run -it mytomcatdocker bash</span><br><span class=\"line\">root<span class=\"variable\">@8de78a99decd</span><span class=\"symbol\">:/usr/local/tomcat</span><span class=\"comment\"># ls -al</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">160</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxrwsr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">15</span> <span class=\"number\">05</span><span class=\"string\">:20</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">19534</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">BUILDING.txt</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">5407</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">CONTRIBUTING.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">57011</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">LICENSE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">1726</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">NOTICE</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">3255</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">README.md</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">16262</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RUNNING.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">bin</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">conf</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">include</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">lib</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">logs</span></span><br><span class=\"line\"><span class=\"string\">drwxr-sr-x</span> <span class=\"number\">3</span> <span class=\"string\">root</span> <span class=\"string\">staff</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">native-jni-lib</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">temp</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">webapps</span></span><br><span class=\"line\"><span class=\"string\">drwxrwxrwx</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">work</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>进入root</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat#</span> <span class=\"string\">cd</span> <span class=\"string\">webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat/webapps/ROOT#</span></span><br><span class=\"line\"><span class=\"string\">root@8de78a99decd:/usr/local/tomcat/webapps/ROOT#</span> <span class=\"string\">ls</span> <span class=\"string\">-al</span></span><br><span class=\"line\"><span class=\"string\">total</span> <span class=\"number\">196</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Sep</span> <span class=\"number\">20</span> <span class=\"number\">01</span><span class=\"string\">:34</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">..</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">7139</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">RELEASE-NOTES.txt</span></span><br><span class=\"line\"><span class=\"string\">drwxr-xr-x</span> <span class=\"number\">2</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">4096</span> <span class=\"string\">Aug</span> <span class=\"number\">22</span> <span class=\"number\">00</span><span class=\"string\">:26</span> <span class=\"string\">WEB-INF</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">27235</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">asf-logo-wide.svg</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>   <span class=\"number\">713</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-button.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1918</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-middle.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">1401</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-nav.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">3103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">bg-upper.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">21630</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">favicon.ico</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>    <span class=\"number\">24</span> <span class=\"string\">Sep</span> <span class=\"number\">20</span> <span class=\"number\">01</span><span class=\"string\">:34</span> <span class=\"string\">index.html</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">12208</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">index.jsp</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2376</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat-power.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5581</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.css</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">2066</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.gif</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span>  <span class=\"number\">5103</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:24</span> <span class=\"string\">tomcat.png</span></span><br><span class=\"line\"><span class=\"string\">-rw-r--r--</span> <span class=\"number\">1</span> <span class=\"string\">root</span> <span class=\"string\">root</span> <span class=\"number\">67795</span> <span class=\"string\">Aug</span> <span class=\"number\">14</span> <span class=\"number\">22</span><span class=\"string\">:27</span> <span class=\"string\">tomcat.svg</span></span><br></pre></td></tr></table></figure>\n<p>index.html存在了</p>\n<ul>\n<li>查看index.html</li>\n</ul>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root<span class=\"variable\">@8de78a99decd</span><span class=\"symbol\">:/usr/local/tomcat/webapps/ROOT</span><span class=\"comment\"># cat index.html</span></span><br><span class=\"line\">&lt;h1&gt;Hello, Docker!&lt;<span class=\"regexp\">/h1&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>删除index.jsp</h2>\n<p>但是我不想要index.jsp,所以需要在dockerfile脚本中删除ROOT下所有的东西这样,我暴露8081端口的时候只能看到index.html中的内容</p>\n<ul>\n<li>进入Dockerfile</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ <span class=\"keyword\">cd</span> <span class=\"string\">/usr/local/docker/tomcat</span></span><br><span class=\"line\">➜  tomcat <span class=\"keyword\">ls</span></span><br><span class=\"line\">Dockerfile</span><br><span class=\"line\">➜  tomcat</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改Dockerfile</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile脚本开始</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> tomcat</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> rm -fr *</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.html</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>重复先前的操作<br>\n删除掉原先创建的镜像<br>\nsudo docker image rm 12a</li>\n</ul>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  tomcat sudo docker build -t mydocker .</span><br><span class=\"line\">Sending build context <span class=\"built_in\">to</span> Docker daemon  <span class=\"number\">2.048</span>kB</span><br><span class=\"line\">Step <span class=\"number\">1</span>/<span class=\"number\">4</span> : FROM tomcat</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 96c4e536d0eb</span></span><br><span class=\"line\">Step <span class=\"number\">2</span>/<span class=\"number\">4</span> : RUN cd /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 582adfa700d2</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">582</span>adfa700d2</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 300e7b9c024b</span></span><br><span class=\"line\">Step <span class=\"number\">3</span>/<span class=\"number\">4</span> : RUN rm -fr *</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 0637d8d5df11</span></span><br><span class=\"line\">Removing intermediate container <span class=\"number\">0637</span>d8d5df11</span><br><span class=\"line\"> <span class=\"comment\">---&gt; 137fe42507bf</span></span><br><span class=\"line\">Step <span class=\"number\">4</span>/<span class=\"number\">4</span> : RUN echo <span class=\"string\">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\"> <span class=\"comment\">---&gt; Running in 55a7cef531e0</span></span><br><span class=\"line\">/bin/sh: <span class=\"number\">1</span>: cannot <span class=\"built_in\">create</span> /usr/<span class=\"built_in\">local</span>/tomcat/webapps/ROOT/index.html: Directory nonexistent</span><br><span class=\"line\">The <span class=\"keyword\">command</span> <span class=\"string\">'/bin/sh -c echo '</span>&lt;<span class=\"title\">h1</span>&gt;<span class=\"title\">Hello</span>, <span class=\"title\">Docker</span>!&lt;/<span class=\"title\">h1</span>&gt;<span class=\"string\">' &gt; /usr/local/tomcat/webapps/ROOT/index.html'</span> <span class=\"title\">returned</span> <span class=\"title\">a</span> <span class=\"title\">non-zero</span> <span class=\"title\">code</span>: <span class=\"title\">2</span></span><br><span class=\"line\">➜  tomcat docker images</span><br><span class=\"line\">Got permission denied <span class=\"keyword\">while</span> trying <span class=\"built_in\">to</span> connect <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> Docker daemon <span class=\"built_in\">socket</span> <span class=\"keyword\">at</span> unix:<span class=\"comment\">///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/images/json: dial unix /var/run/docker.sock: connect: permission denied</span></span><br><span class=\"line\">➜  tomcat sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class=\"line\">&lt;<span class=\"literal\">none</span>&gt;              &lt;<span class=\"literal\">none</span>&gt;              <span class=\"number\">137</span>fe42507bf        About <span class=\"keyword\">a</span> minute ago   <span class=\"number\">506</span>MB</span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>              latest              <span class=\"number\">97423576</span>f288        <span class=\"number\">3</span> weeks ago          <span class=\"number\">126</span>MB</span><br><span class=\"line\">tomcat              latest              <span class=\"number\">96</span>c4e536d0eb        <span class=\"number\">4</span> weeks ago          <span class=\"number\">506</span>MB</span><br><span class=\"line\">nginx               <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"number\">41e97992</span>fcd8        <span class=\"number\">5</span> weeks ago          <span class=\"number\">126</span>MB</span><br><span class=\"line\">ubuntu              <span class=\"number\">16.04</span>               <span class=\"number\">5e13</span>f8dd4c1a        <span class=\"number\">8</span> weeks ago          <span class=\"number\">120</span>MB</span><br><span class=\"line\">➜  tomcat</span><br></pre></td></tr></table></figure>\n<p>在创建过程中<code>RUN rm -rf *</code> 连着ROOT也一起删除了所有会报错,所以新的镜像成为了虚悬镜像</p>\n<ul>\n<li>修改脚本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Dockerfile脚本开始</span><br><span class=\"line\">FROM tomcat</span><br><span class=\"line\">WORKDIR /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\">RUN rm -fr *</span><br><span class=\"line\">RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/local/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\">➜  tomcat sudo docker build -t mydocker .</span><br><span class=\"line\">Sending build context to Docker daemon  2.048kB</span><br><span class=\"line\">Step 1/4 : FROM tomcat</span><br><span class=\"line\"> ---&gt; 96c4e536d0eb</span><br><span class=\"line\">Step 2/4 : WORKDIR /usr/local/tomcat/webapps/ROOT/</span><br><span class=\"line\"> ---&gt; Running in 57f471bc028d</span><br><span class=\"line\">Removing intermediate container 57f471bc028d</span><br><span class=\"line\"> ---&gt; 9350deb03d0d</span><br><span class=\"line\">Step 3/4 : RUN rm -fr *</span><br><span class=\"line\"> ---&gt; Running in dbaf4d7ad1d1</span><br><span class=\"line\">Removing intermediate container dbaf4d7ad1d1</span><br><span class=\"line\"> ---&gt; f6814fab3fe4</span><br><span class=\"line\">Step 4/4 : RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/local/tomcat/webapps/ROOT/index.html</span><br><span class=\"line\"> ---&gt; Running in 91aa52622c26</span><br><span class=\"line\">Removing intermediate container 91aa52622c26</span><br><span class=\"line\"> ---&gt; 4691fd38efff</span><br><span class=\"line\">Successfully built 4691fd38efff</span><br><span class=\"line\">Successfully tagged mydocker:latest</span><br><span class=\"line\">➜  tomcat sudo docker images</span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">mydocker            latest              4691fd38efff        34 seconds ago      506MB</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              137fe42507bf        6 minutes ago       506MB</span><br><span class=\"line\">1.16.1              latest              97423576f288        3 weeks ago         126MB</span><br><span class=\"line\">tomcat              latest              96c4e536d0eb        4 weeks ago         506MB</span><br><span class=\"line\">nginx               1.16.1              41e97992fcd8        5 weeks ago         126MB</span><br><span class=\"line\">ubuntu              16.04               5e13f8dd4c1a        8 weeks ago         120MB</span><br><span class=\"line\">➜  tomcat sudo docker run -it 4691 bash</span><br><span class=\"line\">root@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# ls</span><br><span class=\"line\">index.html</span><br><span class=\"line\">root@33d9191d7b3b:/usr/local/tomcat/webapps/ROOT# cat index.html </span><br><span class=\"line\">&lt;h1&gt;Hello, Docker!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\n<p>** notice 各个相同源镜像的空间是公用的 **</p>\n<p><code>docker image prune</code> 删除虚悬镜像</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  tomcat sudo docker <span class=\"keyword\">run</span><span class=\"bash\"> -p 8081:8080 4691</span></span><br></pre></td></tr></table></figure>\n<p>查看网页是否成功<br>\n<img src=\"/2019/09/19/Docker学习6-Dockerfile定制镜像2/mydocker.png\" alt></p>\n<p>docker的又一大特性出现了,与运行环境无关,真正做到了一次构建,到处运行.</p>\n"},{"title":"GCP上搭建虚拟服务器VPS","catalog":true,"date":"2021-03-20T03:10:24.000Z","subtitle":null,"header-img":null,"_content":"\n# 在GCP上搭建虚拟服务器VPS\n## GCP注册的准备工作\n- 需要VISA/MasterCard实体信用卡\n- 在Google cloud platform上申请领取$300促销赠金\n- 填写账单信息, 可根据谷歌地图查找VPN真实地址相对应\n\n> 促销赠金可用作一种付款方式，减少您应支付的总金额。GCP 免费试用和营销活动赠金归入此类别。\n\n## 创建一个虚拟服务器\n\n我注册GCP时使用的香港地区的IP, 这里建议搭建台湾地区, 性能选择最低的,这样每个月费用8.08港币.\n\n![image-20210320114607638](GCP上搭建虚拟服务器VPS/image-20210320114607638.png)\n\n## 创建防火墙规则\n\nVPS初始化完成后需要修改创建防火墙规则,一下图片为我的配置图方便后面搭建服务,数据库,docker暴露端口使用.\n\n![image-20210320114913928](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320114913928.png)\n\n## 使用shell连接服务器\n\n这里使用的xshell\n\n\n\n![image-20210320115328701](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320115328701.png)\n\n没有ssh-key的可以使用xshell自带的工具生成一个\n\n## 上传SSH公钥到服务器\n\n![image-20210320115617696](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320115617696.png)\n\n把生成的ssh-key 保存服务器创建ssh秘钥处\n\n<!--如果上一步忘了可以在元配置处配置-->\n\n## 搭建成功\n\n![image-20210320122741827](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320122741827.png)","source":"_posts/GCP上搭建虚拟服务器VPS.md","raw":"---\ntitle: GCP上搭建虚拟服务器VPS\ncatalog: true\ntags: [GCP, VPS]\ndate: 2021-03-20 11:10:24\nsubtitle:\nheader-img:\n---\n\n# 在GCP上搭建虚拟服务器VPS\n## GCP注册的准备工作\n- 需要VISA/MasterCard实体信用卡\n- 在Google cloud platform上申请领取$300促销赠金\n- 填写账单信息, 可根据谷歌地图查找VPN真实地址相对应\n\n> 促销赠金可用作一种付款方式，减少您应支付的总金额。GCP 免费试用和营销活动赠金归入此类别。\n\n## 创建一个虚拟服务器\n\n我注册GCP时使用的香港地区的IP, 这里建议搭建台湾地区, 性能选择最低的,这样每个月费用8.08港币.\n\n![image-20210320114607638](GCP上搭建虚拟服务器VPS/image-20210320114607638.png)\n\n## 创建防火墙规则\n\nVPS初始化完成后需要修改创建防火墙规则,一下图片为我的配置图方便后面搭建服务,数据库,docker暴露端口使用.\n\n![image-20210320114913928](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320114913928.png)\n\n## 使用shell连接服务器\n\n这里使用的xshell\n\n\n\n![image-20210320115328701](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320115328701.png)\n\n没有ssh-key的可以使用xshell自带的工具生成一个\n\n## 上传SSH公钥到服务器\n\n![image-20210320115617696](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320115617696.png)\n\n把生成的ssh-key 保存服务器创建ssh秘钥处\n\n<!--如果上一步忘了可以在元配置处配置-->\n\n## 搭建成功\n\n![image-20210320122741827](GCP%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%8D%E5%8A%A1%E5%99%A8VPS/image-20210320122741827.png)","slug":"GCP上搭建虚拟服务器VPS","published":1,"updated":"2021-04-20T13:28:10.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2d001kzgl17pxpksi4","content":"<h1><span id=\"在gcp上搭建虚拟服务器vps\">在GCP上搭建虚拟服务器VPS</span></h1>\n<h2><span id=\"gcp注册的准备工作\">GCP注册的准备工作</span></h2>\n<ul>\n<li>需要VISA/MasterCard实体信用卡</li>\n<li>在Google cloud platform上申请领取$300促销赠金</li>\n<li>填写账单信息, 可根据谷歌地图查找VPN真实地址相对应</li>\n</ul>\n<blockquote>\n<p>促销赠金可用作一种付款方式，减少您应支付的总金额。GCP 免费试用和营销活动赠金归入此类别。</p>\n</blockquote>\n<h2><span id=\"创建一个虚拟服务器\">创建一个虚拟服务器</span></h2>\n<p>我注册GCP时使用的香港地区的IP, 这里建议搭建台湾地区, 性能选择最低的,这样每个月费用8.08港币.</p>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320114607638.png\" alt=\"image-20210320114607638\"></p>\n<h2><span id=\"创建防火墙规则\">创建防火墙规则</span></h2>\n<p>VPS初始化完成后需要修改创建防火墙规则,一下图片为我的配置图方便后面搭建服务,数据库,docker暴露端口使用.</p>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320114913928.png\" alt=\"image-20210320114913928\"></p>\n<h2><span id=\"使用shell连接服务器\">使用shell连接服务器</span></h2>\n<p>这里使用的xshell</p>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320115328701.png\" alt=\"image-20210320115328701\"></p>\n<p>没有ssh-key的可以使用xshell自带的工具生成一个</p>\n<h2><span id=\"上传ssh公钥到服务器\">上传SSH公钥到服务器</span></h2>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320115617696.png\" alt=\"image-20210320115617696\"></p>\n<p>把生成的ssh-key 保存服务器创建ssh秘钥处</p>\n<!--如果上一步忘了可以在元配置处配置-->\n<h2><span id=\"搭建成功\">搭建成功</span></h2>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320122741827.png\" alt=\"image-20210320122741827\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>在GCP上搭建虚拟服务器VPS</h1>\n<h2>GCP注册的准备工作</h2>\n<ul>\n<li>需要VISA/MasterCard实体信用卡</li>\n<li>在Google cloud platform上申请领取$300促销赠金</li>\n<li>填写账单信息, 可根据谷歌地图查找VPN真实地址相对应</li>\n</ul>\n<blockquote>\n<p>促销赠金可用作一种付款方式，减少您应支付的总金额。GCP 免费试用和营销活动赠金归入此类别。</p>\n</blockquote>\n<h2>创建一个虚拟服务器</h2>\n<p>我注册GCP时使用的香港地区的IP, 这里建议搭建台湾地区, 性能选择最低的,这样每个月费用8.08港币.</p>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320114607638.png\" alt=\"image-20210320114607638\"></p>\n<h2>创建防火墙规则</h2>\n<p>VPS初始化完成后需要修改创建防火墙规则,一下图片为我的配置图方便后面搭建服务,数据库,docker暴露端口使用.</p>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320114913928.png\" alt=\"image-20210320114913928\"></p>\n<h2>使用shell连接服务器</h2>\n<p>这里使用的xshell</p>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320115328701.png\" alt=\"image-20210320115328701\"></p>\n<p>没有ssh-key的可以使用xshell自带的工具生成一个</p>\n<h2>上传SSH公钥到服务器</h2>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320115617696.png\" alt=\"image-20210320115617696\"></p>\n<p>把生成的ssh-key 保存服务器创建ssh秘钥处</p>\n<!--如果上一步忘了可以在元配置处配置-->\n<h2>搭建成功</h2>\n<p><img src=\"/2021/03/20/GCP上搭建虚拟服务器VPS/image-20210320122741827.png\" alt=\"image-20210320122741827\"></p>\n"},{"title":"GitLab学习1-使用git托管代码","catalog":true,"date":"2019-09-30T01:45:50.000Z","subtitle":null,"header-img":null,"_content":"# Git简介\n- Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n- Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n- Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n## Git 的一般工作流程\n克隆 Git 资源作为工作目录。\n在克隆的资源上添加或修改文件。\n如果其他人修改了，你可以更新资源。\n在提交前查看修改。\n提交修改。\n在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n![1](GitLab学习1-使用git托管代码/1.png)\n\n## Git的畸变操作\n### 获取与创建项目命令\n- `git init`\n用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。\n\n- `git clone [url]`\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。\n\n### 基本快照\n- `git add <filename>`\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。\n~~~\n// 添加当前目录所有文件到缓存\ngit add .\n~~~\n\n- `git status`\ngit status 以查看在你上次提交之后是否有修改。\n~~~\ngit status\ngit status -s\n~~~\n\n- `git diff`\n执行 git diff 来查看执行 git status 的结果的详细信息。\ngit diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。\n- 尚未缓存的改动：git diff\n- 查看已缓存的改动： git diff --cached\n- 查看已缓存的与未缓存的所有改动：git diff HEAD\n- 显示摘要而非整个 diff：git diff --stat\n\n- `git commit`\n使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。\nGit 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。\n~~~\ngit config --global user.name 'yourname'\ngit config --global user.email youremail\n~~~\n将文件写入缓存区并提供提交注释\n~~~\ngit commit -m 'update message'\n~~~\n\n- `git reset HEAD`\ngit reset HEAD 命令用于取消已缓存的内容。\n~~~\ngit reset HEAD -- <filename>\n~~~\n### 拉取与推送\n- `git pull`\ngit pull 命令用于从另一个存储库或本地分支获取并集成 (整合)。git pull 命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并，它的完整格式稍稍有点复杂。\n~~~\ngit pull <远程主机名> <远程分支名>:<本地分支名>\n~~~\n将远程存储库中的更改合并到当前分支中。在默认模式下，git pull 是 git fetch 后跟 git merge FETCH_HEAD 的缩写。更准确地说，git pull 使用给定的参数运行 git fetch，并调用 git merge 将检索到的分支头合并到当前分支中.\n\n- `git push`\ngit push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相似。\n~~~\ngit push <远程主机名> <本地分支名>:<远程分支名>\n~~~\n\n### 标签\n- `git tag`\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。\n\n比如说，我们想为我们的 商城 项目发布一个 \"1.0.0\" 版本。 我们可以用 git tag -a v1.0.0 命令给最新一次提交打上（HEAD） \"v1.0.0\" 的标签。\n\n-a 选项意为 \"创建一个带注解的标签\"。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。\n~~~\ngit tag -a v1.0.0\n~~~\n如果我们要查看所有标签可以使用以下命令：\n~~~\ngit tag\n~~~\n\n## 参考资料\n> https://www.liaoxuefeng.com/wiki/896043488029600\n> https://www.funtl.com/zh/gitlab/Git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4\n","source":"_posts/GitLab学习1-使用git托管代码.md","raw":"---\ntitle: GitLab学习1-使用git托管代码\ncatalog: true\ntags: [GitLab, Git, Docker]\ndate: 2019-09-30 09:45:50\nsubtitle:\nheader-img:\n---\n# Git简介\n- Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n- Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n- Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。\n\n## Git 的一般工作流程\n克隆 Git 资源作为工作目录。\n在克隆的资源上添加或修改文件。\n如果其他人修改了，你可以更新资源。\n在提交前查看修改。\n提交修改。\n在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。\n![1](GitLab学习1-使用git托管代码/1.png)\n\n## Git的畸变操作\n### 获取与创建项目命令\n- `git init`\n用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。\n\n- `git clone [url]`\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。\n\n### 基本快照\n- `git add <filename>`\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。\n~~~\n// 添加当前目录所有文件到缓存\ngit add .\n~~~\n\n- `git status`\ngit status 以查看在你上次提交之后是否有修改。\n~~~\ngit status\ngit status -s\n~~~\n\n- `git diff`\n执行 git diff 来查看执行 git status 的结果的详细信息。\ngit diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。\n- 尚未缓存的改动：git diff\n- 查看已缓存的改动： git diff --cached\n- 查看已缓存的与未缓存的所有改动：git diff HEAD\n- 显示摘要而非整个 diff：git diff --stat\n\n- `git commit`\n使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。\nGit 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。\n~~~\ngit config --global user.name 'yourname'\ngit config --global user.email youremail\n~~~\n将文件写入缓存区并提供提交注释\n~~~\ngit commit -m 'update message'\n~~~\n\n- `git reset HEAD`\ngit reset HEAD 命令用于取消已缓存的内容。\n~~~\ngit reset HEAD -- <filename>\n~~~\n### 拉取与推送\n- `git pull`\ngit pull 命令用于从另一个存储库或本地分支获取并集成 (整合)。git pull 命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并，它的完整格式稍稍有点复杂。\n~~~\ngit pull <远程主机名> <远程分支名>:<本地分支名>\n~~~\n将远程存储库中的更改合并到当前分支中。在默认模式下，git pull 是 git fetch 后跟 git merge FETCH_HEAD 的缩写。更准确地说，git pull 使用给定的参数运行 git fetch，并调用 git merge 将检索到的分支头合并到当前分支中.\n\n- `git push`\ngit push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相似。\n~~~\ngit push <远程主机名> <本地分支名>:<远程分支名>\n~~~\n\n### 标签\n- `git tag`\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。\n\n比如说，我们想为我们的 商城 项目发布一个 \"1.0.0\" 版本。 我们可以用 git tag -a v1.0.0 命令给最新一次提交打上（HEAD） \"v1.0.0\" 的标签。\n\n-a 选项意为 \"创建一个带注解的标签\"。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。\n~~~\ngit tag -a v1.0.0\n~~~\n如果我们要查看所有标签可以使用以下命令：\n~~~\ngit tag\n~~~\n\n## 参考资料\n> https://www.liaoxuefeng.com/wiki/896043488029600\n> https://www.funtl.com/zh/gitlab/Git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4\n","slug":"GitLab学习1-使用git托管代码","published":1,"updated":"2021-04-20T13:28:10.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2e001mzgl1xoj64tim","content":"<h1><span id=\"git简介\">Git简介</span></h1>\n<ul>\n<li>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>\n<li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>\n<li>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</li>\n</ul>\n<h2><span id=\"git-的一般工作流程\">Git 的一般工作流程</span></h2>\n<p>克隆 Git 资源作为工作目录。<br>\n在克隆的资源上添加或修改文件。<br>\n如果其他人修改了，你可以更新资源。<br>\n在提交前查看修改。<br>\n提交修改。<br>\n在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。<br>\n<img src=\"/2019/09/30/GitLab学习1-使用git托管代码/1.png\" alt=\"1\"></p>\n<h2><span id=\"git的畸变操作\">Git的畸变操作</span></h2>\n<h3><span id=\"获取与创建项目命令\">获取与创建项目命令</span></h3>\n<ul>\n<li>\n<p><code>git init</code><br>\n用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。</p>\n</li>\n<li>\n<p><code>git clone [url]</code><br>\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p>\n</li>\n</ul>\n<h3><span id=\"基本快照\">基本快照</span></h3>\n<ul>\n<li><code>git add &lt;filename&gt;</code><br>\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加当前目录所有文件到缓存</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> .</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>git status</code><br>\ngit status 以查看在你上次提交之后是否有修改。</li>\n</ul>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">status</span></span><br><span class=\"line\">git <span class=\"keyword\">status</span> -s</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>git diff</code><br>\n执行 git diff 来查看执行 git status 的结果的详细信息。<br>\ngit diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p>\n</li>\n<li>\n<p>尚未缓存的改动：git diff</p>\n</li>\n<li>\n<p>查看已缓存的改动： git diff --cached</p>\n</li>\n<li>\n<p>查看已缓存的与未缓存的所有改动：git diff HEAD</p>\n</li>\n<li>\n<p>显示摘要而非整个 diff：git diff --stat</p>\n</li>\n<li>\n<p><code>git commit</code><br>\n使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。<br>\nGit 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>\n</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">'yourname'</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email youremail</span><br></pre></td></tr></table></figure>\n<p>将文件写入缓存区并提供提交注释</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">'update message'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>git reset HEAD</code><br>\ngit reset HEAD 命令用于取消已缓存的内容。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span> <span class=\"comment\">-- &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"拉取与推送\">拉取与推送</span></h3>\n<ul>\n<li><code>git pull</code><br>\ngit pull 命令用于从另一个存储库或本地分支获取并集成 (整合)。git pull 命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并，它的完整格式稍稍有点复杂。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull <span class=\"tag\">&lt;<span class=\"name\">远程主机名</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">远程分支名</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">本地分支名</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将远程存储库中的更改合并到当前分支中。在默认模式下，git pull 是 git fetch 后跟 git merge FETCH_HEAD 的缩写。更准确地说，git pull 使用给定的参数运行 git fetch，并调用 git merge 将检索到的分支头合并到当前分支中.</p>\n<ul>\n<li><code>git push</code><br>\ngit push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相似。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push <span class=\"tag\">&lt;<span class=\"name\">远程主机名</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">本地分支名</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">远程分支名</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"标签\">标签</span></h3>\n<ul>\n<li><code>git tag</code><br>\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</li>\n</ul>\n<p>比如说，我们想为我们的 商城 项目发布一个 “1.0.0” 版本。 我们可以用 git tag -a v1.0.0 命令给最新一次提交打上（HEAD） “v1.0.0” 的标签。</p>\n<p>-a 选项意为 “创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> v1.<span class=\"number\">0.0</span></span><br></pre></td></tr></table></figure>\n<p>如果我们要查看所有标签可以使用以下命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/896043488029600</a><br>\n<a href=\"https://www.funtl.com/zh/gitlab/Git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/gitlab/Git-的基本操作.html#获取与创建项目命令</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Git简介</h1>\n<ul>\n<li>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>\n<li>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>\n<li>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</li>\n</ul>\n<h2>Git 的一般工作流程</h2>\n<p>克隆 Git 资源作为工作目录。<br>\n在克隆的资源上添加或修改文件。<br>\n如果其他人修改了，你可以更新资源。<br>\n在提交前查看修改。<br>\n提交修改。<br>\n在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。<br>\n<img src=\"/2019/09/30/GitLab学习1-使用git托管代码/1.png\" alt=\"1\"></p>\n<h2>Git的畸变操作</h2>\n<h3>获取与创建项目命令</h3>\n<ul>\n<li>\n<p><code>git init</code><br>\n用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。</p>\n</li>\n<li>\n<p><code>git clone [url]</code><br>\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p>\n</li>\n</ul>\n<h3>基本快照</h3>\n<ul>\n<li><code>git add &lt;filename&gt;</code><br>\n使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加当前目录所有文件到缓存</span></span><br><span class=\"line\">git <span class=\"keyword\">add</span> .</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>git status</code><br>\ngit status 以查看在你上次提交之后是否有修改。</li>\n</ul>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">status</span></span><br><span class=\"line\">git <span class=\"keyword\">status</span> -s</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>git diff</code><br>\n执行 git diff 来查看执行 git status 的结果的详细信息。<br>\ngit diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p>\n</li>\n<li>\n<p>尚未缓存的改动：git diff</p>\n</li>\n<li>\n<p>查看已缓存的改动： git diff --cached</p>\n</li>\n<li>\n<p>查看已缓存的与未缓存的所有改动：git diff HEAD</p>\n</li>\n<li>\n<p>显示摘要而非整个 diff：git diff --stat</p>\n</li>\n<li>\n<p><code>git commit</code><br>\n使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。<br>\nGit 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>\n</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">'yourname'</span></span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email youremail</span><br></pre></td></tr></table></figure>\n<p>将文件写入缓存区并提供提交注释</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git</span> commit -m <span class=\"string\">'update message'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>git reset HEAD</code><br>\ngit reset HEAD 命令用于取消已缓存的内容。</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span> <span class=\"comment\">-- &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>拉取与推送</h3>\n<ul>\n<li><code>git pull</code><br>\ngit pull 命令用于从另一个存储库或本地分支获取并集成 (整合)。git pull 命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并，它的完整格式稍稍有点复杂。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull <span class=\"tag\">&lt;<span class=\"name\">远程主机名</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">远程分支名</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">本地分支名</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将远程存储库中的更改合并到当前分支中。在默认模式下，git pull 是 git fetch 后跟 git merge FETCH_HEAD 的缩写。更准确地说，git pull 使用给定的参数运行 git fetch，并调用 git merge 将检索到的分支头合并到当前分支中.</p>\n<ul>\n<li><code>git push</code><br>\ngit push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相似。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push <span class=\"tag\">&lt;<span class=\"name\">远程主机名</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">本地分支名</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">远程分支名</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>标签</h3>\n<ul>\n<li><code>git tag</code><br>\n如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</li>\n</ul>\n<p>比如说，我们想为我们的 商城 项目发布一个 “1.0.0” 版本。 我们可以用 git tag -a v1.0.0 命令给最新一次提交打上（HEAD） “v1.0.0” 的标签。</p>\n<p>-a 选项意为 “创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> v1.<span class=\"number\">0.0</span></span><br></pre></td></tr></table></figure>\n<p>如果我们要查看所有标签可以使用以下命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">tag</span></span><br></pre></td></tr></table></figure>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/896043488029600</a><br>\n<a href=\"https://www.funtl.com/zh/gitlab/Git-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html#%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/gitlab/Git-的基本操作.html#获取与创建项目命令</a></p>\n</blockquote>\n"},{"title":"Nexus学习2-Maven仓库介绍","catalog":true,"date":"2019-10-23T03:10:36.000Z","subtitle":null,"header-img":null,"_content":"# Nexus学习2-Maven仓库介绍\n\n## 代理仓库（Proxy Repository）\n-意为第三方仓库，如：\n    -maven-central\n    -nuget.org-proxy\n-版本策略（Version Policy）：\n    -Release: 正式版本\n    -Snapshot: 快照版本\n    -Mixed: 混合模式\n-布局策略（Layout Policy）：\n    -Strict：严格\n    -Permissive：宽松\n## 宿主仓库（Hosted Repository）\n存储本地上传的组件和资源的，如：\n\n- maven-releases\n- maven-snapshots\n- nuget-hosted\n部署策略（Deployment Policy）：\n\n- Allow Redeploy：允许重新部署\n- Disable Redeploy：禁止重新部署\n- Read-Only：只读\n\n## 仓库组（Repository Group）\n通常包含了多个代理仓库和宿主仓库，在项目中只要引入仓库组就可以下载到代理仓库和宿主仓库中的包，如：\n\n- maven-public\n- nuget-group\n\n![1](Nexus学习2-Maven仓库介绍/1.png)\n\n## 参考资料\n> https://www.funtl.com/zh/nexus/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-Maven-%E7%A7%81%E6%9C%8D.html#%E9%85%8D%E7%BD%AE%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF\n> https://www.bilibili.com/video/av29384041/?p=53&t=106\n","source":"_posts/Nexus学习2-Maven仓库介绍.md","raw":"---\ntitle: Nexus学习2-Maven仓库介绍\ncatalog: true\ntags: []\ndate: 2019-10-23 11:10:36\nsubtitle:\nheader-img:\n---\n# Nexus学习2-Maven仓库介绍\n\n## 代理仓库（Proxy Repository）\n-意为第三方仓库，如：\n    -maven-central\n    -nuget.org-proxy\n-版本策略（Version Policy）：\n    -Release: 正式版本\n    -Snapshot: 快照版本\n    -Mixed: 混合模式\n-布局策略（Layout Policy）：\n    -Strict：严格\n    -Permissive：宽松\n## 宿主仓库（Hosted Repository）\n存储本地上传的组件和资源的，如：\n\n- maven-releases\n- maven-snapshots\n- nuget-hosted\n部署策略（Deployment Policy）：\n\n- Allow Redeploy：允许重新部署\n- Disable Redeploy：禁止重新部署\n- Read-Only：只读\n\n## 仓库组（Repository Group）\n通常包含了多个代理仓库和宿主仓库，在项目中只要引入仓库组就可以下载到代理仓库和宿主仓库中的包，如：\n\n- maven-public\n- nuget-group\n\n![1](Nexus学习2-Maven仓库介绍/1.png)\n\n## 参考资料\n> https://www.funtl.com/zh/nexus/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-Maven-%E7%A7%81%E6%9C%8D.html#%E9%85%8D%E7%BD%AE%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF\n> https://www.bilibili.com/video/av29384041/?p=53&t=106\n","slug":"Nexus学习2-Maven仓库介绍","published":1,"updated":"2021-04-20T13:28:10.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2f001pzgl1805fei8t","content":"<h1><span id=\"nexus学习2-maven仓库介绍\">Nexus学习2-Maven仓库介绍</span></h1>\n<h2><span id=\"代理仓库proxy-repository\">代理仓库（Proxy Repository）</span></h2>\n<p>-意为第三方仓库，如：<br>\n-maven-central<br>\n-nuget.org-proxy<br>\n-版本策略（Version Policy）：<br>\n-Release: 正式版本<br>\n-Snapshot: 快照版本<br>\n-Mixed: 混合模式<br>\n-布局策略（Layout Policy）：<br>\n-Strict：严格<br>\n-Permissive：宽松</p>\n<h2><span id=\"宿主仓库hosted-repository\">宿主仓库（Hosted Repository）</span></h2>\n<p>存储本地上传的组件和资源的，如：</p>\n<ul>\n<li>\n<p>maven-releases</p>\n</li>\n<li>\n<p>maven-snapshots</p>\n</li>\n<li>\n<p>nuget-hosted<br>\n部署策略（Deployment Policy）：</p>\n</li>\n<li>\n<p>Allow Redeploy：允许重新部署</p>\n</li>\n<li>\n<p>Disable Redeploy：禁止重新部署</p>\n</li>\n<li>\n<p>Read-Only：只读</p>\n</li>\n</ul>\n<h2><span id=\"仓库组repository-group\">仓库组（Repository Group）</span></h2>\n<p>通常包含了多个代理仓库和宿主仓库，在项目中只要引入仓库组就可以下载到代理仓库和宿主仓库中的包，如：</p>\n<ul>\n<li>maven-public</li>\n<li>nuget-group</li>\n</ul>\n<p><img src=\"/2019/10/23/Nexus学习2-Maven仓库介绍/1.png\" alt=\"1\"></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/nexus/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-Maven-%E7%A7%81%E6%9C%8D.html#%E9%85%8D%E7%BD%AE%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/nexus/在项目中使用-Maven-私服.html#配置认证信息</a><br>\n<a href=\"https://www.bilibili.com/video/av29384041/?p=53&amp;t=106\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=53&amp;t=106</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Nexus学习2-Maven仓库介绍</h1>\n<h2>代理仓库（Proxy Repository）</h2>\n<p>-意为第三方仓库，如：<br>\n-maven-central<br>\n-nuget.org-proxy<br>\n-版本策略（Version Policy）：<br>\n-Release: 正式版本<br>\n-Snapshot: 快照版本<br>\n-Mixed: 混合模式<br>\n-布局策略（Layout Policy）：<br>\n-Strict：严格<br>\n-Permissive：宽松</p>\n<h2>宿主仓库（Hosted Repository）</h2>\n<p>存储本地上传的组件和资源的，如：</p>\n<ul>\n<li>\n<p>maven-releases</p>\n</li>\n<li>\n<p>maven-snapshots</p>\n</li>\n<li>\n<p>nuget-hosted<br>\n部署策略（Deployment Policy）：</p>\n</li>\n<li>\n<p>Allow Redeploy：允许重新部署</p>\n</li>\n<li>\n<p>Disable Redeploy：禁止重新部署</p>\n</li>\n<li>\n<p>Read-Only：只读</p>\n</li>\n</ul>\n<h2>仓库组（Repository Group）</h2>\n<p>通常包含了多个代理仓库和宿主仓库，在项目中只要引入仓库组就可以下载到代理仓库和宿主仓库中的包，如：</p>\n<ul>\n<li>maven-public</li>\n<li>nuget-group</li>\n</ul>\n<p><img src=\"/2019/10/23/Nexus学习2-Maven仓库介绍/1.png\" alt=\"1\"></p>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://www.funtl.com/zh/nexus/%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-Maven-%E7%A7%81%E6%9C%8D.html#%E9%85%8D%E7%BD%AE%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/nexus/在项目中使用-Maven-私服.html#配置认证信息</a><br>\n<a href=\"https://www.bilibili.com/video/av29384041/?p=53&amp;t=106\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=53&amp;t=106</a></p>\n</blockquote>\n"},{"title":"Nexus学习00-Nexus简介与安装","catalog":true,"date":"2019-10-22T07:19:32.000Z","subtitle":null,"header-img":null,"_content":"# Nexus学习00-Nexus简介与安装\nNexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。\n2016 年 4 月 6 日 Nexus 3.0 版本发布，相较 2.x 版本有了很大的改变：\n\n- 对低层代码进行了大规模重构，提升性能，增加可扩展性以及改善用户体验。\n- 升级界面，极大的简化了用户界面的操作和管理。\n- 提供新的安装包，让部署更加简单。\n- 增加对 Docker, NeGet, npm, Bower 的支持。\n- 提供新的管理接口，以及增强对自动任务的管理。\n\n## docker 安装nexus3\n使用`docker pull sonatype/nexus3`命令拉去nexus3\n\n~~~ \n[root@MyCentOS]/usr/local/docker/gitlab# docker pull sonatype/nexus3\nUsing default tag: latest\nlatest: Pulling from sonatype/nexus3\nc65691897a4d: Downloading [===============>                                   ]     22MB/71.03MB\n641d7cc5cbc4: Download complete \nc508b13320cd: Download complete \n79e3bf9d3132: Downloading [=======>                                           ]  31.63MB/212.2MB\n~~~\n查看latest版本号\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nsonatype/nexus3          latest              8eb898be2a53        12 days ago         611MB\nmyproject                latest              98cdee09487c        4 weeks ago         506MB\nmydocker                 latest              4691fd38efff        4 weeks ago         506MB\nmysql                    latest              b8fd9553f1f0        5 weeks ago         445MB\n1.16.1                   latest              97423576f288        7 weeks ago         126MB\ntomcat                   latest              96c4e536d0eb        2 months ago        506MB\ncentos                   latest              67fa590cfc1c        2 months ago        202MB\nnginx                    1.16.1              41e97992fcd8        2 months ago        126MB\nubuntu                   16.04               5e13f8dd4c1a        3 months ago        120MB\nmysql                    5.7.22              6bb891430fb6        15 months ago       372MB\ntwang2218/gitlab-ce-zh   10.5                90543a7ab79b        15 months ago       1.58GB\n~~~\n## docker-compose.yml\n~~~\nversion: '3.1'\nservices:\n  nexus:\n    restart: always\n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8082:8081\n    volumes:\n      - /usr/local/docker/nexus/data:/nexus-data\n~                                                \n~~~\n\n### 挂在数据权限修改\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# mkdir data\n[root@MyCentOS]/usr/local/docker/nexus# ls\ndata  docker-compose.yml\n[root@MyCentOS]/usr/local/docker/nexus# chmod 777 data \n~~~\n\n## 启动Nexus\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# docker-compose up -d\nCreating network \"nexus_default\" with the default driver\nCreating nexus ... done\n[root@MyCentOS]/usr/local/docker/nexus# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n5e897f337f34        sonatype/nexus3     \"sh -c ${SONATYPE_DI…\"   30 seconds ago      Up 2 seconds        0.0.0.0:8082->8081/tcp   nexus\n~~~\n\n## 登陆Nexus\n查看admin密码\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# docker exec -it 09b bash\nbash-4.4$ cd /nexus-data/\nbash-4.4$ ls\nadmin.password\tdb\t       generated-bundles  karaf.pid  log     restore-from-backup\nblobs\t\telasticsearch  instances\t  keystores  orient  tmp\ncache\t\tetc\t       javaprefs\t  lock\t     port\nbash-4.4$ cat admin.password \n75c4c214-cdd2-48d0-845c-03c28da34abfbash-4.4$ #  \n~~~\n\n## 查看结果\n![](1.png)\n\n### 查看设置\n![](2.png)\n\n### 用户界面\n![](3.png)\n### admin用户界面\n![](4.png)\n\n## 参考资料\n> \n","source":"_posts/Nexus学习1-Nexus简介与安装.md","raw":"---\ntitle: Nexus学习00-Nexus简介与安装\ncatalog: true\ntags: []\ndate: 2019-10-22 15:19:32\nsubtitle:\nheader-img:\n---\n# Nexus学习00-Nexus简介与安装\nNexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。\n2016 年 4 月 6 日 Nexus 3.0 版本发布，相较 2.x 版本有了很大的改变：\n\n- 对低层代码进行了大规模重构，提升性能，增加可扩展性以及改善用户体验。\n- 升级界面，极大的简化了用户界面的操作和管理。\n- 提供新的安装包，让部署更加简单。\n- 增加对 Docker, NeGet, npm, Bower 的支持。\n- 提供新的管理接口，以及增强对自动任务的管理。\n\n## docker 安装nexus3\n使用`docker pull sonatype/nexus3`命令拉去nexus3\n\n~~~ \n[root@MyCentOS]/usr/local/docker/gitlab# docker pull sonatype/nexus3\nUsing default tag: latest\nlatest: Pulling from sonatype/nexus3\nc65691897a4d: Downloading [===============>                                   ]     22MB/71.03MB\n641d7cc5cbc4: Download complete \nc508b13320cd: Download complete \n79e3bf9d3132: Downloading [=======>                                           ]  31.63MB/212.2MB\n~~~\n查看latest版本号\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# docker images\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\nsonatype/nexus3          latest              8eb898be2a53        12 days ago         611MB\nmyproject                latest              98cdee09487c        4 weeks ago         506MB\nmydocker                 latest              4691fd38efff        4 weeks ago         506MB\nmysql                    latest              b8fd9553f1f0        5 weeks ago         445MB\n1.16.1                   latest              97423576f288        7 weeks ago         126MB\ntomcat                   latest              96c4e536d0eb        2 months ago        506MB\ncentos                   latest              67fa590cfc1c        2 months ago        202MB\nnginx                    1.16.1              41e97992fcd8        2 months ago        126MB\nubuntu                   16.04               5e13f8dd4c1a        3 months ago        120MB\nmysql                    5.7.22              6bb891430fb6        15 months ago       372MB\ntwang2218/gitlab-ce-zh   10.5                90543a7ab79b        15 months ago       1.58GB\n~~~\n## docker-compose.yml\n~~~\nversion: '3.1'\nservices:\n  nexus:\n    restart: always\n    image: sonatype/nexus3\n    container_name: nexus\n    ports:\n      - 8082:8081\n    volumes:\n      - /usr/local/docker/nexus/data:/nexus-data\n~                                                \n~~~\n\n### 挂在数据权限修改\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# mkdir data\n[root@MyCentOS]/usr/local/docker/nexus# ls\ndata  docker-compose.yml\n[root@MyCentOS]/usr/local/docker/nexus# chmod 777 data \n~~~\n\n## 启动Nexus\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# docker-compose up -d\nCreating network \"nexus_default\" with the default driver\nCreating nexus ... done\n[root@MyCentOS]/usr/local/docker/nexus# docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\n5e897f337f34        sonatype/nexus3     \"sh -c ${SONATYPE_DI…\"   30 seconds ago      Up 2 seconds        0.0.0.0:8082->8081/tcp   nexus\n~~~\n\n## 登陆Nexus\n查看admin密码\n~~~\n[root@MyCentOS]/usr/local/docker/nexus# docker exec -it 09b bash\nbash-4.4$ cd /nexus-data/\nbash-4.4$ ls\nadmin.password\tdb\t       generated-bundles  karaf.pid  log     restore-from-backup\nblobs\t\telasticsearch  instances\t  keystores  orient  tmp\ncache\t\tetc\t       javaprefs\t  lock\t     port\nbash-4.4$ cat admin.password \n75c4c214-cdd2-48d0-845c-03c28da34abfbash-4.4$ #  \n~~~\n\n## 查看结果\n![](1.png)\n\n### 查看设置\n![](2.png)\n\n### 用户界面\n![](3.png)\n### admin用户界面\n![](4.png)\n\n## 参考资料\n> \n","slug":"Nexus学习1-Nexus简介与安装","published":1,"updated":"2021-04-20T13:28:10.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2g001rzgl168svr9fn","content":"<h1><span id=\"nexus学习00-nexus简介与安装\">Nexus学习00-Nexus简介与安装</span></h1>\n<p>Nexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。<br>\n2016 年 4 月 6 日 Nexus 3.0 版本发布，相较 2.x 版本有了很大的改变：</p>\n<ul>\n<li>对低层代码进行了大规模重构，提升性能，增加可扩展性以及改善用户体验。</li>\n<li>升级界面，极大的简化了用户界面的操作和管理。</li>\n<li>提供新的安装包，让部署更加简单。</li>\n<li>增加对 Docker, NeGet, npm, Bower 的支持。</li>\n<li>提供新的管理接口，以及增强对自动任务的管理。</li>\n</ul>\n<h2><span id=\"docker-安装nexus3\">docker 安装nexus3</span></h2>\n<p>使用<code>docker pull sonatype/nexus3</code>命令拉去nexus3</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/gitlab# docker pull sonatype/nexus3</span><br><span class=\"line\">Using<span class=\"built_in\"> default </span>tag: latest</span><br><span class=\"line\">latest: Pulling <span class=\"keyword\">from</span> sonatype/nexus3</span><br><span class=\"line\">c65691897a4d: Downloading [===============&gt;                                   ]     22MB/71.03MB</span><br><span class=\"line\">641d7cc5cbc4: Download complete </span><br><span class=\"line\">c508b13320cd: Download complete </span><br><span class=\"line\">79e3bf9d3132: Downloading [=======&gt;                                           ]  31.63MB/212.2MB</span><br></pre></td></tr></table></figure>\n<p>查看latest版本号</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker images</span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">sonatype/nexus3          latest              <span class=\"number\">8</span>eb898be2a53        <span class=\"number\">12</span> days ago         <span class=\"number\">611</span>MB</span><br><span class=\"line\">myproject                latest              <span class=\"number\">98</span>cdee09487c        <span class=\"number\">4</span> weeks ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\">mydocker                 latest              <span class=\"number\">4691</span>fd38efff        <span class=\"number\">4</span> weeks ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\">mysql                    latest              b8fd9553f1f0        <span class=\"number\">5</span> weeks ago         <span class=\"number\">445</span>MB</span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>                   latest              <span class=\"number\">97423576</span>f288        <span class=\"number\">7</span> weeks ago         <span class=\"number\">126</span>MB</span><br><span class=\"line\">tomcat                   latest              <span class=\"number\">96</span>c4e536d0eb        <span class=\"number\">2</span> months ago        <span class=\"number\">506</span>MB</span><br><span class=\"line\">centos                   latest              <span class=\"number\">67</span>fa590cfc1c        <span class=\"number\">2</span> months ago        <span class=\"number\">202</span>MB</span><br><span class=\"line\">nginx                    <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"number\">41e97992</span>fcd8        <span class=\"number\">2</span> months ago        <span class=\"number\">126</span>MB</span><br><span class=\"line\">ubuntu                   <span class=\"number\">16.04</span>               <span class=\"number\">5e13</span>f8dd4c1a        <span class=\"number\">3</span> months ago        <span class=\"number\">120</span>MB</span><br><span class=\"line\">mysql                    <span class=\"number\">5.7</span><span class=\"number\">.22</span>              <span class=\"number\">6</span>bb891430fb6        <span class=\"number\">15</span> months ago       <span class=\"number\">372</span>MB</span><br><span class=\"line\">twang2218/gitlab-ce-zh   <span class=\"number\">10.5</span>                <span class=\"number\">90543</span>a7ab79b        <span class=\"number\">15</span> months ago       <span class=\"number\">1.58</span>GB</span><br></pre></td></tr></table></figure>\n<h2><span id=\"docker-composeyml\">docker-compose.yml</span></h2>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">version</span>: <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"attribute\">services</span>:</span><br><span class=\"line\">  <span class=\"attribute\">nexus</span>:</span><br><span class=\"line\">    <span class=\"attribute\">restart</span>: always</span><br><span class=\"line\">    <span class=\"attribute\">image</span>: sonatype/nexus3</span><br><span class=\"line\">    <span class=\"attribute\">container_name</span>: nexus</span><br><span class=\"line\">    <span class=\"attribute\">ports</span>:</span><br><span class=\"line\">      - <span class=\"number\">8082</span>:<span class=\"number\">8081</span></span><br><span class=\"line\">    <span class=\"attribute\">volumes</span>:</span><br><span class=\"line\">      - /usr/local/docker/nexus/<span class=\"attribute\">data</span>:/nexus-data</span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h3><span id=\"挂在数据权限修改\">挂在数据权限修改</span></h3>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/nexus<span class=\"meta\"># mkdir data</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/nexus<span class=\"meta\"># ls</span></span><br><span class=\"line\">data  docker-compose.yml</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/nexus<span class=\"meta\"># chmod 777 data</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"启动nexus\">启动Nexus</span></h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker-compose up -d</span><br><span class=\"line\">Creating<span class=\"built_in\"> network </span><span class=\"string\">\"nexus_default\"</span> with the<span class=\"built_in\"> default </span>driver</span><br><span class=\"line\">Creating nexus <span class=\"built_in\">..</span>. done</span><br><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class=\"line\">5e897f337f34        sonatype/nexus3     <span class=\"string\">\"sh -c $&#123;SONATYPE_DI…\"</span>   30 seconds ago      Up 2 seconds        0.0.0.0:8082-&gt;8081/tcp   nexus</span><br></pre></td></tr></table></figure>\n<h2><span id=\"登陆nexus\">登陆Nexus</span></h2>\n<p>查看admin密码</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker exec -it 09b bash</span><br><span class=\"line\">bash-4.4$ cd /nexus-data/</span><br><span class=\"line\">bash-4.4$ ls</span><br><span class=\"line\">admin.password\tdb\t       generated-bundles  karaf.pid  log     restore-from-backup</span><br><span class=\"line\">blobs\t\telasticsearch  instances\t  keystores  orient  tmp</span><br><span class=\"line\">cache\t\tetc\t       javaprefs\t  lock\t     port</span><br><span class=\"line\">bash-4.4$ cat admin.password </span><br><span class=\"line\">75c4c214-cdd2-48d0-845c-03c28da34abfbash-4.4$ #</span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/1.png\" alt></p>\n<h3><span id=\"查看设置\">查看设置</span></h3>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/2.png\" alt></p>\n<h3><span id=\"用户界面\">用户界面</span></h3>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/3.png\" alt></p>\n<h3><span id=\"admin用户界面\">admin用户界面</span></h3>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/4.png\" alt></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Nexus学习00-Nexus简介与安装</h1>\n<p>Nexus 是一个强大的仓库管理器，极大地简化了内部仓库的维护和外部仓库的访问。<br>\n2016 年 4 月 6 日 Nexus 3.0 版本发布，相较 2.x 版本有了很大的改变：</p>\n<ul>\n<li>对低层代码进行了大规模重构，提升性能，增加可扩展性以及改善用户体验。</li>\n<li>升级界面，极大的简化了用户界面的操作和管理。</li>\n<li>提供新的安装包，让部署更加简单。</li>\n<li>增加对 Docker, NeGet, npm, Bower 的支持。</li>\n<li>提供新的管理接口，以及增强对自动任务的管理。</li>\n</ul>\n<h2>docker 安装nexus3</h2>\n<p>使用<code>docker pull sonatype/nexus3</code>命令拉去nexus3</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/gitlab# docker pull sonatype/nexus3</span><br><span class=\"line\">Using<span class=\"built_in\"> default </span>tag: latest</span><br><span class=\"line\">latest: Pulling <span class=\"keyword\">from</span> sonatype/nexus3</span><br><span class=\"line\">c65691897a4d: Downloading [===============&gt;                                   ]     22MB/71.03MB</span><br><span class=\"line\">641d7cc5cbc4: Download complete </span><br><span class=\"line\">c508b13320cd: Download complete </span><br><span class=\"line\">79e3bf9d3132: Downloading [=======&gt;                                           ]  31.63MB/212.2MB</span><br></pre></td></tr></table></figure>\n<p>查看latest版本号</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker images</span><br><span class=\"line\">REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">sonatype/nexus3          latest              <span class=\"number\">8</span>eb898be2a53        <span class=\"number\">12</span> days ago         <span class=\"number\">611</span>MB</span><br><span class=\"line\">myproject                latest              <span class=\"number\">98</span>cdee09487c        <span class=\"number\">4</span> weeks ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\">mydocker                 latest              <span class=\"number\">4691</span>fd38efff        <span class=\"number\">4</span> weeks ago         <span class=\"number\">506</span>MB</span><br><span class=\"line\">mysql                    latest              b8fd9553f1f0        <span class=\"number\">5</span> weeks ago         <span class=\"number\">445</span>MB</span><br><span class=\"line\"><span class=\"number\">1.16</span><span class=\"number\">.1</span>                   latest              <span class=\"number\">97423576</span>f288        <span class=\"number\">7</span> weeks ago         <span class=\"number\">126</span>MB</span><br><span class=\"line\">tomcat                   latest              <span class=\"number\">96</span>c4e536d0eb        <span class=\"number\">2</span> months ago        <span class=\"number\">506</span>MB</span><br><span class=\"line\">centos                   latest              <span class=\"number\">67</span>fa590cfc1c        <span class=\"number\">2</span> months ago        <span class=\"number\">202</span>MB</span><br><span class=\"line\">nginx                    <span class=\"number\">1.16</span><span class=\"number\">.1</span>              <span class=\"number\">41e97992</span>fcd8        <span class=\"number\">2</span> months ago        <span class=\"number\">126</span>MB</span><br><span class=\"line\">ubuntu                   <span class=\"number\">16.04</span>               <span class=\"number\">5e13</span>f8dd4c1a        <span class=\"number\">3</span> months ago        <span class=\"number\">120</span>MB</span><br><span class=\"line\">mysql                    <span class=\"number\">5.7</span><span class=\"number\">.22</span>              <span class=\"number\">6</span>bb891430fb6        <span class=\"number\">15</span> months ago       <span class=\"number\">372</span>MB</span><br><span class=\"line\">twang2218/gitlab-ce-zh   <span class=\"number\">10.5</span>                <span class=\"number\">90543</span>a7ab79b        <span class=\"number\">15</span> months ago       <span class=\"number\">1.58</span>GB</span><br></pre></td></tr></table></figure>\n<h2>docker-compose.yml</h2>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">version</span>: <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"attribute\">services</span>:</span><br><span class=\"line\">  <span class=\"attribute\">nexus</span>:</span><br><span class=\"line\">    <span class=\"attribute\">restart</span>: always</span><br><span class=\"line\">    <span class=\"attribute\">image</span>: sonatype/nexus3</span><br><span class=\"line\">    <span class=\"attribute\">container_name</span>: nexus</span><br><span class=\"line\">    <span class=\"attribute\">ports</span>:</span><br><span class=\"line\">      - <span class=\"number\">8082</span>:<span class=\"number\">8081</span></span><br><span class=\"line\">    <span class=\"attribute\">volumes</span>:</span><br><span class=\"line\">      - /usr/local/docker/nexus/<span class=\"attribute\">data</span>:/nexus-data</span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h3>挂在数据权限修改</h3>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/nexus<span class=\"meta\"># mkdir data</span></span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/nexus<span class=\"meta\"># ls</span></span><br><span class=\"line\">data  docker-compose.yml</span><br><span class=\"line\">[root<span class=\"symbol\">@MyCentOS]</span>/usr/<span class=\"keyword\">local</span>/docker/nexus<span class=\"meta\"># chmod 777 data</span></span><br></pre></td></tr></table></figure>\n<h2>启动Nexus</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker-compose up -d</span><br><span class=\"line\">Creating<span class=\"built_in\"> network </span><span class=\"string\">\"nexus_default\"</span> with the<span class=\"built_in\"> default </span>driver</span><br><span class=\"line\">Creating nexus <span class=\"built_in\">..</span>. done</span><br><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker ps</span><br><span class=\"line\">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class=\"line\">5e897f337f34        sonatype/nexus3     <span class=\"string\">\"sh -c $&#123;SONATYPE_DI…\"</span>   30 seconds ago      Up 2 seconds        0.0.0.0:8082-&gt;8081/tcp   nexus</span><br></pre></td></tr></table></figure>\n<h2>登陆Nexus</h2>\n<p>查看admin密码</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]/usr/local/docker/nexus# docker exec -it 09b bash</span><br><span class=\"line\">bash-4.4$ cd /nexus-data/</span><br><span class=\"line\">bash-4.4$ ls</span><br><span class=\"line\">admin.password\tdb\t       generated-bundles  karaf.pid  log     restore-from-backup</span><br><span class=\"line\">blobs\t\telasticsearch  instances\t  keystores  orient  tmp</span><br><span class=\"line\">cache\t\tetc\t       javaprefs\t  lock\t     port</span><br><span class=\"line\">bash-4.4$ cat admin.password </span><br><span class=\"line\">75c4c214-cdd2-48d0-845c-03c28da34abfbash-4.4$ #</span><br></pre></td></tr></table></figure>\n<h2>查看结果</h2>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/1.png\" alt></p>\n<h3>查看设置</h3>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/2.png\" alt></p>\n<h3>用户界面</h3>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/3.png\" alt></p>\n<h3>admin用户界面</h3>\n<p><img src=\"/2019/10/22/Nexus学习1-Nexus简介与安装/4.png\" alt></p>\n<h2>参考资料</h2>\n<blockquote></blockquote>\n"},{"title":"GitLab学习2-GitLab的使用","catalog":true,"date":"2019-09-30T03:06:48.000Z","subtitle":null,"header-img":null,"_content":"# GitLab简介\nGitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，\n可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，\n管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。\n团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。\n它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。\n**与Github类似.**\n\n## 为什么使用GitLab?\n- 协同开发\n- 异地开发\n- 开源的第三方平台用\n- 自己架设Git托管平台\n## 安装GitLab\n\nDocker官网汉化版GitLab\nhttps://hub.docker.com/r/twang2218/gitlab-ce-zh\n\n拉取GitLab: `docker pull twang2218/gitlab-ce-zh:10.5`\n~~~\n[root@MyCentOS]~# cd /usr/local/docker \n[root@MyCentOS]/usr/local/docker# ls\nmysql  tripweb  volumes\n[root@MyCentOS]/usr/local/docker# mkdir GitLab\n[root@MyCentOS]/usr/local/docker# ls\nGitLab  mysql  tripweb  volumes\n[root@MyCentOS]/usr/local/docker# cd GitLab \n[root@MyCentOS]/usr/local/docker/GitLab# ls\n[root@MyCentOS]/usr/local/docker/GitLab# vim docker-compose.yml\n[root@MyCentOS]/usr/local/docker/GitLab# docker pull twang2218/gitlab-ce-zh:10.5\n10.5: Pulling from twang2218/gitlab-ce-zh\nd3938036b19c: Pull complete \na9b30c108bda: Pull complete \n67de21feec18: Pull complete \n817da545be2b: Pull complete \nd967c497ce23: Pull complete \na69c22baab05: Pull complete \nbf709c1867c3: Waiting \n89c3c3b9c89c: Waiting \neb1d5a08657b: Waiting \n6445958fc33d: Waiting \nbd40a9292cbd: Waiting \n6e3fbbdad5bd: Waiting \n3647066e74ea: Waiting \n11d43d0755c1: Waiting \na41004476bab: Waiting \ne3e643254137: Waiting \nb81c640d2799: Waiting \nc19aff5b9429: Waiting \n6a28e1c33c11: Waiting \n~~~\n\n## docker-compose\n~~~\nmkdir gitlab\ncd gitlab\nvim docker-compose.yml\n\n[root@MyCentOS]/usr/local/docker/gitlab# pwd\n/usr/local/docker/gitlab\n~~~\ndocker-compose.xml\n~~~\nversion: '3'\nservices:\n    gitlab:\n      image: 'twang2218/gitlab-ce-zh:10.5'\n      restart: always\n      hostname: '116.62.110.99' # 主机名ECS的固定ip\n      environment: # 环境变量\n        TZ: 'Asia/Shanghai'\n        GITLAB_OMNIBUS_CONFIG: | # gitlib的初始化操作\n          external_url 'http://116.62.110.99' # web访问地址 可以加端口:\n          gitlab_rails['time_zone'] = 'Asia/Shanghai'\n          gitlab_rails['gitlab_shell_ssh_port'] = 2222 # ssh访问原本22已被占用,所以使用2222\n          unicorn['port'] = 8082 # 本身的端口\n          nginx['listen_port'] = 80 # 要与external的端口一致\n      ports: # 批量暴露\n        - '80:80'\n        - '8443:443' # 443是https的端口 改为8443\n        - '2222:22' # ssh的暴露端口\n      volumes:\n        - /usr/local/docker/gitlab/config:/etc/gitlab\n        - /usr/local/docker/gitlab/data:/var/opt/gitlab\n        - /usr/local/docker/gitlab/logs:/var/log/gitlab\n~~~\n\n## 启动\n`docker-compose up`或者守护态运行`docker-compose up -d`\n然后监听日志`docker logs -f 容器id或者name`\n\n输入这条命令以后会抛出大量的日志,等待即可.\n~~~\n......\ntransactions\"\nweb_1  |     - change mode from '' to '0644'\nweb_1  |     - change owner from '' to 'gitlab-psql'\nweb_1  |   * execute[/opt/gitlab/bin/gitlab-ctl start postgres-exporter] action run\nweb_1  |     [execute] ok: run: postgres-exporter: (pid 1149) 12s\nweb_1  |     - execute /opt/gitlab/bin/gitlab-ctl start postgres-exporter\nweb_1  | Recipe: gitlab::gitlab-rails\n~~~\n## 查看结果\n发现无法访问,因该是ecs的端口安全组策略未开放.\n\n![](1.png)\n\n![](2.png)\n\n再次启动后访问,如图所示\n![](3.png)\n\n## 解决错误\n\n### 交互方式进入容器\n`sudo docker exec -it f9 bash`\n\n~~~\nroot@116:/# cd /var/log/gitlab/nginx\nroot@116:/var/log/gitlab/nginx# ls\naccess.log  config  current  error.log  gitlab_access.log  gitlab_error.log  lock\nroot@116:/var/log/gitlab/nginx# vi error.log \nroot@116:/var/log/gitlab/nginx# ls\naccess.log  config  current  error.log  gitlab_access.log  gitlab_error.log  lock\nroot@116:/var/log/gitlab/nginx# vi gitlab_error.log \nroot@116:/var/log/gitlab/nginx# gitlab-ctl status\nrun: gitaly: (pid 436) 3751s; run: log: (pid 430) 3751s\nrun: gitlab-monitor: (pid 442) 3751s; run: log: (pid 427) 3751s\nrun: gitlab-workhorse: (pid 448) 3752s; run: log: (pid 443) 3752s\nrun: logrotate: (pid 5093) 151s; run: log: (pid 432) 3752s\nrun: nginx: (pid 438) 3752s; run: log: (pid 433) 3752s\nrun: node-exporter: (pid 441) 3752s; run: log: (pid 434) 3752s\nrun: postgres-exporter: (pid 440) 3752s; run: log: (pid 428) 3752s\nrun: postgresql: (pid 452) 3752s; run: log: (pid 447) 3752s\nrun: prometheus: (pid 435) 3752s; run: log: (pid 429) 3752s\nrun: redis: (pid 451) 3752s; run: log: (pid 446) 3752s\nrun: redis-exporter: (pid 449) 3752s; run: log: (pid 444) 3752s\nrun: sidekiq: (pid 5335) 5s; run: log: (pid 431) 3752s\nrun: sshd: (pid 24) 3762s; run: log: (pid 23) 3762s\nrun: unicorn: (pid 5283) 32s; run: log: (pid 445) 3752s\nroot@116:/var/log/gitlab/nginx# gitlab-ctl tail unicorn\n==> /var/log/gitlab/unicorn/unicorn_stdout.log <==\n\n==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\nI, [2019-10-08T05:43:15.297148 #4587]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:45:33.002415 #4689]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:46:43.812719 #4792]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:47:29.594381 #4856]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:49:13.121405 #4963]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:50:03.751939 #5033]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:51:27.681477 #5137]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:52:25.463628 #5221]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:53:26.002010 #5314]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:54:21.678943 #5399]  INFO -- : Refreshing Gem list\n\n==> /var/log/gitlab/unicorn/current <==\n2019-10-08_05:51:24.53737 starting new unicorn master\n2019-10-08_05:52:19.58587 master failed to start, check stderr log for details\n2019-10-08_05:52:21.69616 failed to start a new unicorn master\n2019-10-08_05:52:21.89708 starting new unicorn master\n2019-10-08_05:53:20.58943 master failed to start, check stderr log for details\n2019-10-08_05:53:22.95301 failed to start a new unicorn master\n2019-10-08_05:53:23.14569 starting new unicorn master\n2019-10-08_05:54:17.31323 master failed to start, check stderr log for details\n2019-10-08_05:54:19.23802 failed to start a new unicorn master\n2019-10-08_05:54:19.35571 starting new unicorn master\n2019-10-08_05:55:19.31273 master failed to start, check stderr log for details\n2019-10-08_05:55:21.71564 failed to start a new unicorn master\n2019-10-08_05:55:21.92552 starting new unicorn master\n\n==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\nI, [2019-10-08T05:55:24.691724 #5492]  INFO -- : Refreshing Gem list\n\n==> /var/log/gitlab/unicorn/current <==\n2019-10-08_05:56:06.09911 master failed to start, check stderr log for details\n2019-10-08_05:56:08.52929 failed to start a new unicorn master\n2019-10-08_05:56:08.74450 starting new unicorn master\n\n==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\nI, [2019-10-08T05:56:11.797988 #5571]  INFO -- : Refreshing Gem list\n\n==> /var/log/gitlab/unicorn/current <==\n2019-10-08_05:56:55.14527 master failed to start, check stderr log for details\n2019-10-08_05:56:57.66708 failed to start a new unicorn master\n2019-10-08_05:56:57.86318 starting new unicorn master\n^C/opt/gitlab/embedded/bin/omnibus-ctl: Interrupt\n~~~\n\n提示 `failed to start a new unicorn master`\n\n### 查看报错日志\n~~~\nroot@116:/var/log/gitlab/unicorn# vi unicorn_stderr.log\n\nI, [2019-10-08T04:48:12.284632 #556]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:49:03.098603 #696]  INFO -- : Refreshing Gem list\nI, [2019-10-08T04:50:01.069664 #912]  INFO -- : Refreshing Gem list\nI, [2019-10-08T04:51:26.513453 #521]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:52:36.836487 #693]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:53:40.245197 #777]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:54:42.016154 #867]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:55:41.475464 #948]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:56:41.565244 #1031]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n~~~\n提示: You are on a read-only GitLab instance.\n\n### 授权\n~~~\n# chmod -R 777 /var/log/gitlab\n# gitlab-ctl tail unicorn\n~~~\n\n### 重启容器\n~~~\n[root@MyCentOS]/usr/local/docker/gitlab# docker start f9   \nf9\n[root@MyCentOS]/usr/local/docker/gitlab# docker ps\nCONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS                            PORTS                                                             NAMES\nf9f24d76019a        twang2218/gitlab-ce-zh:10.5   \"/assets/wrapper\"        About an hour ago   Up 5 seconds (health: starting)   0.0.0.0:80->80/tcp, 0.0.0.0:2222->22/tcp, 0.0.0.0:8443->443/tcp   gitlab_gitlab_1\nd473292982f8        tomcat                        \"catalina.sh run\"        8 days ago          Up 4 hours                        0.0.0.0:8081->8080/tcp                                            web\n99000feb760b        mysql:5.7.22                  \"docker-entrypoint.s…\"   8 days ago          Up About an hour                  0.0.0.0:3307->3306/tcp                                            mysql\n[root@MyCentOS]/usr/local/docker/gitlab# \n~~~\n\n\n\n## 参考资料\n> https://hub.docker.com/r/twang2218/gitlab-ce-zh\n> https://www.bilibili.com/video/av29384041/?p=48\n> https://www.funtl.com/zh/gitlab/%E5%9F%BA%E4%BA%8E-Docker-%E5%AE%89%E8%A3%85-GitLab.html\n> http://www.mamicode.com/info-detail-2230071.html\n> http://www.bubuko.com/infodetail-2282456.html\n","source":"_posts/GitLab学习2-GitLab的使用.md","raw":"---\ntitle: GitLab学习2-GitLab的使用\ncatalog: true\ntags: [GitLab, git, Docker]\ndate: 2019-09-30 11:06:48\nsubtitle:\nheader-img:\n---\n# GitLab简介\nGitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，\n可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，\n管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。\n团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。\n它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。\n**与Github类似.**\n\n## 为什么使用GitLab?\n- 协同开发\n- 异地开发\n- 开源的第三方平台用\n- 自己架设Git托管平台\n## 安装GitLab\n\nDocker官网汉化版GitLab\nhttps://hub.docker.com/r/twang2218/gitlab-ce-zh\n\n拉取GitLab: `docker pull twang2218/gitlab-ce-zh:10.5`\n~~~\n[root@MyCentOS]~# cd /usr/local/docker \n[root@MyCentOS]/usr/local/docker# ls\nmysql  tripweb  volumes\n[root@MyCentOS]/usr/local/docker# mkdir GitLab\n[root@MyCentOS]/usr/local/docker# ls\nGitLab  mysql  tripweb  volumes\n[root@MyCentOS]/usr/local/docker# cd GitLab \n[root@MyCentOS]/usr/local/docker/GitLab# ls\n[root@MyCentOS]/usr/local/docker/GitLab# vim docker-compose.yml\n[root@MyCentOS]/usr/local/docker/GitLab# docker pull twang2218/gitlab-ce-zh:10.5\n10.5: Pulling from twang2218/gitlab-ce-zh\nd3938036b19c: Pull complete \na9b30c108bda: Pull complete \n67de21feec18: Pull complete \n817da545be2b: Pull complete \nd967c497ce23: Pull complete \na69c22baab05: Pull complete \nbf709c1867c3: Waiting \n89c3c3b9c89c: Waiting \neb1d5a08657b: Waiting \n6445958fc33d: Waiting \nbd40a9292cbd: Waiting \n6e3fbbdad5bd: Waiting \n3647066e74ea: Waiting \n11d43d0755c1: Waiting \na41004476bab: Waiting \ne3e643254137: Waiting \nb81c640d2799: Waiting \nc19aff5b9429: Waiting \n6a28e1c33c11: Waiting \n~~~\n\n## docker-compose\n~~~\nmkdir gitlab\ncd gitlab\nvim docker-compose.yml\n\n[root@MyCentOS]/usr/local/docker/gitlab# pwd\n/usr/local/docker/gitlab\n~~~\ndocker-compose.xml\n~~~\nversion: '3'\nservices:\n    gitlab:\n      image: 'twang2218/gitlab-ce-zh:10.5'\n      restart: always\n      hostname: '116.62.110.99' # 主机名ECS的固定ip\n      environment: # 环境变量\n        TZ: 'Asia/Shanghai'\n        GITLAB_OMNIBUS_CONFIG: | # gitlib的初始化操作\n          external_url 'http://116.62.110.99' # web访问地址 可以加端口:\n          gitlab_rails['time_zone'] = 'Asia/Shanghai'\n          gitlab_rails['gitlab_shell_ssh_port'] = 2222 # ssh访问原本22已被占用,所以使用2222\n          unicorn['port'] = 8082 # 本身的端口\n          nginx['listen_port'] = 80 # 要与external的端口一致\n      ports: # 批量暴露\n        - '80:80'\n        - '8443:443' # 443是https的端口 改为8443\n        - '2222:22' # ssh的暴露端口\n      volumes:\n        - /usr/local/docker/gitlab/config:/etc/gitlab\n        - /usr/local/docker/gitlab/data:/var/opt/gitlab\n        - /usr/local/docker/gitlab/logs:/var/log/gitlab\n~~~\n\n## 启动\n`docker-compose up`或者守护态运行`docker-compose up -d`\n然后监听日志`docker logs -f 容器id或者name`\n\n输入这条命令以后会抛出大量的日志,等待即可.\n~~~\n......\ntransactions\"\nweb_1  |     - change mode from '' to '0644'\nweb_1  |     - change owner from '' to 'gitlab-psql'\nweb_1  |   * execute[/opt/gitlab/bin/gitlab-ctl start postgres-exporter] action run\nweb_1  |     [execute] ok: run: postgres-exporter: (pid 1149) 12s\nweb_1  |     - execute /opt/gitlab/bin/gitlab-ctl start postgres-exporter\nweb_1  | Recipe: gitlab::gitlab-rails\n~~~\n## 查看结果\n发现无法访问,因该是ecs的端口安全组策略未开放.\n\n![](1.png)\n\n![](2.png)\n\n再次启动后访问,如图所示\n![](3.png)\n\n## 解决错误\n\n### 交互方式进入容器\n`sudo docker exec -it f9 bash`\n\n~~~\nroot@116:/# cd /var/log/gitlab/nginx\nroot@116:/var/log/gitlab/nginx# ls\naccess.log  config  current  error.log  gitlab_access.log  gitlab_error.log  lock\nroot@116:/var/log/gitlab/nginx# vi error.log \nroot@116:/var/log/gitlab/nginx# ls\naccess.log  config  current  error.log  gitlab_access.log  gitlab_error.log  lock\nroot@116:/var/log/gitlab/nginx# vi gitlab_error.log \nroot@116:/var/log/gitlab/nginx# gitlab-ctl status\nrun: gitaly: (pid 436) 3751s; run: log: (pid 430) 3751s\nrun: gitlab-monitor: (pid 442) 3751s; run: log: (pid 427) 3751s\nrun: gitlab-workhorse: (pid 448) 3752s; run: log: (pid 443) 3752s\nrun: logrotate: (pid 5093) 151s; run: log: (pid 432) 3752s\nrun: nginx: (pid 438) 3752s; run: log: (pid 433) 3752s\nrun: node-exporter: (pid 441) 3752s; run: log: (pid 434) 3752s\nrun: postgres-exporter: (pid 440) 3752s; run: log: (pid 428) 3752s\nrun: postgresql: (pid 452) 3752s; run: log: (pid 447) 3752s\nrun: prometheus: (pid 435) 3752s; run: log: (pid 429) 3752s\nrun: redis: (pid 451) 3752s; run: log: (pid 446) 3752s\nrun: redis-exporter: (pid 449) 3752s; run: log: (pid 444) 3752s\nrun: sidekiq: (pid 5335) 5s; run: log: (pid 431) 3752s\nrun: sshd: (pid 24) 3762s; run: log: (pid 23) 3762s\nrun: unicorn: (pid 5283) 32s; run: log: (pid 445) 3752s\nroot@116:/var/log/gitlab/nginx# gitlab-ctl tail unicorn\n==> /var/log/gitlab/unicorn/unicorn_stdout.log <==\n\n==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\nI, [2019-10-08T05:43:15.297148 #4587]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:45:33.002415 #4689]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:46:43.812719 #4792]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:47:29.594381 #4856]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:49:13.121405 #4963]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:50:03.751939 #5033]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:51:27.681477 #5137]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:52:25.463628 #5221]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:53:26.002010 #5314]  INFO -- : Refreshing Gem list\nI, [2019-10-08T05:54:21.678943 #5399]  INFO -- : Refreshing Gem list\n\n==> /var/log/gitlab/unicorn/current <==\n2019-10-08_05:51:24.53737 starting new unicorn master\n2019-10-08_05:52:19.58587 master failed to start, check stderr log for details\n2019-10-08_05:52:21.69616 failed to start a new unicorn master\n2019-10-08_05:52:21.89708 starting new unicorn master\n2019-10-08_05:53:20.58943 master failed to start, check stderr log for details\n2019-10-08_05:53:22.95301 failed to start a new unicorn master\n2019-10-08_05:53:23.14569 starting new unicorn master\n2019-10-08_05:54:17.31323 master failed to start, check stderr log for details\n2019-10-08_05:54:19.23802 failed to start a new unicorn master\n2019-10-08_05:54:19.35571 starting new unicorn master\n2019-10-08_05:55:19.31273 master failed to start, check stderr log for details\n2019-10-08_05:55:21.71564 failed to start a new unicorn master\n2019-10-08_05:55:21.92552 starting new unicorn master\n\n==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\nI, [2019-10-08T05:55:24.691724 #5492]  INFO -- : Refreshing Gem list\n\n==> /var/log/gitlab/unicorn/current <==\n2019-10-08_05:56:06.09911 master failed to start, check stderr log for details\n2019-10-08_05:56:08.52929 failed to start a new unicorn master\n2019-10-08_05:56:08.74450 starting new unicorn master\n\n==> /var/log/gitlab/unicorn/unicorn_stderr.log <==\nI, [2019-10-08T05:56:11.797988 #5571]  INFO -- : Refreshing Gem list\n\n==> /var/log/gitlab/unicorn/current <==\n2019-10-08_05:56:55.14527 master failed to start, check stderr log for details\n2019-10-08_05:56:57.66708 failed to start a new unicorn master\n2019-10-08_05:56:57.86318 starting new unicorn master\n^C/opt/gitlab/embedded/bin/omnibus-ctl: Interrupt\n~~~\n\n提示 `failed to start a new unicorn master`\n\n### 查看报错日志\n~~~\nroot@116:/var/log/gitlab/unicorn# vi unicorn_stderr.log\n\nI, [2019-10-08T04:48:12.284632 #556]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:49:03.098603 #696]  INFO -- : Refreshing Gem list\nI, [2019-10-08T04:50:01.069664 #912]  INFO -- : Refreshing Gem list\nI, [2019-10-08T04:51:26.513453 #521]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:52:36.836487 #693]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:53:40.245197 #777]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:54:42.016154 #867]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:55:41.475464 #948]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n  : msgid 'You are on a read-only GitLab instance.'\nI, [2019-10-08T04:56:41.565244 #1031]  INFO -- : Refreshing Gem list\nWarning: fuzzy message was ignored.\n~~~\n提示: You are on a read-only GitLab instance.\n\n### 授权\n~~~\n# chmod -R 777 /var/log/gitlab\n# gitlab-ctl tail unicorn\n~~~\n\n### 重启容器\n~~~\n[root@MyCentOS]/usr/local/docker/gitlab# docker start f9   \nf9\n[root@MyCentOS]/usr/local/docker/gitlab# docker ps\nCONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS                            PORTS                                                             NAMES\nf9f24d76019a        twang2218/gitlab-ce-zh:10.5   \"/assets/wrapper\"        About an hour ago   Up 5 seconds (health: starting)   0.0.0.0:80->80/tcp, 0.0.0.0:2222->22/tcp, 0.0.0.0:8443->443/tcp   gitlab_gitlab_1\nd473292982f8        tomcat                        \"catalina.sh run\"        8 days ago          Up 4 hours                        0.0.0.0:8081->8080/tcp                                            web\n99000feb760b        mysql:5.7.22                  \"docker-entrypoint.s…\"   8 days ago          Up About an hour                  0.0.0.0:3307->3306/tcp                                            mysql\n[root@MyCentOS]/usr/local/docker/gitlab# \n~~~\n\n\n\n## 参考资料\n> https://hub.docker.com/r/twang2218/gitlab-ce-zh\n> https://www.bilibili.com/video/av29384041/?p=48\n> https://www.funtl.com/zh/gitlab/%E5%9F%BA%E4%BA%8E-Docker-%E5%AE%89%E8%A3%85-GitLab.html\n> http://www.mamicode.com/info-detail-2230071.html\n> http://www.bubuko.com/infodetail-2282456.html\n","slug":"GitLab学习2-GitLab的使用","published":1,"updated":"2021-04-20T13:28:10.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2h001tzgl1ek1n2ydk","content":"<h1><span id=\"gitlab简介\">GitLab简介</span></h1>\n<p>GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，<br>\n可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，<br>\n管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。<br>\n团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。<br>\n它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。<br>\n<strong>与Github类似.</strong></p>\n<h2><span id=\"为什么使用gitlab\">为什么使用GitLab?</span></h2>\n<ul>\n<li>协同开发</li>\n<li>异地开发</li>\n<li>开源的第三方平台用</li>\n<li>自己架设Git托管平台</li>\n</ul>\n<h2><span id=\"安装gitlab\">安装GitLab</span></h2>\n<p>Docker官网汉化版GitLab<br>\n<a href=\"https://hub.docker.com/r/twang2218/gitlab-ce-zh\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/twang2218/gitlab-ce-zh</a></p>\n<p>拉取GitLab: <code>docker pull twang2218/gitlab-ce-zh:10.5</code></p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]~<span class=\"meta\"># cd /usr/local/docker </span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># ls</span></span><br><span class=\"line\">mysql  tripweb  volumes</span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># mkdir GitLab</span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># ls</span></span><br><span class=\"line\">GitLab  mysql  tripweb  volumes</span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># cd GitLab </span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>GitLab<span class=\"meta\"># ls</span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>GitLab<span class=\"meta\"># vim docker-compose.yml</span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>GitLab<span class=\"meta\"># docker pull twang2218/gitlab-ce-zh:10.5</span></span><br><span class=\"line\"><span class=\"number\">10.5</span>: Pulling from twang2218/gitlab-ce-zh</span><br><span class=\"line\"><span class=\"symbol\">d3938036b19c:</span> Pull complete </span><br><span class=\"line\"><span class=\"symbol\">a9b30c108bda:</span> Pull complete </span><br><span class=\"line\"><span class=\"number\">67</span>de21feec18: Pull complete </span><br><span class=\"line\"><span class=\"number\">817</span>da545be2b: Pull complete </span><br><span class=\"line\"><span class=\"symbol\">d967c497ce23:</span> Pull complete </span><br><span class=\"line\"><span class=\"symbol\">a69c22baab05:</span> Pull complete </span><br><span class=\"line\"><span class=\"symbol\">bf709c1867c3:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">89</span>c3c3b9c89c: Waiting </span><br><span class=\"line\"><span class=\"symbol\">eb1d5a08657b:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">6445958f</span>c33d: Waiting </span><br><span class=\"line\"><span class=\"symbol\">bd40a9292cbd:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">6e3</span>fbbdad5bd: Waiting </span><br><span class=\"line\"><span class=\"number\">3647066e74</span>ea: Waiting </span><br><span class=\"line\"><span class=\"number\">11</span>d43d0755c1: Waiting </span><br><span class=\"line\"><span class=\"symbol\">a41004476bab:</span> Waiting </span><br><span class=\"line\"><span class=\"symbol\">e3e643254137:</span> Waiting </span><br><span class=\"line\"><span class=\"symbol\">b81c640d2799:</span> Waiting </span><br><span class=\"line\"><span class=\"symbol\">c19aff5b9429:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">6</span>a28e1c33c11: Waiting</span><br></pre></td></tr></table></figure>\n<h2><span id=\"docker-compose\">docker-compose</span></h2>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir gitlab</span><br><span class=\"line\">cd gitlab</span><br><span class=\"line\">vim docker-compose.yml</span><br><span class=\"line\"></span><br><span class=\"line\">[root@MyCentOS]<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/gi</span>tlab<span class=\"comment\"># pwd</span></span><br><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/gi</span>tlab</span><br></pre></td></tr></table></figure>\n<p>docker-compose.xml</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">version</span>: <span class=\"string\">'3'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">    gitlab:</span><br><span class=\"line\">      image: <span class=\"string\">'twang2218/gitlab-ce-zh:10.5'</span></span><br><span class=\"line\">      restart: always</span><br><span class=\"line\">      hostname: <span class=\"string\">'116.62.110.99'</span> <span class=\"comment\"># 主机名ECS的固定ip</span></span><br><span class=\"line\">      environment: <span class=\"comment\"># 环境变量</span></span><br><span class=\"line\">        TZ: <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\">        GITLAB_OMNIBUS_CONFIG: | <span class=\"comment\"># gitlib的初始化操作</span></span><br><span class=\"line\">          external_url <span class=\"string\">'http://116.62.110.99'</span> <span class=\"comment\"># web访问地址 可以加端口:</span></span><br><span class=\"line\">          gitlab_rails[<span class=\"string\">'time_zone'</span>] = <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\">          gitlab_rails[<span class=\"string\">'gitlab_shell_ssh_port'</span>] = <span class=\"number\">2222</span> <span class=\"comment\"># ssh访问原本22已被占用,所以使用2222</span></span><br><span class=\"line\">          unicorn[<span class=\"string\">'port'</span>] = <span class=\"number\">8082</span> <span class=\"comment\"># 本身的端口</span></span><br><span class=\"line\">          nginx[<span class=\"string\">'listen_port'</span>] = <span class=\"number\">80</span> <span class=\"comment\"># 要与external的端口一致</span></span><br><span class=\"line\">      ports: <span class=\"comment\"># 批量暴露</span></span><br><span class=\"line\">        - <span class=\"string\">'80:80'</span></span><br><span class=\"line\">        - <span class=\"string\">'8443:443'</span> <span class=\"comment\"># 443是https的端口 改为8443</span></span><br><span class=\"line\">        - <span class=\"string\">'2222:22'</span> <span class=\"comment\"># ssh的暴露端口</span></span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - /usr/<span class=\"built_in\">local</span>/docker/gitlab/config:/etc/gitlab</span><br><span class=\"line\">        - /usr/<span class=\"built_in\">local</span>/docker/gitlab/data:/var/opt/gitlab</span><br><span class=\"line\">        - /usr/<span class=\"built_in\">local</span>/docker/gitlab/logs:/var/<span class=\"built_in\">log</span>/gitlab</span><br></pre></td></tr></table></figure>\n<h2><span id=\"启动\">启动</span></h2>\n<p><code>docker-compose up</code>或者守护态运行<code>docker-compose up -d</code><br>\n然后监听日志<code>docker logs -f 容器id或者name</code></p>\n<p>输入这条命令以后会抛出大量的日志,等待即可.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">transactions\"</span><br><span class=\"line\">web_1  |     - <span class=\"keyword\">change</span> <span class=\"keyword\">mode</span> <span class=\"keyword\">from</span> <span class=\"string\">''</span> <span class=\"keyword\">to</span> <span class=\"string\">'0644'</span></span><br><span class=\"line\">web_1  |     - <span class=\"keyword\">change</span> owner <span class=\"keyword\">from</span> <span class=\"string\">''</span> <span class=\"keyword\">to</span> <span class=\"string\">'gitlab-psql'</span></span><br><span class=\"line\">web_1  |   * <span class=\"keyword\">execute</span>[/opt/gitlab/<span class=\"keyword\">bin</span>/gitlab-ctl <span class=\"keyword\">start</span> postgres-exporter] <span class=\"keyword\">action</span> run</span><br><span class=\"line\">web_1  |     [<span class=\"keyword\">execute</span>] ok: run: postgres-exporter: (pid <span class=\"number\">1149</span>) <span class=\"number\">12</span>s</span><br><span class=\"line\">web_1  |     - <span class=\"keyword\">execute</span> /opt/gitlab/<span class=\"keyword\">bin</span>/gitlab-ctl <span class=\"keyword\">start</span> postgres-exporter</span><br><span class=\"line\">web_1  | Recipe: gitlab::gitlab-rails</span><br></pre></td></tr></table></figure>\n<h2><span id=\"查看结果\">查看结果</span></h2>\n<p>发现无法访问,因该是ecs的端口安全组策略未开放.</p>\n<p><img src=\"/2019/09/30/GitLab学习2-GitLab的使用/1.png\" alt></p>\n<p><img src=\"/2019/09/30/GitLab学习2-GitLab的使用/2.png\" alt></p>\n<p>再次启动后访问,如图所示<br>\n<img src=\"/2019/09/30/GitLab学习2-GitLab的使用/3.png\" alt></p>\n<h2><span id=\"解决错误\">解决错误</span></h2>\n<h3><span id=\"交互方式进入容器\">交互方式进入容器</span></h3>\n<p><code>sudo docker exec -it f9 bash</code></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"number\">116</span>:/<span class=\"meta\"># cd /var/log/gitlab/nginx</span></span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># ls</span></span><br><span class=\"line\">access.<span class=\"built_in\">log</span>  <span class=\"built_in\">config</span>  current  error.<span class=\"built_in\">log</span>  gitlab_access.<span class=\"built_in\">log</span>  gitlab_error.<span class=\"built_in\">log</span>  lock</span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># vi <span class=\"meta-keyword\">error</span>.log </span></span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># ls</span></span><br><span class=\"line\">access.<span class=\"built_in\">log</span>  <span class=\"built_in\">config</span>  current  error.<span class=\"built_in\">log</span>  gitlab_access.<span class=\"built_in\">log</span>  gitlab_error.<span class=\"built_in\">log</span>  lock</span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># vi gitlab_error.log </span></span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># gitlab-ctl status</span></span><br><span class=\"line\"><span class=\"built_in\">run</span>: gitaly: (pid <span class=\"number\">436</span>) <span class=\"number\">3751</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">430</span>) <span class=\"number\">3751</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: gitlab-monitor: (pid <span class=\"number\">442</span>) <span class=\"number\">3751</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">427</span>) <span class=\"number\">3751</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: gitlab-workhorse: (pid <span class=\"number\">448</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">443</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: logrotate: (pid <span class=\"number\">5093</span>) <span class=\"number\">151</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">432</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: nginx: (pid <span class=\"number\">438</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">433</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: node-exporter: (pid <span class=\"number\">441</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">434</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: postgres-exporter: (pid <span class=\"number\">440</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">428</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: postgresql: (pid <span class=\"number\">452</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">447</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: prometheus: (pid <span class=\"number\">435</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">429</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: redis: (pid <span class=\"number\">451</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">446</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: redis-exporter: (pid <span class=\"number\">449</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">444</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: sidekiq: (pid <span class=\"number\">5335</span>) <span class=\"number\">5</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">431</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: sshd: (pid <span class=\"number\">24</span>) <span class=\"number\">3762</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">23</span>) <span class=\"number\">3762</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: unicorn: (pid <span class=\"number\">5283</span>) <span class=\"number\">32</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">445</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># gitlab-ctl tail unicorn</span></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stdout.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stderr.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">43</span>:<span class=\"number\">15.297148</span> #<span class=\"number\">4587</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">45</span>:<span class=\"number\">33.002415</span> #<span class=\"number\">4689</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">46</span>:<span class=\"number\">43.812719</span> #<span class=\"number\">4792</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">47</span>:<span class=\"number\">29.594381</span> #<span class=\"number\">4856</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">49</span>:<span class=\"number\">13.121405</span> #<span class=\"number\">4963</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">50</span>:<span class=\"number\">03.751939</span> #<span class=\"number\">5033</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">51</span>:<span class=\"number\">27.681477</span> #<span class=\"number\">5137</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">52</span>:<span class=\"number\">25.463628</span> #<span class=\"number\">5221</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">53</span>:<span class=\"number\">26.002010</span> #<span class=\"number\">5314</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">54</span>:<span class=\"number\">21.678943</span> #<span class=\"number\">5399</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/current &lt;==</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">51</span>:<span class=\"number\">24.53737</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">52</span>:<span class=\"number\">19.58587</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">52</span>:<span class=\"number\">21.69616</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">52</span>:<span class=\"number\">21.89708</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">53</span>:<span class=\"number\">20.58943</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">53</span>:<span class=\"number\">22.95301</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">53</span>:<span class=\"number\">23.14569</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">54</span>:<span class=\"number\">17.31323</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">54</span>:<span class=\"number\">19.23802</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">54</span>:<span class=\"number\">19.35571</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">55</span>:<span class=\"number\">19.31273</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">55</span>:<span class=\"number\">21.71564</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">55</span>:<span class=\"number\">21.92552</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stderr.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">55</span>:<span class=\"number\">24.691724</span> #<span class=\"number\">5492</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/current &lt;==</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">06.09911</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">08.52929</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">08.74450</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stderr.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">56</span>:<span class=\"number\">11.797988</span> #<span class=\"number\">5571</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/current &lt;==</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">55.14527</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">57.66708</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">57.86318</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\">^C/opt/gitlab/embedded/bin/omnibus-ctl: Interrupt</span><br></pre></td></tr></table></figure>\n<p>提示 <code>failed to start a new unicorn master</code></p>\n<h3><span id=\"查看报错日志\">查看报错日志</span></h3>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"number\">116</span>:/var/log/gitlab/unicorn<span class=\"meta\"># vi unicorn_stderr.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">48</span>:<span class=\"number\">12.284632</span> <span class=\"meta\">#556]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">49</span>:<span class=\"number\">03.098603</span> <span class=\"meta\">#696]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">50</span>:<span class=\"number\">01.069664</span> <span class=\"meta\">#912]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">51</span>:<span class=\"number\">26.513453</span> <span class=\"meta\">#521]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">52</span>:<span class=\"number\">36.836487</span> <span class=\"meta\">#693]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">53</span>:<span class=\"number\">40.245197</span> <span class=\"meta\">#777]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">54</span>:<span class=\"number\">42.016154</span> <span class=\"meta\">#867]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">55</span>:<span class=\"number\">41.475464</span> <span class=\"meta\">#948]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">56</span>:<span class=\"number\">41.565244</span> <span class=\"meta\">#1031]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br></pre></td></tr></table></figure>\n<p>提示: You are on a read-only GitLab instance.</p>\n<h3><span id=\"授权\">授权</span></h3>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># chmod -R 777 /var/log/gitlab</span></span><br><span class=\"line\"><span class=\"meta\"># gitlab-ctl tail unicorn</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"重启容器\">重启容器</span></h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@MyCentOS]/usr/local/docker/gitlab#</span> <span class=\"string\">docker</span> <span class=\"string\">start</span> <span class=\"string\">f9</span>   </span><br><span class=\"line\"><span class=\"string\">f9</span></span><br><span class=\"line\"><span class=\"string\">[root@MyCentOS]/usr/local/docker/gitlab#</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>                         <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>                            <span class=\"string\">PORTS</span>                                                             <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">f9f24d76019a</span>        <span class=\"string\">twang2218/gitlab-ce-zh:10.5</span>   <span class=\"string\">\"/assets/wrapper\"</span>        <span class=\"string\">About</span> <span class=\"string\">an</span> <span class=\"string\">hour</span> <span class=\"string\">ago</span>   <span class=\"string\">Up</span> <span class=\"number\">5</span> <span class=\"string\">seconds</span> <span class=\"string\">(health:</span> <span class=\"string\">starting)</span>   <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:80-&gt;80/tcp,</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:2222-&gt;22/tcp,</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8443-&gt;443/tcp</span>   <span class=\"string\">gitlab_gitlab_1</span></span><br><span class=\"line\"><span class=\"string\">d473292982f8</span>        <span class=\"string\">tomcat</span>                        <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">4</span> <span class=\"string\">hours</span>                        <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>                                            <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"string\">99000feb760b</span>        <span class=\"string\">mysql:5.7.22</span>                  <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"string\">About</span> <span class=\"string\">an</span> <span class=\"string\">hour</span>                  <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>                                            <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">[root@MyCentOS]/usr/local/docker/gitlab#</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://hub.docker.com/r/twang2218/gitlab-ce-zh\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/twang2218/gitlab-ce-zh</a><br>\n<a href=\"https://www.bilibili.com/video/av29384041/?p=48\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=48</a><br>\n<a href=\"https://www.funtl.com/zh/gitlab/%E5%9F%BA%E4%BA%8E-Docker-%E5%AE%89%E8%A3%85-GitLab.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/gitlab/基于-Docker-安装-GitLab.html</a><br>\n<a href=\"http://www.mamicode.com/info-detail-2230071.html\" target=\"_blank\" rel=\"noopener\">http://www.mamicode.com/info-detail-2230071.html</a><br>\n<a href=\"http://www.bubuko.com/infodetail-2282456.html\" target=\"_blank\" rel=\"noopener\">http://www.bubuko.com/infodetail-2282456.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>GitLab简介</h1>\n<p>GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，<br>\n可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，<br>\n管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。<br>\n团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。<br>\n它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。<br>\n<strong>与Github类似.</strong></p>\n<h2>为什么使用GitLab?</h2>\n<ul>\n<li>协同开发</li>\n<li>异地开发</li>\n<li>开源的第三方平台用</li>\n<li>自己架设Git托管平台</li>\n</ul>\n<h2>安装GitLab</h2>\n<p>Docker官网汉化版GitLab<br>\n<a href=\"https://hub.docker.com/r/twang2218/gitlab-ce-zh\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/twang2218/gitlab-ce-zh</a></p>\n<p>拉取GitLab: <code>docker pull twang2218/gitlab-ce-zh:10.5</code></p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@MyCentOS]~<span class=\"meta\"># cd /usr/local/docker </span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># ls</span></span><br><span class=\"line\">mysql  tripweb  volumes</span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># mkdir GitLab</span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># ls</span></span><br><span class=\"line\">GitLab  mysql  tripweb  volumes</span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local/docker<span class=\"meta\"># cd GitLab </span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>GitLab<span class=\"meta\"># ls</span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>GitLab<span class=\"meta\"># vim docker-compose.yml</span></span><br><span class=\"line\">[root@MyCentOS]<span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/docker/</span>GitLab<span class=\"meta\"># docker pull twang2218/gitlab-ce-zh:10.5</span></span><br><span class=\"line\"><span class=\"number\">10.5</span>: Pulling from twang2218/gitlab-ce-zh</span><br><span class=\"line\"><span class=\"symbol\">d3938036b19c:</span> Pull complete </span><br><span class=\"line\"><span class=\"symbol\">a9b30c108bda:</span> Pull complete </span><br><span class=\"line\"><span class=\"number\">67</span>de21feec18: Pull complete </span><br><span class=\"line\"><span class=\"number\">817</span>da545be2b: Pull complete </span><br><span class=\"line\"><span class=\"symbol\">d967c497ce23:</span> Pull complete </span><br><span class=\"line\"><span class=\"symbol\">a69c22baab05:</span> Pull complete </span><br><span class=\"line\"><span class=\"symbol\">bf709c1867c3:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">89</span>c3c3b9c89c: Waiting </span><br><span class=\"line\"><span class=\"symbol\">eb1d5a08657b:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">6445958f</span>c33d: Waiting </span><br><span class=\"line\"><span class=\"symbol\">bd40a9292cbd:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">6e3</span>fbbdad5bd: Waiting </span><br><span class=\"line\"><span class=\"number\">3647066e74</span>ea: Waiting </span><br><span class=\"line\"><span class=\"number\">11</span>d43d0755c1: Waiting </span><br><span class=\"line\"><span class=\"symbol\">a41004476bab:</span> Waiting </span><br><span class=\"line\"><span class=\"symbol\">e3e643254137:</span> Waiting </span><br><span class=\"line\"><span class=\"symbol\">b81c640d2799:</span> Waiting </span><br><span class=\"line\"><span class=\"symbol\">c19aff5b9429:</span> Waiting </span><br><span class=\"line\"><span class=\"number\">6</span>a28e1c33c11: Waiting</span><br></pre></td></tr></table></figure>\n<h2>docker-compose</h2>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir gitlab</span><br><span class=\"line\">cd gitlab</span><br><span class=\"line\">vim docker-compose.yml</span><br><span class=\"line\"></span><br><span class=\"line\">[root@MyCentOS]<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/gi</span>tlab<span class=\"comment\"># pwd</span></span><br><span class=\"line\"><span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/docker/gi</span>tlab</span><br></pre></td></tr></table></figure>\n<p>docker-compose.xml</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">version</span>: <span class=\"string\">'3'</span></span><br><span class=\"line\">services:</span><br><span class=\"line\">    gitlab:</span><br><span class=\"line\">      image: <span class=\"string\">'twang2218/gitlab-ce-zh:10.5'</span></span><br><span class=\"line\">      restart: always</span><br><span class=\"line\">      hostname: <span class=\"string\">'116.62.110.99'</span> <span class=\"comment\"># 主机名ECS的固定ip</span></span><br><span class=\"line\">      environment: <span class=\"comment\"># 环境变量</span></span><br><span class=\"line\">        TZ: <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\">        GITLAB_OMNIBUS_CONFIG: | <span class=\"comment\"># gitlib的初始化操作</span></span><br><span class=\"line\">          external_url <span class=\"string\">'http://116.62.110.99'</span> <span class=\"comment\"># web访问地址 可以加端口:</span></span><br><span class=\"line\">          gitlab_rails[<span class=\"string\">'time_zone'</span>] = <span class=\"string\">'Asia/Shanghai'</span></span><br><span class=\"line\">          gitlab_rails[<span class=\"string\">'gitlab_shell_ssh_port'</span>] = <span class=\"number\">2222</span> <span class=\"comment\"># ssh访问原本22已被占用,所以使用2222</span></span><br><span class=\"line\">          unicorn[<span class=\"string\">'port'</span>] = <span class=\"number\">8082</span> <span class=\"comment\"># 本身的端口</span></span><br><span class=\"line\">          nginx[<span class=\"string\">'listen_port'</span>] = <span class=\"number\">80</span> <span class=\"comment\"># 要与external的端口一致</span></span><br><span class=\"line\">      ports: <span class=\"comment\"># 批量暴露</span></span><br><span class=\"line\">        - <span class=\"string\">'80:80'</span></span><br><span class=\"line\">        - <span class=\"string\">'8443:443'</span> <span class=\"comment\"># 443是https的端口 改为8443</span></span><br><span class=\"line\">        - <span class=\"string\">'2222:22'</span> <span class=\"comment\"># ssh的暴露端口</span></span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - /usr/<span class=\"built_in\">local</span>/docker/gitlab/config:/etc/gitlab</span><br><span class=\"line\">        - /usr/<span class=\"built_in\">local</span>/docker/gitlab/data:/var/opt/gitlab</span><br><span class=\"line\">        - /usr/<span class=\"built_in\">local</span>/docker/gitlab/logs:/var/<span class=\"built_in\">log</span>/gitlab</span><br></pre></td></tr></table></figure>\n<h2>启动</h2>\n<p><code>docker-compose up</code>或者守护态运行<code>docker-compose up -d</code><br>\n然后监听日志<code>docker logs -f 容器id或者name</code></p>\n<p>输入这条命令以后会抛出大量的日志,等待即可.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">transactions\"</span><br><span class=\"line\">web_1  |     - <span class=\"keyword\">change</span> <span class=\"keyword\">mode</span> <span class=\"keyword\">from</span> <span class=\"string\">''</span> <span class=\"keyword\">to</span> <span class=\"string\">'0644'</span></span><br><span class=\"line\">web_1  |     - <span class=\"keyword\">change</span> owner <span class=\"keyword\">from</span> <span class=\"string\">''</span> <span class=\"keyword\">to</span> <span class=\"string\">'gitlab-psql'</span></span><br><span class=\"line\">web_1  |   * <span class=\"keyword\">execute</span>[/opt/gitlab/<span class=\"keyword\">bin</span>/gitlab-ctl <span class=\"keyword\">start</span> postgres-exporter] <span class=\"keyword\">action</span> run</span><br><span class=\"line\">web_1  |     [<span class=\"keyword\">execute</span>] ok: run: postgres-exporter: (pid <span class=\"number\">1149</span>) <span class=\"number\">12</span>s</span><br><span class=\"line\">web_1  |     - <span class=\"keyword\">execute</span> /opt/gitlab/<span class=\"keyword\">bin</span>/gitlab-ctl <span class=\"keyword\">start</span> postgres-exporter</span><br><span class=\"line\">web_1  | Recipe: gitlab::gitlab-rails</span><br></pre></td></tr></table></figure>\n<h2>查看结果</h2>\n<p>发现无法访问,因该是ecs的端口安全组策略未开放.</p>\n<p><img src=\"/2019/09/30/GitLab学习2-GitLab的使用/1.png\" alt></p>\n<p><img src=\"/2019/09/30/GitLab学习2-GitLab的使用/2.png\" alt></p>\n<p>再次启动后访问,如图所示<br>\n<img src=\"/2019/09/30/GitLab学习2-GitLab的使用/3.png\" alt></p>\n<h2>解决错误</h2>\n<h3>交互方式进入容器</h3>\n<p><code>sudo docker exec -it f9 bash</code></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"number\">116</span>:/<span class=\"meta\"># cd /var/log/gitlab/nginx</span></span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># ls</span></span><br><span class=\"line\">access.<span class=\"built_in\">log</span>  <span class=\"built_in\">config</span>  current  error.<span class=\"built_in\">log</span>  gitlab_access.<span class=\"built_in\">log</span>  gitlab_error.<span class=\"built_in\">log</span>  lock</span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># vi <span class=\"meta-keyword\">error</span>.log </span></span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># ls</span></span><br><span class=\"line\">access.<span class=\"built_in\">log</span>  <span class=\"built_in\">config</span>  current  error.<span class=\"built_in\">log</span>  gitlab_access.<span class=\"built_in\">log</span>  gitlab_error.<span class=\"built_in\">log</span>  lock</span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># vi gitlab_error.log </span></span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># gitlab-ctl status</span></span><br><span class=\"line\"><span class=\"built_in\">run</span>: gitaly: (pid <span class=\"number\">436</span>) <span class=\"number\">3751</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">430</span>) <span class=\"number\">3751</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: gitlab-monitor: (pid <span class=\"number\">442</span>) <span class=\"number\">3751</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">427</span>) <span class=\"number\">3751</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: gitlab-workhorse: (pid <span class=\"number\">448</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">443</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: logrotate: (pid <span class=\"number\">5093</span>) <span class=\"number\">151</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">432</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: nginx: (pid <span class=\"number\">438</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">433</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: node-exporter: (pid <span class=\"number\">441</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">434</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: postgres-exporter: (pid <span class=\"number\">440</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">428</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: postgresql: (pid <span class=\"number\">452</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">447</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: prometheus: (pid <span class=\"number\">435</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">429</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: redis: (pid <span class=\"number\">451</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">446</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: redis-exporter: (pid <span class=\"number\">449</span>) <span class=\"number\">3752</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">444</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: sidekiq: (pid <span class=\"number\">5335</span>) <span class=\"number\">5</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">431</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: sshd: (pid <span class=\"number\">24</span>) <span class=\"number\">3762</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">23</span>) <span class=\"number\">3762</span>s</span><br><span class=\"line\"><span class=\"built_in\">run</span>: unicorn: (pid <span class=\"number\">5283</span>) <span class=\"number\">32</span>s; <span class=\"built_in\">run</span>: <span class=\"built_in\">log</span>: (pid <span class=\"number\">445</span>) <span class=\"number\">3752</span>s</span><br><span class=\"line\">root@<span class=\"number\">116</span>:/var/<span class=\"built_in\">log</span>/gitlab/nginx<span class=\"meta\"># gitlab-ctl tail unicorn</span></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stdout.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stderr.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">43</span>:<span class=\"number\">15.297148</span> #<span class=\"number\">4587</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">45</span>:<span class=\"number\">33.002415</span> #<span class=\"number\">4689</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">46</span>:<span class=\"number\">43.812719</span> #<span class=\"number\">4792</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">47</span>:<span class=\"number\">29.594381</span> #<span class=\"number\">4856</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">49</span>:<span class=\"number\">13.121405</span> #<span class=\"number\">4963</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">50</span>:<span class=\"number\">03.751939</span> #<span class=\"number\">5033</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">51</span>:<span class=\"number\">27.681477</span> #<span class=\"number\">5137</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">52</span>:<span class=\"number\">25.463628</span> #<span class=\"number\">5221</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">53</span>:<span class=\"number\">26.002010</span> #<span class=\"number\">5314</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">54</span>:<span class=\"number\">21.678943</span> #<span class=\"number\">5399</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/current &lt;==</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">51</span>:<span class=\"number\">24.53737</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">52</span>:<span class=\"number\">19.58587</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">52</span>:<span class=\"number\">21.69616</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">52</span>:<span class=\"number\">21.89708</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">53</span>:<span class=\"number\">20.58943</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">53</span>:<span class=\"number\">22.95301</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">53</span>:<span class=\"number\">23.14569</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">54</span>:<span class=\"number\">17.31323</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">54</span>:<span class=\"number\">19.23802</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">54</span>:<span class=\"number\">19.35571</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">55</span>:<span class=\"number\">19.31273</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">55</span>:<span class=\"number\">21.71564</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">55</span>:<span class=\"number\">21.92552</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stderr.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">55</span>:<span class=\"number\">24.691724</span> #<span class=\"number\">5492</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/current &lt;==</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">06.09911</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">08.52929</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">08.74450</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/unicorn_stderr.<span class=\"built_in\">log</span> &lt;==</span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T05:<span class=\"number\">56</span>:<span class=\"number\">11.797988</span> #<span class=\"number\">5571</span>]  INFO -- : Refreshing Gem <span class=\"built_in\">list</span></span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; /var/<span class=\"built_in\">log</span>/gitlab/unicorn/current &lt;==</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">55.14527</span> master failed to start, check <span class=\"built_in\">stderr</span> <span class=\"built_in\">log</span> <span class=\"keyword\">for</span> details</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">57.66708</span> failed to start a <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>_05:<span class=\"number\">56</span>:<span class=\"number\">57.86318</span> starting <span class=\"keyword\">new</span> unicorn master</span><br><span class=\"line\">^C/opt/gitlab/embedded/bin/omnibus-ctl: Interrupt</span><br></pre></td></tr></table></figure>\n<p>提示 <code>failed to start a new unicorn master</code></p>\n<h3>查看报错日志</h3>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@<span class=\"number\">116</span>:/var/log/gitlab/unicorn<span class=\"meta\"># vi unicorn_stderr.log</span></span><br><span class=\"line\"></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">48</span>:<span class=\"number\">12.284632</span> <span class=\"meta\">#556]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">49</span>:<span class=\"number\">03.098603</span> <span class=\"meta\">#696]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">50</span>:<span class=\"number\">01.069664</span> <span class=\"meta\">#912]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">51</span>:<span class=\"number\">26.513453</span> <span class=\"meta\">#521]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">52</span>:<span class=\"number\">36.836487</span> <span class=\"meta\">#693]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">53</span>:<span class=\"number\">40.245197</span> <span class=\"meta\">#777]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">54</span>:<span class=\"number\">42.016154</span> <span class=\"meta\">#867]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">55</span>:<span class=\"number\">41.475464</span> <span class=\"meta\">#948]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br><span class=\"line\">  : msgid <span class=\"comment\">'You are on a read-only GitLab instance.'</span></span><br><span class=\"line\">I, [<span class=\"number\">2019</span><span class=\"number\">-10</span><span class=\"number\">-08</span>T04:<span class=\"number\">56</span>:<span class=\"number\">41.565244</span> <span class=\"meta\">#1031]  INFO -- : Refreshing Gem list</span></span><br><span class=\"line\">Warning: fuzzy message was ignored.</span><br></pre></td></tr></table></figure>\n<p>提示: You are on a read-only GitLab instance.</p>\n<h3>授权</h3>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># chmod -R 777 /var/log/gitlab</span></span><br><span class=\"line\"><span class=\"meta\"># gitlab-ctl tail unicorn</span></span><br></pre></td></tr></table></figure>\n<h3>重启容器</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[root@MyCentOS]/usr/local/docker/gitlab#</span> <span class=\"string\">docker</span> <span class=\"string\">start</span> <span class=\"string\">f9</span>   </span><br><span class=\"line\"><span class=\"string\">f9</span></span><br><span class=\"line\"><span class=\"string\">[root@MyCentOS]/usr/local/docker/gitlab#</span> <span class=\"string\">docker</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"string\">CONTAINER</span> <span class=\"string\">ID</span>        <span class=\"string\">IMAGE</span>                         <span class=\"string\">COMMAND</span>                  <span class=\"string\">CREATED</span>             <span class=\"string\">STATUS</span>                            <span class=\"string\">PORTS</span>                                                             <span class=\"string\">NAMES</span></span><br><span class=\"line\"><span class=\"string\">f9f24d76019a</span>        <span class=\"string\">twang2218/gitlab-ce-zh:10.5</span>   <span class=\"string\">\"/assets/wrapper\"</span>        <span class=\"string\">About</span> <span class=\"string\">an</span> <span class=\"string\">hour</span> <span class=\"string\">ago</span>   <span class=\"string\">Up</span> <span class=\"number\">5</span> <span class=\"string\">seconds</span> <span class=\"string\">(health:</span> <span class=\"string\">starting)</span>   <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:80-&gt;80/tcp,</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:2222-&gt;22/tcp,</span> <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8443-&gt;443/tcp</span>   <span class=\"string\">gitlab_gitlab_1</span></span><br><span class=\"line\"><span class=\"string\">d473292982f8</span>        <span class=\"string\">tomcat</span>                        <span class=\"string\">\"catalina.sh run\"</span>        <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"number\">4</span> <span class=\"string\">hours</span>                        <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:8081-&gt;8080/tcp</span>                                            <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"string\">99000feb760b</span>        <span class=\"string\">mysql:5.7.22</span>                  <span class=\"string\">\"docker-entrypoint.s…\"</span>   <span class=\"number\">8</span> <span class=\"string\">days</span> <span class=\"string\">ago</span>          <span class=\"string\">Up</span> <span class=\"string\">About</span> <span class=\"string\">an</span> <span class=\"string\">hour</span>                  <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">:3307-&gt;3306/tcp</span>                                            <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"string\">[root@MyCentOS]/usr/local/docker/gitlab#</span></span><br></pre></td></tr></table></figure>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://hub.docker.com/r/twang2218/gitlab-ce-zh\" target=\"_blank\" rel=\"noopener\">https://hub.docker.com/r/twang2218/gitlab-ce-zh</a><br>\n<a href=\"https://www.bilibili.com/video/av29384041/?p=48\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av29384041/?p=48</a><br>\n<a href=\"https://www.funtl.com/zh/gitlab/%E5%9F%BA%E4%BA%8E-Docker-%E5%AE%89%E8%A3%85-GitLab.html\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/gitlab/基于-Docker-安装-GitLab.html</a><br>\n<a href=\"http://www.mamicode.com/info-detail-2230071.html\" target=\"_blank\" rel=\"noopener\">http://www.mamicode.com/info-detail-2230071.html</a><br>\n<a href=\"http://www.bubuko.com/infodetail-2282456.html\" target=\"_blank\" rel=\"noopener\">http://www.bubuko.com/infodetail-2282456.html</a></p>\n</blockquote>\n"},{"title":"Vue学习01-安装及使用","catalog":true,"date":"2019-08-16T01:49:24.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### 什么是Vue.js\n- Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex\n\n- React是最流行的前端框架(网站和手机app都可以开发)\n\n- Vue Angular React是目前前端三大主流框架!\n\n- Vue是一套构建用户界面的框架, **只关注视图层**\n\n- 前端工作 为mvc的view层\n\n# Vue的学习\n**Vue学习的内容开始.**\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的**渐进式框架**，\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。\nVue 的核心库只**关注视图层**，不仅易于上手，还便于与第三方库\n（如：vue-router，vue-resource，vuex）或既有项目整合。\n- 优雅降级: 向下兼容\n- 渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容\n\n- Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.\n- Vuex 状态管理框架;\n\n### 为什么要使用 Vue.js\n- 轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）\n- 移动优先。更适合移动端，比如移动端的 Touch 事件\n- 易上手，学习曲线平稳，文档齐全\n- 吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性\n- 开源，社区活跃度高\n\n## Vue.js 的两大核心要素\n### 数据驱动\n![dataDriver](Vue学习01-安装及使用/dataDriver.png)\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty \n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。\n\n每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知\n watcher 重新计算，从而致使它关联的组件得以更新。\n\n## 安装\n- 如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.\n~~~ javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"></script>\n~~~\n\n- 新建一个Vue程序\n利用npm 安装vue\n~~~ shell\n# 最新稳定版\n$ npm install vue\n~~~\n### 命令行工具 (CLI)\n`待完善`\n\n### 组件化\n- 页面上每个独立的可交互的区域视为一个组件\n- 每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护\n- 页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面\n\n## 第一个Vue程序\n~~~ vue\n<!DOCTYPE html>\n<html lang=\"zh\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>my-vue</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      {{a}}\n    </div>\n\n    <!-- built files will be auto injected -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          a: \"test\"\n        }\n      })\n    </script>\n  </body>\n</html>\n~~~\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习01-安装及使用.md","raw":"---\ntitle: Vue学习01-安装及使用\ncatalog: true\ndate: 2019-08-16 09:49:24\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### 什么是Vue.js\n- Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex\n\n- React是最流行的前端框架(网站和手机app都可以开发)\n\n- Vue Angular React是目前前端三大主流框架!\n\n- Vue是一套构建用户界面的框架, **只关注视图层**\n\n- 前端工作 为mvc的view层\n\n# Vue的学习\n**Vue学习的内容开始.**\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的**渐进式框架**，\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。\nVue 的核心库只**关注视图层**，不仅易于上手，还便于与第三方库\n（如：vue-router，vue-resource，vuex）或既有项目整合。\n- 优雅降级: 向下兼容\n- 渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容\n\n- Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.\n- Vuex 状态管理框架;\n\n### 为什么要使用 Vue.js\n- 轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）\n- 移动优先。更适合移动端，比如移动端的 Touch 事件\n- 易上手，学习曲线平稳，文档齐全\n- 吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性\n- 开源，社区活跃度高\n\n## Vue.js 的两大核心要素\n### 数据驱动\n![dataDriver](Vue学习01-安装及使用/dataDriver.png)\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty \n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。\n\n每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知\n watcher 重新计算，从而致使它关联的组件得以更新。\n\n## 安装\n- 如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.\n~~~ javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"></script>\n~~~\n\n- 新建一个Vue程序\n利用npm 安装vue\n~~~ shell\n# 最新稳定版\n$ npm install vue\n~~~\n### 命令行工具 (CLI)\n`待完善`\n\n### 组件化\n- 页面上每个独立的可交互的区域视为一个组件\n- 每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护\n- 页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面\n\n## 第一个Vue程序\n~~~ vue\n<!DOCTYPE html>\n<html lang=\"zh\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title>my-vue</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      {{a}}\n    </div>\n\n    <!-- built files will be auto injected -->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          a: \"test\"\n        }\n      })\n    </script>\n  </body>\n</html>\n~~~\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习01-安装及使用","published":1,"updated":"2021-04-20T13:28:10.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2i001vzgl1cqnvuice","content":"<h1><span id=\"vue学习记录\">Vue学习记录</span></h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3><span id=\"什么是vuejs\">什么是Vue.js</span></h3>\n<ul>\n<li>\n<p>Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex</p>\n</li>\n<li>\n<p>React是最流行的前端框架(网站和手机app都可以开发)</p>\n</li>\n<li>\n<p>Vue Angular React是目前前端三大主流框架!</p>\n</li>\n<li>\n<p>Vue是一套构建用户界面的框架, <strong>只关注视图层</strong></p>\n</li>\n<li>\n<p>前端工作 为mvc的view层</p>\n</li>\n</ul>\n<h1><span id=\"vue的学习\">Vue的学习</span></h1>\n<p><strong>Vue学习的内容开始.</strong><br>\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的<strong>渐进式框架</strong>，<br>\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。<br>\nVue 的核心库只<strong>关注视图层</strong>，不仅易于上手，还便于与第三方库<br>\n（如：vue-router，vue-resource，vuex）或既有项目整合。</p>\n<ul>\n<li>\n<p>优雅降级: 向下兼容</p>\n</li>\n<li>\n<p>渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容</p>\n</li>\n<li>\n<p>Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.</p>\n</li>\n<li>\n<p>Vuex 状态管理框架;</p>\n</li>\n</ul>\n<h3><span id=\"为什么要使用-vuejs\">为什么要使用 Vue.js</span></h3>\n<ul>\n<li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li>\n<li>移动优先。更适合移动端，比如移动端的 Touch 事件</li>\n<li>易上手，学习曲线平稳，文档齐全</li>\n<li>吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li>\n<li>开源，社区活跃度高</li>\n</ul>\n<h2><span id=\"vuejs-的两大核心要素\">Vue.js 的两大核心要素</span></h2>\n<h3><span id=\"数据驱动\">数据驱动</span></h3>\n<p><img src=\"/2019/08/16/Vue学习01-安装及使用/dataDriver.png\" alt=\"dataDriver\"><br>\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty<br>\n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，<br>\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。</p>\n<p>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知<br>\nwatcher 重新计算，从而致使它关联的组件得以更新。</p>\n<h2><span id=\"安装\">安装</span></h2>\n<ul>\n<li>如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建一个Vue程序<br>\n利用npm 安装vue</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最新稳定版</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install vue</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"命令行工具-cli\">命令行工具 (CLI)</span></h3>\n<p><code>待完善</code></p>\n<h3><span id=\"组件化\">组件化</span></h3>\n<ul>\n<li>页面上每个独立的可交互的区域视为一个组件</li>\n<li>每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护</li>\n<li>页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面</li>\n</ul>\n<h2><span id=\"第一个vue程序\">第一个Vue程序</span></h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;my-vue&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;a&#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- built files will be auto injected --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;test&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3>什么是Vue.js</h3>\n<ul>\n<li>\n<p>Vue.js 是目前最火的前端框架,Vue.js也是可以进行手机app开发的需要借助于Weex</p>\n</li>\n<li>\n<p>React是最流行的前端框架(网站和手机app都可以开发)</p>\n</li>\n<li>\n<p>Vue Angular React是目前前端三大主流框架!</p>\n</li>\n<li>\n<p>Vue是一套构建用户界面的框架, <strong>只关注视图层</strong></p>\n</li>\n<li>\n<p>前端工作 为mvc的view层</p>\n</li>\n</ul>\n<h1>Vue的学习</h1>\n<p><strong>Vue学习的内容开始.</strong><br>\nVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的<strong>渐进式框架</strong>，<br>\n发布于 2014 年 2 月。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。<br>\nVue 的核心库只<strong>关注视图层</strong>，不仅易于上手，还便于与第三方库<br>\n（如：vue-router，vue-resource，vuex）或既有项目整合。</p>\n<ul>\n<li>\n<p>优雅降级: 向下兼容</p>\n</li>\n<li>\n<p>渐进增强: 内容为主,更具浏览器版本的不同,增加特效.向上兼容</p>\n</li>\n<li>\n<p>Vue-router :前后端分离, 后台不可干涉前端功能,需要router做路由.</p>\n</li>\n<li>\n<p>Vuex 状态管理框架;</p>\n</li>\n</ul>\n<h3>为什么要使用 Vue.js</h3>\n<ul>\n<li>轻量级，体积小是一个重要指标。Vue.js 压缩后有只有 20多kb （Angular 压缩后 56kb+，React 压缩后 44kb+）</li>\n<li>移动优先。更适合移动端，比如移动端的 Touch 事件</li>\n<li>易上手，学习曲线平稳，文档齐全</li>\n<li>吸取了 Angular（模块化）和 React（虚拟 DOM）的长处，并拥有自己独特的功能，如：计算属性</li>\n<li>开源，社区活跃度高</li>\n</ul>\n<h2>Vue.js 的两大核心要素</h2>\n<h3>数据驱动</h3>\n<p><img src=\"/2019/08/16/Vue学习01-安装及使用/dataDriver.png\" alt=\"dataDriver\"><br>\n当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty<br>\n把这些属性全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，<br>\n这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器。</p>\n<p>每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知<br>\nwatcher 重新计算，从而致使它关联的组件得以更新。</p>\n<h2>安装</h2>\n<ul>\n<li>如果想快速上手,直接引入生产环境的Vue,然后开始测试学习.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>新建一个Vue程序<br>\n利用npm 安装vue</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 最新稳定版</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install vue</span></span><br></pre></td></tr></table></figure>\n<h3>命令行工具 (CLI)</h3>\n<p><code>待完善</code></p>\n<h3>组件化</h3>\n<ul>\n<li>页面上每个独立的可交互的区域视为一个组件</li>\n<li>每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护</li>\n<li>页面不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面</li>\n</ul>\n<h2>第一个Vue程序</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;my-vue&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;a&#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- built files will be auto injected --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;test&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"Nexus学习3-在项目中使用maven私库","catalog":true,"date":"2019-10-23T02:55:40.000Z","subtitle":null,"header-img":null,"_content":"# Nexus学习3-在项目中使用maven私库\n\n## 配置Maven的setting.xml文件\n\n### Snapshots 与 Releases 的区别\n- nexus-releases: 用于发布 Release 版本\n- nexus-snapshots: 用于发布 Snapshot 版本（快照版）\nRelease 版本与 Snapshot 定义如下\n~~~ xml\n<servers>\n    <!-- server\n     | Specifies the authentication information to use when connecting to a particular server, identified by\n     | a unique name within the system (referred to by the 'id' attribute below).\n     |\n     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\n     |       used together.\n     |\n    <server>\n      <id>deploymentRepo</id>\n      <username>repouser</username>\n      <password>repopwd</password>\n    </server>\n    -->\n\t<!-- 发行版本私服仓库 -->\n\t<server>\n      <id>maven-releases</id>\n      <username>admin</username>\n      <password>admin</password>\n    </server>\n\t <!-- 快照版本私服仓库 -->\n\t<server>\n      <id>maven-snapshots</id>\n      <username>admin</username>\n      <password>admin</password>\n    </server>\n\n    <!-- Another sample, using keys to authenticate.\n    <server>\n      <id>siteServer</id>\n      <privateKey>/path/to/private/key</privateKey>\n      <passphrase>optional; leave empty if not used.</passphrase>\n    </server>\n    -->\n  </servers>\n~~~\n## 配置自动化部署\n`pom.xml`中添加代码如下\n\n~~~\n<distributionManagement>  \n  <repository>  \n    <id>nexus-releases</id>  \n    <name>Nexus Release Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-releases/</url>  \n  </repository>  \n  <snapshotRepository>  \n    <id>nexus-snapshots</id>  \n    <name>Nexus Snapshot Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-snapshots/</url>  \n  </snapshotRepository>  \n</distributionManagement> \n~~~\n\n![1](Nexus学习3-在项目中使用maven私库/1.png)\n\n### 修改私服地址\n在nexus中查看地址\n![2](Nexus学习3-在项目中使用maven私库/2.png)\n\n## 使用maven打包推送\n`mvn deploy`\n`mvn deploy -Dmaven.test.skip=true` 去掉测试类\n~~~\nziming@Dell17r2 MINGW64 /d/IdeaProjects/tripweb (master)\n$ mvn deploy -Dmaven.test.skip=true\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building trip-web Maven Webapp 1.0.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- mybatis-generator-maven-plugin:1.3.5:generate (Generate MyBatis Artifacts) @ trip-web ---\n[INFO] Connecting to the Database\nWed Oct 23 11:20:50 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ an\nd 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the ve\nrifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore f\nor server certificate verification.\n\n~~~\n### 出现错误 Not authorized , ReasonPhrase:Unauthorized\n~~~\n[INFO] Final Memory: 28M/378M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project trip-web: Failed to retrieve remote metadat\na cn.zm:trip-web:1.0.0-SNAPSHOT/maven-metadata.xml: Could not transfer metadata cn.zm:trip-web:1.0.0-SNAPSHOT/maven-metadata.xml from/to nexus-snapshots (http:/\n/116.62.110.99:8082/repository/maven-snapshots/): Not authorized , ReasonPhrase:Unauthorized. -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n~~~\n\n![3](Nexus学习3-在项目中使用maven私库/3.png)\n将的 Deployment Policy 修改为 “Allow Redeploy”\n\n![4](Nexus学习3-在项目中使用maven私库/4.png)\n### 修改pom.xml配置\n~~~\n<!-- 发行版本私服仓库 -->\n\t<server>\n      <id>maven-releases</id>\n      <username>admin</username>\n      <password>admin</password>\n\t  <!--鉴权时使用的私钥密码。-->\n\t  <passphrase>admin</passphrase>\n\t  <!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 -->\n\t  <filePermissions>664</filePermissions>\n      <!--目录被创建时的权限。 -->\n      <directoryPermissions>775</directoryPermissions>\n   \t</server>\n\t<!-- 快照版本私服仓库 -->\n\t<server>\n      <id>maven-snapshots</id>\n      <username>admin</username>\n      <password>admin</password>\n\t  <!--鉴权时使用的私钥密码。-->\n\t  <passphrase>admin</passphrase>\n\t  <!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 -->\n\t  <filePermissions>664</filePermissions>\n      <!--目录被创建时的权限。 -->\n      <directoryPermissions>775</directoryPermissions>\n    </server>\n~~~\n\n## 参考资料\n> \n","source":"_posts/Nexus学习3-在项目中使用maven私库.md","raw":"---\ntitle: Nexus学习3-在项目中使用maven私库\ncatalog: true\ntags: []\ndate: 2019-10-23 10:55:40\nsubtitle:\nheader-img:\n---\n# Nexus学习3-在项目中使用maven私库\n\n## 配置Maven的setting.xml文件\n\n### Snapshots 与 Releases 的区别\n- nexus-releases: 用于发布 Release 版本\n- nexus-snapshots: 用于发布 Snapshot 版本（快照版）\nRelease 版本与 Snapshot 定义如下\n~~~ xml\n<servers>\n    <!-- server\n     | Specifies the authentication information to use when connecting to a particular server, identified by\n     | a unique name within the system (referred to by the 'id' attribute below).\n     |\n     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\n     |       used together.\n     |\n    <server>\n      <id>deploymentRepo</id>\n      <username>repouser</username>\n      <password>repopwd</password>\n    </server>\n    -->\n\t<!-- 发行版本私服仓库 -->\n\t<server>\n      <id>maven-releases</id>\n      <username>admin</username>\n      <password>admin</password>\n    </server>\n\t <!-- 快照版本私服仓库 -->\n\t<server>\n      <id>maven-snapshots</id>\n      <username>admin</username>\n      <password>admin</password>\n    </server>\n\n    <!-- Another sample, using keys to authenticate.\n    <server>\n      <id>siteServer</id>\n      <privateKey>/path/to/private/key</privateKey>\n      <passphrase>optional; leave empty if not used.</passphrase>\n    </server>\n    -->\n  </servers>\n~~~\n## 配置自动化部署\n`pom.xml`中添加代码如下\n\n~~~\n<distributionManagement>  \n  <repository>  \n    <id>nexus-releases</id>  \n    <name>Nexus Release Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-releases/</url>  \n  </repository>  \n  <snapshotRepository>  \n    <id>nexus-snapshots</id>  \n    <name>Nexus Snapshot Repository</name>  \n    <url>http://127.0.0.1:8081/repository/maven-snapshots/</url>  \n  </snapshotRepository>  \n</distributionManagement> \n~~~\n\n![1](Nexus学习3-在项目中使用maven私库/1.png)\n\n### 修改私服地址\n在nexus中查看地址\n![2](Nexus学习3-在项目中使用maven私库/2.png)\n\n## 使用maven打包推送\n`mvn deploy`\n`mvn deploy -Dmaven.test.skip=true` 去掉测试类\n~~~\nziming@Dell17r2 MINGW64 /d/IdeaProjects/tripweb (master)\n$ mvn deploy -Dmaven.test.skip=true\n[INFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building trip-web Maven Webapp 1.0.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- mybatis-generator-maven-plugin:1.3.5:generate (Generate MyBatis Artifacts) @ trip-web ---\n[INFO] Connecting to the Database\nWed Oct 23 11:20:50 CST 2019 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ an\nd 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the ve\nrifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore f\nor server certificate verification.\n\n~~~\n### 出现错误 Not authorized , ReasonPhrase:Unauthorized\n~~~\n[INFO] Final Memory: 28M/378M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy (default-deploy) on project trip-web: Failed to retrieve remote metadat\na cn.zm:trip-web:1.0.0-SNAPSHOT/maven-metadata.xml: Could not transfer metadata cn.zm:trip-web:1.0.0-SNAPSHOT/maven-metadata.xml from/to nexus-snapshots (http:/\n/116.62.110.99:8082/repository/maven-snapshots/): Not authorized , ReasonPhrase:Unauthorized. -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n~~~\n\n![3](Nexus学习3-在项目中使用maven私库/3.png)\n将的 Deployment Policy 修改为 “Allow Redeploy”\n\n![4](Nexus学习3-在项目中使用maven私库/4.png)\n### 修改pom.xml配置\n~~~\n<!-- 发行版本私服仓库 -->\n\t<server>\n      <id>maven-releases</id>\n      <username>admin</username>\n      <password>admin</password>\n\t  <!--鉴权时使用的私钥密码。-->\n\t  <passphrase>admin</passphrase>\n\t  <!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 -->\n\t  <filePermissions>664</filePermissions>\n      <!--目录被创建时的权限。 -->\n      <directoryPermissions>775</directoryPermissions>\n   \t</server>\n\t<!-- 快照版本私服仓库 -->\n\t<server>\n      <id>maven-snapshots</id>\n      <username>admin</username>\n      <password>admin</password>\n\t  <!--鉴权时使用的私钥密码。-->\n\t  <passphrase>admin</passphrase>\n\t  <!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 -->\n\t  <filePermissions>664</filePermissions>\n      <!--目录被创建时的权限。 -->\n      <directoryPermissions>775</directoryPermissions>\n    </server>\n~~~\n\n## 参考资料\n> \n","slug":"Nexus学习3-在项目中使用maven私库","published":1,"updated":"2021-04-20T13:28:10.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2m001yzgl1bbg7hfvc","content":"<h1><span id=\"nexus学习3-在项目中使用maven私库\">Nexus学习3-在项目中使用maven私库</span></h1>\n<h2><span id=\"配置maven的settingxml文件\">配置Maven的setting.xml文件</span></h2>\n<h3><span id=\"snapshots-与-releases-的区别\">Snapshots 与 Releases 的区别</span></h3>\n<ul>\n<li>nexus-releases: 用于发布 Release 版本</li>\n<li>nexus-snapshots: 用于发布 Snapshot 版本（快照版）<br>\nRelease 版本与 Snapshot 定义如下</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- server</span></span><br><span class=\"line\"><span class=\"comment\">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class=\"line\"><span class=\"comment\">     | a unique name within the system (referred to by the 'id' attribute below).</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">     | <span class=\"doctag\">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class=\"line\"><span class=\"comment\">     |       used together.</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发行版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"comment\">&lt;!-- 快照版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"配置自动化部署\">配置自动化部署</span></h2>\n<p><code>pom.xml</code>中添加代码如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus Release Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-releases/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">snapshotRepository</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus Snapshot Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-snapshots/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">snapshotRepository</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/1.png\" alt=\"1\"></p>\n<h3><span id=\"修改私服地址\">修改私服地址</span></h3>\n<p>在nexus中查看地址<br>\n<img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/2.png\" alt=\"2\"></p>\n<h2><span id=\"使用maven打包推送\">使用maven打包推送</span></h2>\n<p><code>mvn deploy</code><br>\n<code>mvn deploy -Dmaven.test.skip=true</code> 去掉测试类</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ziming@Dell17r2 MINGW64 /d/IdeaProjects/tripweb (master)</span><br><span class=\"line\">$ mvn deploy -Dmaven.test.<span class=\"attribute\">skip</span>=<span class=\"literal\">true</span></span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] Scanning <span class=\"keyword\">for</span> projects<span class=\"built_in\">..</span>.</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>]</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] ------------------------------------------------------------------------</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] Building trip-web Maven Webapp 1.0.0-SNAPSHOT</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] ------------------------------------------------------------------------</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>]</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] --- mybatis-generator-maven-plugin:1.3.5:generate (Generate MyBatis Artifacts) @ trip-web ---</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] Connecting <span class=\"keyword\">to</span> the Database</span><br><span class=\"line\">Wed Oct 23 11:20:50 CST 2019 WARN: Establishing SSL<span class=\"built_in\"> connection </span>without server<span class=\"string\">'s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ an</span></span><br><span class=\"line\"><span class=\"string\">d 5.7.6+ requirements SSL connection must be established by default if explicit option isn'</span>t set. <span class=\"keyword\">For</span> compliance with existing applications <span class=\"keyword\">not</span> using SSL the ve</span><br><span class=\"line\">rifyServerCertificate property is <span class=\"builtin-name\">set</span> <span class=\"keyword\">to</span> <span class=\"string\">'false'</span>. You need either <span class=\"keyword\">to</span> explicitly <span class=\"builtin-name\">disable</span> SSL by setting <span class=\"attribute\">useSSL</span>=<span class=\"literal\">false</span>, <span class=\"keyword\">or</span> <span class=\"builtin-name\">set</span> <span class=\"attribute\">useSSL</span>=<span class=\"literal\">true</span> <span class=\"keyword\">and</span> provide truststore f</span><br><span class=\"line\"><span class=\"keyword\">or</span><span class=\"built_in\"> server </span>certificate verification.</span><br></pre></td></tr></table></figure>\n<h3><span id=\"出现错误-not-authorized-reasonphraseunauthorized\">出现错误 Not authorized , ReasonPhrase:Unauthorized</span></h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Final Memory: 28M/378M</span><br><span class=\"line\">[INFO] <span class=\"comment\">------------------------------------------------------------------------</span></span><br><span class=\"line\">[ERROR] Failed to <span class=\"keyword\">execute</span> goal org.apache.maven.plugins:maven-deploy-<span class=\"keyword\">plugin</span>:<span class=\"number\">2.8</span><span class=\"number\">.2</span>:deploy (<span class=\"keyword\">default</span>-deploy) <span class=\"keyword\">on</span> <span class=\"keyword\">project</span> trip-web: <span class=\"keyword\">Failed</span> <span class=\"keyword\">to</span> retrieve remote metadat</span><br><span class=\"line\">a cn.zm:trip-web:<span class=\"number\">1.0</span><span class=\"number\">.0</span>-<span class=\"keyword\">SNAPSHOT</span>/maven-metadata.xml: Could <span class=\"keyword\">not</span> transfer metadata cn.zm:trip-web:<span class=\"number\">1.0</span><span class=\"number\">.0</span>-<span class=\"keyword\">SNAPSHOT</span>/maven-metadata.xml <span class=\"keyword\">from</span>/<span class=\"keyword\">to</span> nexus-snapshots (<span class=\"keyword\">http</span>:/</span><br><span class=\"line\">/<span class=\"number\">116.62</span><span class=\"number\">.110</span><span class=\"number\">.99</span>:<span class=\"number\">8082</span>/repository/maven-snapshots/): <span class=\"keyword\">Not</span> authorized , ReasonPhrase:Unauthorized. -&gt; [<span class=\"keyword\">Help</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] <span class=\"keyword\">To</span> see the <span class=\"keyword\">full</span> stack <span class=\"keyword\">trace</span> <span class=\"keyword\">of</span> the <span class=\"keyword\">errors</span>, re-run Maven <span class=\"keyword\">with</span> the -e switch.</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] Re-run Maven <span class=\"keyword\">using</span> the -X <span class=\"keyword\">switch</span> <span class=\"keyword\">to</span> <span class=\"keyword\">enable</span> <span class=\"keyword\">full</span> debug logging.</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] <span class=\"keyword\">For</span> more information about the <span class=\"keyword\">errors</span> <span class=\"keyword\">and</span> possible solutions, please <span class=\"keyword\">read</span> the <span class=\"keyword\">following</span> articles:</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] [<span class=\"keyword\">Help</span> <span class=\"number\">1</span>] <span class=\"keyword\">http</span>://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/3.png\" alt=\"3\"><br>\n将的 Deployment Policy 修改为 “Allow Redeploy”</p>\n<p><img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/4.png\" alt=\"4\"></p>\n<h3><span id=\"修改pomxml配置\">修改pom.xml配置</span></h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 发行版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--鉴权时使用的私钥密码。--&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">passphrase</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">passphrase</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">filePermissions</span>&gt;</span>664<span class=\"tag\">&lt;/<span class=\"name\">filePermissions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directoryPermissions</span>&gt;</span>775<span class=\"tag\">&lt;/<span class=\"name\">directoryPermissions</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 快照版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--鉴权时使用的私钥密码。--&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">passphrase</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">passphrase</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">filePermissions</span>&gt;</span>664<span class=\"tag\">&lt;/<span class=\"name\">filePermissions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directoryPermissions</span>&gt;</span>775<span class=\"tag\">&lt;/<span class=\"name\">directoryPermissions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Nexus学习3-在项目中使用maven私库</h1>\n<h2>配置Maven的setting.xml文件</h2>\n<h3>Snapshots 与 Releases 的区别</h3>\n<ul>\n<li>nexus-releases: 用于发布 Release 版本</li>\n<li>nexus-snapshots: 用于发布 Snapshot 版本（快照版）<br>\nRelease 版本与 Snapshot 定义如下</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- server</span></span><br><span class=\"line\"><span class=\"comment\">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class=\"line\"><span class=\"comment\">     | a unique name within the system (referred to by the 'id' attribute below).</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">     | <span class=\"doctag\">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class=\"line\"><span class=\"comment\">     |       used together.</span></span><br><span class=\"line\"><span class=\"comment\">     |</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 发行版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"comment\">&lt;!-- 快照版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/server&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>配置自动化部署</h2>\n<p><code>pom.xml</code>中添加代码如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus Release Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-releases/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">snapshotRepository</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus Snapshot Repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-snapshots/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">snapshotRepository</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/1.png\" alt=\"1\"></p>\n<h3>修改私服地址</h3>\n<p>在nexus中查看地址<br>\n<img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/2.png\" alt=\"2\"></p>\n<h2>使用maven打包推送</h2>\n<p><code>mvn deploy</code><br>\n<code>mvn deploy -Dmaven.test.skip=true</code> 去掉测试类</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ziming@Dell17r2 MINGW64 /d/IdeaProjects/tripweb (master)</span><br><span class=\"line\">$ mvn deploy -Dmaven.test.<span class=\"attribute\">skip</span>=<span class=\"literal\">true</span></span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] Scanning <span class=\"keyword\">for</span> projects<span class=\"built_in\">..</span>.</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>]</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] ------------------------------------------------------------------------</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] Building trip-web Maven Webapp 1.0.0-SNAPSHOT</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] ------------------------------------------------------------------------</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>]</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] --- mybatis-generator-maven-plugin:1.3.5:generate (Generate MyBatis Artifacts) @ trip-web ---</span><br><span class=\"line\">[<span class=\"builtin-name\">INFO</span>] Connecting <span class=\"keyword\">to</span> the Database</span><br><span class=\"line\">Wed Oct 23 11:20:50 CST 2019 WARN: Establishing SSL<span class=\"built_in\"> connection </span>without server<span class=\"string\">'s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ an</span></span><br><span class=\"line\"><span class=\"string\">d 5.7.6+ requirements SSL connection must be established by default if explicit option isn'</span>t set. <span class=\"keyword\">For</span> compliance with existing applications <span class=\"keyword\">not</span> using SSL the ve</span><br><span class=\"line\">rifyServerCertificate property is <span class=\"builtin-name\">set</span> <span class=\"keyword\">to</span> <span class=\"string\">'false'</span>. You need either <span class=\"keyword\">to</span> explicitly <span class=\"builtin-name\">disable</span> SSL by setting <span class=\"attribute\">useSSL</span>=<span class=\"literal\">false</span>, <span class=\"keyword\">or</span> <span class=\"builtin-name\">set</span> <span class=\"attribute\">useSSL</span>=<span class=\"literal\">true</span> <span class=\"keyword\">and</span> provide truststore f</span><br><span class=\"line\"><span class=\"keyword\">or</span><span class=\"built_in\"> server </span>certificate verification.</span><br></pre></td></tr></table></figure>\n<h3>出现错误 Not authorized , ReasonPhrase:Unauthorized</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] Final Memory: 28M/378M</span><br><span class=\"line\">[INFO] <span class=\"comment\">------------------------------------------------------------------------</span></span><br><span class=\"line\">[ERROR] Failed to <span class=\"keyword\">execute</span> goal org.apache.maven.plugins:maven-deploy-<span class=\"keyword\">plugin</span>:<span class=\"number\">2.8</span><span class=\"number\">.2</span>:deploy (<span class=\"keyword\">default</span>-deploy) <span class=\"keyword\">on</span> <span class=\"keyword\">project</span> trip-web: <span class=\"keyword\">Failed</span> <span class=\"keyword\">to</span> retrieve remote metadat</span><br><span class=\"line\">a cn.zm:trip-web:<span class=\"number\">1.0</span><span class=\"number\">.0</span>-<span class=\"keyword\">SNAPSHOT</span>/maven-metadata.xml: Could <span class=\"keyword\">not</span> transfer metadata cn.zm:trip-web:<span class=\"number\">1.0</span><span class=\"number\">.0</span>-<span class=\"keyword\">SNAPSHOT</span>/maven-metadata.xml <span class=\"keyword\">from</span>/<span class=\"keyword\">to</span> nexus-snapshots (<span class=\"keyword\">http</span>:/</span><br><span class=\"line\">/<span class=\"number\">116.62</span><span class=\"number\">.110</span><span class=\"number\">.99</span>:<span class=\"number\">8082</span>/repository/maven-snapshots/): <span class=\"keyword\">Not</span> authorized , ReasonPhrase:Unauthorized. -&gt; [<span class=\"keyword\">Help</span> <span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] <span class=\"keyword\">To</span> see the <span class=\"keyword\">full</span> stack <span class=\"keyword\">trace</span> <span class=\"keyword\">of</span> the <span class=\"keyword\">errors</span>, re-run Maven <span class=\"keyword\">with</span> the -e switch.</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] Re-run Maven <span class=\"keyword\">using</span> the -X <span class=\"keyword\">switch</span> <span class=\"keyword\">to</span> <span class=\"keyword\">enable</span> <span class=\"keyword\">full</span> debug logging.</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>]</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] <span class=\"keyword\">For</span> more information about the <span class=\"keyword\">errors</span> <span class=\"keyword\">and</span> possible solutions, please <span class=\"keyword\">read</span> the <span class=\"keyword\">following</span> articles:</span><br><span class=\"line\">[<span class=\"keyword\">ERROR</span>] [<span class=\"keyword\">Help</span> <span class=\"number\">1</span>] <span class=\"keyword\">http</span>://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/3.png\" alt=\"3\"><br>\n将的 Deployment Policy 修改为 “Allow Redeploy”</p>\n<p><img src=\"/2019/10/23/Nexus学习3-在项目中使用maven私库/4.png\" alt=\"4\"></p>\n<h3>修改pom.xml配置</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 发行版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--鉴权时使用的私钥密码。--&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">passphrase</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">passphrase</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">filePermissions</span>&gt;</span>664<span class=\"tag\">&lt;/<span class=\"name\">filePermissions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directoryPermissions</span>&gt;</span>775<span class=\"tag\">&lt;/<span class=\"name\">directoryPermissions</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 快照版本私服仓库 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--鉴权时使用的私钥密码。--&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">passphrase</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">passphrase</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"comment\">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">filePermissions</span>&gt;</span>664<span class=\"tag\">&lt;/<span class=\"name\">filePermissions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">directoryPermissions</span>&gt;</span>775<span class=\"tag\">&lt;/<span class=\"name\">directoryPermissions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2>参考资料</h2>\n<blockquote></blockquote>\n"},{"title":"Vue学习00-Vue学习之前需要了解的知识","catalog":true,"date":"2019-08-15T02:08:34.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 学习之前了解\n\n### 框架和库之间的区别\n- 框架: 是一套完整的解决方案, 对项目的侵入性教大.\n\n- 库(插件): 提供一个小的功能, 对项目侵入性笑.\n\n### 前端知识体系\n- html(结构层) 骨架\n- css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n    - css预处理器\n        - SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.\n        - LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.\n- JavaScript(行为层) 交互: 动起来,行为.\n\n### Native(原生的,本地的)JS开发\n原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n\nECMA欧洲电脑制造商协会（European Computer Manufactures Association）\n\n- ES3\n- ES4（内部，未正式发布）\n- ES5（全浏览器支持）\n- ES6（常用，当前主流版本） 相对于5增加了一些特性\n因为不同的标准所以前端可以使用打包工具来打包\n- ES7\n- ES8\n- ES9（草案阶段）.\n\n### TypeScript 微软的标准\nTypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）\n才能被浏览器正确执行。\n\n### js框架\n- jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；\n- Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；\n最大的缺点是版本迭代不合理（如：1代 -> 2代开发方式完全改变，除了名字，\n基本就是两个东西；截止发表博客时已推出了 Angular6）\n- React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；\n- Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）\n 和 React（虚拟 DOM） 的优点；\n    - SoC 关注度分离原则\n- Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以\n直接选择使用 jQuery 提供的 AJAX 通信功能；\n\n### UI框架\n- Ant-Design：阿里巴巴出品，基于 React 的 UI 框架\n- ElementUI：饿了么出品，基于 Vue 的 UI 框架\n- iview: 基于vue框架\n- ice: 飞冰\n- Bootstrap：Twitter 推出的一个用于前端开发的开源工具包\n- AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错\n\n> 前端一般采用`vue + element`框架\n\n### 工具\n- WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载\n通常前端 开发会用ES6标准写,然后用webpack打包\n- Gulp \n- Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript\n\n## 三端同一\n### 混合开发（Hybrid App）\n\n主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：\n\n.apk这种格式\n\n- 云打包：HBuild -> HBuildX，DCloud 出品；API Cloud\n- 本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台\n\n### 中间件\n软件调用中间件, 中间件调用底层硬件.\n\n### 微信小程序\n详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi\n\n## 当前主流前端框架\n### Vue.js\n### iView\niview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。\n\n官网地址\nGithub\niview-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多\n\n### ElementUI\nElement 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。\n\n官网地址\nGithub\nvue-element-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多\n\n### ICE\n飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。\n\n官网地址\nGithub\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段\n\n### VantUI\nVant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。\n\n官网地址\nGithub\n### AtUI\nat-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。\n\n官网地址\nGithub\n### CubeUI\ncube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。\n\n官网地址\nGithub\n### 混合开发\n### Flutter\nFlutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。\n\n官网地址\nGithub\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架\n\n### Ionic\nIonic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。\n\n官网地址\n官网文档\nGithub\n### 微信小程序\n### mpvue\nmpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。\n\n官网地址\nGithub\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用\n\n### WeUI\nWeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。\n\n官网地址\nGithub\n\n## 后端技术\n前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。\n\nNodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno\n\n既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：\n\n- Express：NodeJS 框架\n- Koa：Express 简化版\n- NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖\n- YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n    - Gradle和maven一样但效率更高\n\n## 前后分离的演变史\n### 为什么需要前后分离\n### 后端为主的 MVC 时代\n为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】\n![](mvc.png)\n\n### 什么是前后分离\n#### 基于 AJAX 带来的 SPA 时代\n时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript\n 和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，\n 于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA\n （Single Page Application）单页面应用时代。\n\n![](web.png)\n\n### 前端为主的 MV* 时代\n此处的 MV* 模式如下：\n\nMVC（同步通信为主）：Model、View、Controller\nMVP（异步通信为主）：Model、View、Presenter\nMVVM（异步通信为主）：Model、View、ViewModel\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、\nControllers、Models，然后再在层内做切分，如下图：\n\n优点\n- 前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。\n- 前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。\n- 部署相对独立： 可以快速改进产品体验\n\n缺点\n- 代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。\n- 全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。\n- 性能并非最佳，特别是移动互联网环境下。\n- SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.\n\n### NodeJS 带来的(前端)全栈时代\n前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：\n\nfront-end -> nodejs -> back-end 实现了真正的前后分离\n\n在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：\n- Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，\nHTML 的生成也可以放在这层，具体看应用场景。\n- Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，\n转而可以专心于业务逻辑层的开发。\n\n**注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。**\n\n## MVVM模式\n什么是 MVVM\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF） \n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的**事件驱动编程方式**。由 John Gossman\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。\n\nMVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）\n 模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，\n 其作用如下：\n\n- 该层向上与视图层进行双向数据绑定\n- 向下与 Model 层通过接口请求进行数据交互\n\n![](mvvm.png)\n\n## 为什么要使用 MVVM\nMVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处\n\n- 低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。\n- 可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。\n- 独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n- 可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。\n\nMVVM 的组成部分\n\n\n### View\nView 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。\n\n### Model\nModel 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则\n\n### ViewModel\nViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。\n\n需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的\n\n比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。\n\n- MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。\n- View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。\n\n### MVVM 模式的实现者\n我们知道MVVM 表示如下：\n\n- Model：模型层，在这里表示 JavaScript 对象\n- View：视图层，在这里表示 DOM（HTML 操作的元素）\n- ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者\n\n![](mvvmVue.png)\n\n在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者\n\n- ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新\n- ViewModel 能够监听到视图的变化，并能够通知数据发生改变\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n\n","source":"_posts/Vue学习00-Vue学习之前需要了解的知识.md","raw":"---\ntitle: Vue学习00-Vue学习之前需要了解的知识\ncatalog: true\ndate: 2019-08-15 10:08:34\nsubtitle:\nheader-img:\ntags: [Vue, webpack, npm]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## 学习之前了解\n\n### 框架和库之间的区别\n- 框架: 是一套完整的解决方案, 对项目的侵入性教大.\n\n- 库(插件): 提供一个小的功能, 对项目侵入性笑.\n\n### 前端知识体系\n- html(结构层) 骨架\n- css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n    - css预处理器\n        - SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.\n        - LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.\n- JavaScript(行为层) 交互: 动起来,行为.\n\n### Native(原生的,本地的)JS开发\n原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n\nECMA欧洲电脑制造商协会（European Computer Manufactures Association）\n\n- ES3\n- ES4（内部，未正式发布）\n- ES5（全浏览器支持）\n- ES6（常用，当前主流版本） 相对于5增加了一些特性\n因为不同的标准所以前端可以使用打包工具来打包\n- ES7\n- ES8\n- ES9（草案阶段）.\n\n### TypeScript 微软的标准\nTypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）\n才能被浏览器正确执行。\n\n### js框架\n- jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；\n- Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；\n最大的缺点是版本迭代不合理（如：1代 -> 2代开发方式完全改变，除了名字，\n基本就是两个东西；截止发表博客时已推出了 Angular6）\n- React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；\n- Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）\n 和 React（虚拟 DOM） 的优点；\n    - SoC 关注度分离原则\n- Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以\n直接选择使用 jQuery 提供的 AJAX 通信功能；\n\n### UI框架\n- Ant-Design：阿里巴巴出品，基于 React 的 UI 框架\n- ElementUI：饿了么出品，基于 Vue 的 UI 框架\n- iview: 基于vue框架\n- ice: 飞冰\n- Bootstrap：Twitter 推出的一个用于前端开发的开源工具包\n- AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错\n\n> 前端一般采用`vue + element`框架\n\n### 工具\n- WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载\n通常前端 开发会用ES6标准写,然后用webpack打包\n- Gulp \n- Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript\n\n## 三端同一\n### 混合开发（Hybrid App）\n\n主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：\n\n.apk这种格式\n\n- 云打包：HBuild -> HBuildX，DCloud 出品；API Cloud\n- 本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台\n\n### 中间件\n软件调用中间件, 中间件调用底层硬件.\n\n### 微信小程序\n详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi\n\n## 当前主流前端框架\n### Vue.js\n### iView\niview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。\n\n官网地址\nGithub\niview-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多\n\n### ElementUI\nElement 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。\n\n官网地址\nGithub\nvue-element-admin\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多\n\n### ICE\n飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。\n\n官网地址\nGithub\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段\n\n### VantUI\nVant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。\n\n官网地址\nGithub\n### AtUI\nat-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。\n\n官网地址\nGithub\n### CubeUI\ncube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。\n\n官网地址\nGithub\n### 混合开发\n### Flutter\nFlutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。\n\n官网地址\nGithub\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架\n\n### Ionic\nIonic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。\n\n官网地址\n官网文档\nGithub\n### 微信小程序\n### mpvue\nmpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。\n\n官网地址\nGithub\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用\n\n### WeUI\nWeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。\n\n官网地址\nGithub\n\n## 后端技术\n前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。\n\nNodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno\n\n既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：\n\n- Express：NodeJS 框架\n- Koa：Express 简化版\n- NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖\n- YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n    - Gradle和maven一样但效率更高\n\n## 前后分离的演变史\n### 为什么需要前后分离\n### 后端为主的 MVC 时代\n为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】\n![](mvc.png)\n\n### 什么是前后分离\n#### 基于 AJAX 带来的 SPA 时代\n时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript\n 和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，\n 于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA\n （Single Page Application）单页面应用时代。\n\n![](web.png)\n\n### 前端为主的 MV* 时代\n此处的 MV* 模式如下：\n\nMVC（同步通信为主）：Model、View、Controller\nMVP（异步通信为主）：Model、View、Presenter\nMVVM（异步通信为主）：Model、View、ViewModel\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、\nControllers、Models，然后再在层内做切分，如下图：\n\n优点\n- 前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。\n- 前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。\n- 部署相对独立： 可以快速改进产品体验\n\n缺点\n- 代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。\n- 全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。\n- 性能并非最佳，特别是移动互联网环境下。\n- SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.\n\n### NodeJS 带来的(前端)全栈时代\n前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：\n\nfront-end -> nodejs -> back-end 实现了真正的前后分离\n\n在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：\n- Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，\nHTML 的生成也可以放在这层，具体看应用场景。\n- Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，\n转而可以专心于业务逻辑层的开发。\n\n**注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。**\n\n## MVVM模式\n什么是 MVVM\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF） \n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的**事件驱动编程方式**。由 John Gossman\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。\n\nMVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）\n 模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，\n 其作用如下：\n\n- 该层向上与视图层进行双向数据绑定\n- 向下与 Model 层通过接口请求进行数据交互\n\n![](mvvm.png)\n\n## 为什么要使用 MVVM\nMVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处\n\n- 低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。\n- 可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。\n- 独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。\n- 可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。\n\nMVVM 的组成部分\n\n\n### View\nView 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。\n\n### Model\nModel 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则\n\n### ViewModel\nViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。\n\n需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的\n\n比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。\n\n- MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。\n- View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。\n\n### MVVM 模式的实现者\n我们知道MVVM 表示如下：\n\n- Model：模型层，在这里表示 JavaScript 对象\n- View：视图层，在这里表示 DOM（HTML 操作的元素）\n- ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者\n\n![](mvvmVue.png)\n\n在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者\n\n- ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新\n- ViewModel 能够监听到视图的变化，并能够通知数据发生改变\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n\n","slug":"Vue学习00-Vue学习之前需要了解的知识","published":1,"updated":"2021-04-20T13:28:10.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2n0020zgl1hpvtvpg4","content":"<h1><span id=\"vue学习记录\">Vue学习记录</span></h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2><span id=\"学习之前了解\">学习之前了解</span></h2>\n<h3><span id=\"框架和库之间的区别\">框架和库之间的区别</span></h3>\n<ul>\n<li>\n<p>框架: 是一套完整的解决方案, 对项目的侵入性教大.</p>\n</li>\n<li>\n<p>库(插件): 提供一个小的功能, 对项目侵入性笑.</p>\n</li>\n</ul>\n<h3><span id=\"前端知识体系\">前端知识体系</span></h3>\n<ul>\n<li>html(结构层) 骨架</li>\n<li>css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n<ul>\n<li>css预处理器\n<ul>\n<li>SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.</li>\n<li>LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JavaScript(行为层) 交互: 动起来,行为.</li>\n</ul>\n<h3><span id=\"native原生的本地的js开发\">Native(原生的,本地的)JS开发</span></h3>\n<p>原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：</p>\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n<p>ECMA欧洲电脑制造商协会（European Computer Manufactures Association）</p>\n<ul>\n<li>ES3</li>\n<li>ES4（内部，未正式发布）</li>\n<li>ES5（全浏览器支持）</li>\n<li>ES6（常用，当前主流版本） 相对于5增加了一些特性<br>\n因为不同的标准所以前端可以使用打包工具来打包</li>\n<li>ES7</li>\n<li>ES8</li>\n<li>ES9（草案阶段）.</li>\n</ul>\n<h3><span id=\"typescript-微软的标准\">TypeScript 微软的标准</span></h3>\n<p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，<br>\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格<br>\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。<br>\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，<br>\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）<br>\n才能被浏览器正确执行。</p>\n<h3><span id=\"js框架\">js框架</span></h3>\n<ul>\n<li>jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，<br>\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；</li>\n<li>Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点<br>\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，<br>\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；<br>\n最大的缺点是版本迭代不合理（如：1代 -&gt; 2代开发方式完全改变，除了名字，<br>\n基本就是两个东西；截止发表博客时已推出了 Angular6）</li>\n<li>React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了<br>\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，<br>\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；</li>\n<li>Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，<br>\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）<br>\n和 React（虚拟 DOM） 的优点；\n<ul>\n<li>SoC 关注度分离原则</li>\n</ul>\n</li>\n<li>Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并<br>\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以<br>\n直接选择使用 jQuery 提供的 AJAX 通信功能；</li>\n</ul>\n<h3><span id=\"ui框架\">UI框架</span></h3>\n<ul>\n<li>Ant-Design：阿里巴巴出品，基于 React 的 UI 框架</li>\n<li>ElementUI：饿了么出品，基于 Vue 的 UI 框架</li>\n<li>iview: 基于vue框架</li>\n<li>ice: 飞冰</li>\n<li>Bootstrap：Twitter 推出的一个用于前端开发的开源工具包</li>\n<li>AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错</li>\n</ul>\n<blockquote>\n<p>前端一般采用<code>vue + element</code>框架</p>\n</blockquote>\n<h3><span id=\"工具\">工具</span></h3>\n<ul>\n<li>WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载<br>\n通常前端 开发会用ES6标准写,然后用webpack打包</li>\n<li>Gulp</li>\n<li>Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript</li>\n</ul>\n<h2><span id=\"三端同一\">三端同一</span></h2>\n<h3><span id=\"混合开发hybrid-app\">混合开发（Hybrid App）</span></h3>\n<p>主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p>\n<p>.apk这种格式</p>\n<ul>\n<li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li>\n<li>本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台</li>\n</ul>\n<h3><span id=\"中间件\">中间件</span></h3>\n<p>软件调用中间件, 中间件调用底层硬件.</p>\n<h3><span id=\"微信小程序\">微信小程序</span></h3>\n<p>详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi</p>\n<h2><span id=\"当前主流前端框架\">当前主流前端框架</span></h2>\n<h3><span id=\"vuejs\">Vue.js</span></h3>\n<h3><span id=\"iview\">iView</span></h3>\n<p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。</p>\n<p>官网地址<br>\nGithub<br>\niview-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</p>\n<h3><span id=\"elementui\">ElementUI</span></h3>\n<p>Element 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。</p>\n<p>官网地址<br>\nGithub<br>\nvue-element-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多</p>\n<h3><span id=\"ice\">ICE</span></h3>\n<p>飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。</p>\n<p>官网地址<br>\nGithub<br>\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段</p>\n<h3><span id=\"vantui\">VantUI</span></h3>\n<p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。</p>\n<p>官网地址<br>\nGithub</p>\n<h3><span id=\"atui\">AtUI</span></h3>\n<p>at-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。</p>\n<p>官网地址<br>\nGithub</p>\n<h3><span id=\"cubeui\">CubeUI</span></h3>\n<p>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p>\n<p>官网地址<br>\nGithub</p>\n<h3><span id=\"混合开发\">混合开发</span></h3>\n<h3><span id=\"flutter\">Flutter</span></h3>\n<p>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。</p>\n<p>官网地址<br>\nGithub<br>\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架</p>\n<h3><span id=\"ionic\">Ionic</span></h3>\n<p>Ionic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。</p>\n<p>官网地址<br>\n官网文档<br>\nGithub</p>\n<h3><span id=\"微信小程序\">微信小程序</span></h3>\n<h3><span id=\"mpvue\">mpvue</span></h3>\n<p>mpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。</p>\n<p>官网地址<br>\nGithub<br>\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</p>\n<h3><span id=\"weui\">WeUI</span></h3>\n<p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。</p>\n<p>官网地址<br>\nGithub</p>\n<h2><span id=\"后端技术\">后端技术</span></h2>\n<p>前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。</p>\n<p>NodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno</p>\n<p>既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：</p>\n<ul>\n<li>Express：NodeJS 框架</li>\n<li>Koa：Express 简化版</li>\n<li>NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖</li>\n<li>YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n<ul>\n<li>Gradle和maven一样但效率更高</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"前后分离的演变史\">前后分离的演变史</span></h2>\n<h3><span id=\"为什么需要前后分离\">为什么需要前后分离</span></h3>\n<h3><span id=\"后端为主的-mvc-时代\">后端为主的 MVC 时代</span></h3>\n<p>为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，<br>\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】<br>\n<img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvc.png\" alt></p>\n<h3><span id=\"什么是前后分离\">什么是前后分离</span></h3>\n<h4><span id=\"基于-ajax-带来的-spa-时代\">基于 AJAX 带来的 SPA 时代</span></h4>\n<p>时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript<br>\n和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，<br>\n于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA<br>\n（Single Page Application）单页面应用时代。</p>\n<p><img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/web.png\" alt></p>\n<h3><span id=\"前端为主的-mv-时代\">前端为主的 MV* 时代</span></h3>\n<p>此处的 MV* 模式如下：</p>\n<p>MVC（同步通信为主）：Model、View、Controller<br>\nMVP（异步通信为主）：Model、View、Presenter<br>\nMVVM（异步通信为主）：Model、View、ViewModel<br>\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、<br>\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、<br>\nControllers、Models，然后再在层内做切分，如下图：</p>\n<p>优点</p>\n<ul>\n<li>前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。</li>\n<li>前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。</li>\n<li>部署相对独立： 可以快速改进产品体验</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li>\n<li>全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。</li>\n<li>性能并非最佳，特别是移动互联网环境下。</li>\n<li>SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.</li>\n</ul>\n<h3><span id=\"nodejs-带来的前端全栈时代\">NodeJS 带来的(前端)全栈时代</span></h3>\n<p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，<br>\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p>\n<p>front-end -&gt; nodejs -&gt; back-end 实现了真正的前后分离</p>\n<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p>\n<ul>\n<li>Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，<br>\nHTML 的生成也可以放在这层，具体看应用场景。</li>\n<li>Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，<br>\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，<br>\n转而可以专心于业务逻辑层的开发。</li>\n</ul>\n<p><strong>注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学<br>\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。</strong></p>\n<h2><span id=\"mvvm模式\">MVVM模式</span></h2>\n<p>什么是 MVVM<br>\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个<br>\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF）<br>\n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由 John Gossman<br>\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。</p>\n<p>MVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）<br>\n模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，<br>\n其作用如下：</p>\n<ul>\n<li>该层向上与视图层进行双向数据绑定</li>\n<li>向下与 Model 层通过接口请求进行数据交互</li>\n</ul>\n<p><img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvvm.png\" alt></p>\n<h2><span id=\"为什么要使用-mvvm\">为什么要使用 MVVM</span></h2>\n<p>MVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p>\n<ul>\n<li>低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，<br>\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>\n<li>可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>\n<li>独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li>\n</ul>\n<p>MVVM 的组成部分</p>\n<h3><span id=\"view\">View</span></h3>\n<p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。</p>\n<h3><span id=\"model\">Model</span></h3>\n<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则</p>\n<h3><span id=\"viewmodel\">ViewModel</span></h3>\n<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p>\n<p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的</p>\n<p>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）<br>\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）<br>\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。</p>\n<ul>\n<li>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。</li>\n<li>View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</li>\n</ul>\n<h3><span id=\"mvvm-模式的实现者\">MVVM 模式的实现者</span></h3>\n<p>我们知道MVVM 表示如下：</p>\n<ul>\n<li>Model：模型层，在这里表示 JavaScript 对象</li>\n<li>View：视图层，在这里表示 DOM（HTML 操作的元素）</li>\n<li>ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者</li>\n</ul>\n<p><img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvvmVue.png\" alt></p>\n<p>在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者</p>\n<ul>\n<li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li>\n<li>ViewModel 能够监听到视图的变化，并能够通知数据发生改变<br>\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定</li>\n</ul>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>学习之前了解</h2>\n<h3>框架和库之间的区别</h3>\n<ul>\n<li>\n<p>框架: 是一套完整的解决方案, 对项目的侵入性教大.</p>\n</li>\n<li>\n<p>库(插件): 提供一个小的功能, 对项目侵入性笑.</p>\n</li>\n</ul>\n<h3>前端知识体系</h3>\n<ul>\n<li>html(结构层) 骨架</li>\n<li>css(表现层) 特效: 缺陷标记语言,没有变量.没一个特效需要一个css标记.\n<ul>\n<li>css预处理器\n<ul>\n<li>SASS: 基于Ruby, 基于服务器端处理,功能强大,解析高,上手难度高于LESS.</li>\n<li>LESS: 基于NodeJS,通过客户端处理,使用简单,功能比SASS简单,解析效率也低于SASS.如果后端人员学习可以使用LESS.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JavaScript(行为层) 交互: 动起来,行为.</li>\n</ul>\n<h3>Native(原生的,本地的)JS开发</h3>\n<p>原生JS开发，也就是让我们按照 【ECMAScript】 标准的开发方式，简称是 ES，特点是所有浏览器都支持。截止到当前博客发布时间（2018 年 12 月 04 日），ES 标准已发布如下版本：</p>\n<div id=\"app\"></div>\n$(\"#app\") jquery的语法\n.append往DOM追加元素\n(原生的)document.getElementById(\"app\") 获取dom节点\n<p>ECMA欧洲电脑制造商协会（European Computer Manufactures Association）</p>\n<ul>\n<li>ES3</li>\n<li>ES4（内部，未正式发布）</li>\n<li>ES5（全浏览器支持）</li>\n<li>ES6（常用，当前主流版本） 相对于5增加了一些特性<br>\n因为不同的标准所以前端可以使用打包工具来打包</li>\n<li>ES7</li>\n<li>ES8</li>\n<li>ES9（草案阶段）.</li>\n</ul>\n<h3>TypeScript 微软的标准</h3>\n<p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，<br>\n而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格<br>\n（C#、Delphi、TypeScript 之父；.NET 创立者）主导。<br>\n该语言的特点就是除了具备 ES 的特性之外还纳入了许多不在标准范围内的新特性，<br>\n所以会导致很多浏览器不能直接支持 TypeScript 语法，需要编译后（编译成 JS）<br>\n才能被浏览器正确执行。</p>\n<h3>js框架</h3>\n<ul>\n<li>jQuery：大家熟知的 JavaScript 框架，优点是简化了 DOM 操作，<br>\n缺点是 DOM 操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容 IE6、7、8；</li>\n<li>Angular：Google 收购的前端框架，由一群 Java 程序员开发，其特点<br>\n是将后台的 MVC 模式搬到了前端并增加了模块化开发的理念，与微软合作，<br>\n采用 TypeScript 语法开发；对后台程序员友好，对前端程序员不太友好；<br>\n最大的缺点是版本迭代不合理（如：1代 -&gt; 2代开发方式完全改变，除了名字，<br>\n基本就是两个东西；截止发表博客时已推出了 Angular6）</li>\n<li>React：Facebook 出品，一款高性能的 JS 前端框架；特点是提出了<br>\n新概念 【虚拟 DOM】 用于减少真实 DOM 操作，在内存中模拟 DOM 操作，<br>\n有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门 【JSX】 语言；</li>\n<li>Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，<br>\n如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）<br>\n和 React（虚拟 DOM） 的优点；\n<ul>\n<li>SoC 关注度分离原则</li>\n</ul>\n</li>\n<li>Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并<br>\n不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以<br>\n直接选择使用 jQuery 提供的 AJAX 通信功能；</li>\n</ul>\n<h3>UI框架</h3>\n<ul>\n<li>Ant-Design：阿里巴巴出品，基于 React 的 UI 框架</li>\n<li>ElementUI：饿了么出品，基于 Vue 的 UI 框架</li>\n<li>iview: 基于vue框架</li>\n<li>ice: 飞冰</li>\n<li>Bootstrap：Twitter 推出的一个用于前端开发的开源工具包</li>\n<li>AmazeUI：又叫“妹子 UI”，一款 HTML5 跨屏前端框架,也不错</li>\n</ul>\n<blockquote>\n<p>前端一般采用<code>vue + element</code>框架</p>\n</blockquote>\n<h3>工具</h3>\n<ul>\n<li>WebPack 前端打包工具:可将ES6的新特性转换成ES5语法. 模块打包器，主要作用是打包、压缩、合并及按序加载<br>\n通常前端 开发会用ES6标准写,然后用webpack打包</li>\n<li>Gulp</li>\n<li>Babel JS 编译工具，主要用于浏览器不支持的 ES 新特性，比如用于编译 TypeScript</li>\n</ul>\n<h2>三端同一</h2>\n<h3>混合开发（Hybrid App）</h3>\n<p>主要目的是实现一套代码三端统一（PC、Android、iOS）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p>\n<p>.apk这种格式</p>\n<ul>\n<li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li>\n<li>本地打包：需要搭建环境 Cordova（前身是 PhoneGap） 打包苹果的需要在ios平台</li>\n</ul>\n<h3>中间件</h3>\n<p>软件调用中间件, 中间件调用底层硬件.</p>\n<h3>微信小程序</h3>\n<p>详见微信官网，这里就是介绍一个方便微信小程序 UI 开发的框架：WeUi</p>\n<h2>当前主流前端框架</h2>\n<h3>Vue.js</h3>\n<h3>iView</h3>\n<p>iview 是一个强大的基于 Vue 的 UI 库，有很多实用的基础组件比 elementui 的组件更丰富，主要服务于 PC 界面的中后台产品。使用单文件的 Vue 组件化开发模式 基于 npm + webpack + babel 开发，支持 ES2015 高质量、功能丰富 友好的 API ，自由灵活地使用空间。</p>\n<p>官网地址<br>\nGithub<br>\niview-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</p>\n<h3>ElementUI</h3>\n<p>Element 是饿了么前端开源维护的 Vue UI 组件库，组件齐全，基本涵盖后台所需的所有组件，文档讲解详细，例子也很丰富。主要用于开发 PC 端的页面，是一个质量比较高的 Vue UI 组件库。</p>\n<p>官网地址<br>\nGithub<br>\nvue-element-admin<br>\n备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多</p>\n<h3>ICE</h3>\n<p>飞冰是阿里巴巴团队基于 React/Angular/Vue 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。</p>\n<p>官网地址<br>\nGithub<br>\n备注：主要组件还是以 React 为主，截止 2019 年 02 月 17 日更新博客前对 Vue 的支持还不太完善，目前尚处于观望阶段</p>\n<h3>VantUI</h3>\n<p>Vant UI 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。通过 Vant，可以快速搭建出风格统一的页面，提升开发效率。</p>\n<p>官网地址<br>\nGithub</p>\n<h3>AtUI</h3>\n<p>at-ui 是一款基于 Vue 2.x 的前端 UI 组件库，主要用于快速开发 PC 网站产品。 它提供了一套 npm + webpack + babel 前端开发工作流程，CSS 样式独立，即使采用不同的框架实现都能保持统一的 UI 风格。</p>\n<p>官网地址<br>\nGithub</p>\n<h3>CubeUI</h3>\n<p>cube-ui 是滴滴团队开发的基于 Vue.js 实现的精致移动端组件库。支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p>\n<p>官网地址<br>\nGithub</p>\n<h3>混合开发</h3>\n<h3>Flutter</h3>\n<p>Flutter 是谷歌的移动端 UI 框架，可在极短的时间内构建 Android 和 iOS 上高质量的原生级应用。Flutter 可与现有代码一起工作, 它被世界各地的开发者和组织使用, 并且 Flutter 是免费和开源的。</p>\n<p>官网地址<br>\nGithub<br>\n备注：Google 出品，主要特点是快速构建原生 APP 应用程序，如做混合应用该框架为必选框架</p>\n<h3>Ionic</h3>\n<p>Ionic 既是一个 CSS 框架也是一个 Javascript UI 库，Ionic 是目前最有潜力的一款 HTML5 手机应用开发框架。通过 SASS 构建应用程序，它提供了很多 UI 组件来帮助开发者开发强大的应用。它使用 JavaScript MVVM 框架和 AngularJS/Vue 来增强应用。提供数据的双向绑定，使用它成为 Web 和移动开发者的共同选择。</p>\n<p>官网地址<br>\n官网文档<br>\nGithub</p>\n<h3>微信小程序</h3>\n<h3>mpvue</h3>\n<p>mpvue 是美团开发的一个使用 Vue.js 开发小程序的前端框架，目前支持 微信小程序、百度智能小程序，头条小程序 和 支付宝小程序。 框架基于 Vue.js，修改了的运行时框架 runtime 和代码编译器 compiler 实现，使其可运行在小程序环境中，从而为小程序开发引入了 Vue.js 开发体验。</p>\n<p>官网地址<br>\nGithub<br>\n备注：完备的 Vue 开发体验，并且支持多平台的小程序开发，推荐使用</p>\n<h3>WeUI</h3>\n<p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。包含 button、cell、dialog、toast、article、icon 等各式元素。</p>\n<p>官网地址<br>\nGithub</p>\n<h2>后端技术</h2>\n<p>前端人员为了方便开发也需要掌握一定的后端技术，但我们 Java 后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了 NodeJS 这样的技术。</p>\n<p>NodeJS 的作者已经声称放弃 NodeJS（说是架构做的不好再加上笨重的 node_modules，可能让作者不爽了吧），开始开发全新架构的 Deno</p>\n<p>既然是后台技术，那肯定也需要框架和项目管理工具，NodeJS 框架及项目管理工具如下：</p>\n<ul>\n<li>Express：NodeJS 框架</li>\n<li>Koa：Express 简化版</li>\n<li>NPM：项目综合管理工具，类似于 Maven 编译打包运行下载依赖,js依赖</li>\n<li>YARN：NPM 的替代方案，类似于 Maven 和 Gradle 的关系\n<ul>\n<li>Gradle和maven一样但效率更高</li>\n</ul>\n</li>\n</ul>\n<h2>前后分离的演变史</h2>\n<h3>为什么需要前后分离</h3>\n<h3>后端为主的 MVC 时代</h3>\n<p>为了降低开发的复杂度，以后端为出发点，比如：Struts、SpringMVC 等框架的使用，<br>\n就是后端的 MVC 时代;可以参考 【什么是 MVC 模式】<br>\n<img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvc.png\" alt></p>\n<h3>什么是前后分离</h3>\n<h4>基于 AJAX 带来的 SPA 时代</h4>\n<p>时间回到 2005 年 AJAX（Asynchronous JavaScript And XML，异步 JavaScript<br>\n和 XML，老技术新用法） 被正式提出并开始使用 CDN 作为静态资源存储，<br>\n于是出现了 JavaScript 王者归来（在这之前 JS 都是用来在网页上贴狗皮膏药广告的）的 SPA<br>\n（Single Page Application）单页面应用时代。</p>\n<p><img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/web.png\" alt></p>\n<h3>前端为主的 MV* 时代</h3>\n<p>此处的 MV* 模式如下：</p>\n<p>MVC（同步通信为主）：Model、View、Controller<br>\nMVP（异步通信为主）：Model、View、Presenter<br>\nMVVM（异步通信为主）：Model、View、ViewModel<br>\n为了降低前端开发复杂度，涌现了大量的前端框架，比如：AngularJS、React、<br>\nVue.js、EmberJS 等，这些框架总的原则是先按类型分层，比如 Templates、<br>\nControllers、Models，然后再在层内做切分，如下图：</p>\n<p>优点</p>\n<ul>\n<li>前后端职责很清晰： 前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难，前端可以本地开发。后端则可以专注于业务逻辑的处理，输出 RESTful（可以参考 【如何设计一个良好的 API】）等接口。</li>\n<li>前端开发的复杂度可控： 前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。</li>\n<li>部署相对独立： 可以快速改进产品体验</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li>\n<li>全异步，对 SEO 不利。往往还需要服务端做同步渲染的降级方案。</li>\n<li>性能并非最佳，特别是移动互联网环境下。</li>\n<li>SPA 不能满足所有需求，依旧存在大量多页面应用。URL Design 需要后端配合，前端无法完全掌控.</li>\n</ul>\n<h3>NodeJS 带来的(前端)全栈时代</h3>\n<p>前端为主的 MV* 模式解决了很多很多问题，但如上所述，依旧存在不少不足之处。随着 NodeJS 的兴起，<br>\nJavaScript 开始有能力运行在服务端。这意味着可以有一种新的研发模式：</p>\n<p>front-end -&gt; nodejs -&gt; back-end 实现了真正的前后分离</p>\n<p>在这种研发模式下，前后端的职责很清晰。对前端来说，两个 UI 层各司其职：</p>\n<ul>\n<li>Front-end UI layer 处理浏览器层的展现逻辑。通过 CSS 渲染样式，通过 JavaScript 添加交互功能，<br>\nHTML 的生成也可以放在这层，具体看应用场景。</li>\n<li>Back-end UI layer 处理路由、模板、数据获取、Cookie 等。通过路由，前端终于可以自主把控 URL Design，<br>\n这样无论是单页面应用还是多页面应用，前端都可以自由调控。后端也终于可以摆脱对展现的强关注，<br>\n转而可以专心于业务逻辑层的开发。</li>\n</ul>\n<p><strong>注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学<br>\n任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。</strong></p>\n<h2>MVVM模式</h2>\n<p>什么是 MVVM<br>\nMVVM（Model-View-ViewModel）是一种软件架构设计模式，由微软 WPF（用于替代 WinForm，以前就是用这个<br>\n技术开发桌面应用程序的）和 Silverlight（类似于 Java Applet，简单点说就是在浏览器上运行的 WPF）<br>\n的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由 John Gossman<br>\n（同样也是 WPF 和 Silverlight 的架构师）于 2005 年在他的博客上发表。</p>\n<p>MVVM 源自于经典的 MVC（Model-View-Controller）模式（期间还演化出了 MVP（Model-View-Presenter）<br>\n模式）。MVVM 的核心是 ViewModel 层，负责转换 Model 中的数据对象来让数据变得更容易管理和使用，<br>\n其作用如下：</p>\n<ul>\n<li>该层向上与视图层进行双向数据绑定</li>\n<li>向下与 Model 层通过接口请求进行数据交互</li>\n</ul>\n<p><img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvvm.png\" alt></p>\n<h2>为什么要使用 MVVM</h2>\n<p>MVVM 模式和 MVC 模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p>\n<ul>\n<li>低耦合： 视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，<br>\n当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>\n<li>可复用： 你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 View 重用这段视图逻辑。</li>\n<li>独立开发： 开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计。</li>\n<li>可测试： 界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li>\n</ul>\n<p>MVVM 的组成部分</p>\n<h3>View</h3>\n<p>View 是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建，为了更方便地展现 ViewModel 或者 Model 层的数据，已经产生了各种各样的前后端模板语言，比如 FreeMarker、Thymeleaf 等等，各大 MVVM 框架如 Vue.js，AngularJS，EJS 等也都有自己用来构建用户界面的内置模板语言。</p>\n<h3>Model</h3>\n<p>Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的 接口规则</p>\n<h3>ViewModel</h3>\n<p>ViewModel 是由前端开发人员组织生成和维护的视图数据层。在这一层，前端开发者对从后端获取的 Model 数据进行转换处理，做二次封装，以生成符合 View 层使用预期的视图数据模型。</p>\n<p>需要注意的是 ViewModel 所封装出来的数据模型包括视图的状态和行为两部分，而 Model 层的数据模型是只包含状态的</p>\n<p>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态（展示）<br>\n页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为（交互）<br>\n视图状态和行为都封装在了 ViewModel 里。这样的封装使得 ViewModel 可以完整地去描述 View 层`。由于实现了双向绑定，ViewModel 的内容会实时展现在 View 层，这是激动人心的，因为前端开发者再也不必低效又麻烦地通过操纵 DOM 去更新视图。</p>\n<ul>\n<li>MVVM 框架已经把最脏最累的一块做好了，我们开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新，真正实现 事件驱动编程。</li>\n<li>View 层展现的不是 Model 层的数据，而是 ViewModel 的数据，由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</li>\n</ul>\n<h3>MVVM 模式的实现者</h3>\n<p>我们知道MVVM 表示如下：</p>\n<ul>\n<li>Model：模型层，在这里表示 JavaScript 对象</li>\n<li>View：视图层，在这里表示 DOM（HTML 操作的元素）</li>\n<li>ViewModel：连接视图和数据的中间件，Vue.js 就是 MVVM 中的 ViewModel 层的实现者</li>\n</ul>\n<p><img src=\"/2019/08/15/Vue学习00-Vue学习之前需要了解的知识/mvvmVue.png\" alt></p>\n<p>在 MVVM 架构中，是不允许 数据 和 视图 直接通信的，只能通过 ViewModel 来通信，而 ViewModel 就是定义了一个 Observer 观察者</p>\n<ul>\n<li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li>\n<li>ViewModel 能够监听到视图的变化，并能够通知数据发生改变<br>\n至此，我们就明白了，Vue.js 就是一个 MVVM 的实现者，他的核心就是实现了 DOM 监听 与 数据绑定</li>\n</ul>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"VMware虚拟工作站1-安装与使用Linux篇1","catalog":true,"date":"2019-10-24T05:48:33.000Z","subtitle":null,"header-img":null,"_content":"# VMware虚拟工作站1-安装与使用Linux篇1\n## 安装VMware\n- 下载\n    - VMwareworkstation64_15.1.0-13591040\n    - ubuntu-18.04.2-live-server-amd64.iso\n\n将VMware安装好\n## 创建虚拟机\n1. 点击创建虚拟机![1](VMware虚拟工作站1-安装与使用Linux篇1/1.png)\n2. 点击自定义高级，然后下一步![2](VMware虚拟工作站1-安装与使用Linux篇1/2.png)\n3. 硬件界面默认，点击下一步![3](VMware虚拟工作站1-安装与使用Linux篇1/3.png)\n4. 新建虚拟机向导，选择稍后安装操作系统![4](VMware虚拟工作站1-安装与使用Linux篇1/4.png)\n    如果这里选择光盘镜像会自动帮你安装，自动安装的会出问题。\n5. 选择安装系统下一步，我的是64位下载的ubuntu发行版64![5](VMware虚拟工作站1-安装与使用Linux篇1/5.png)\n6. 命名虚拟机的名字，然后在磁盘选择一个文件夹放置，然后下一步![6](VMware虚拟工作站1-安装与使用Linux篇1/6.png)\n7. 选择处理器的数量，虚拟的![7](VMware虚拟工作站1-安装与使用Linux篇1/7.png)\n8. 内存设置，虚拟的，我选的6GB![8](VMware虚拟工作站1-安装与使用Linux篇1/8.png)\n9. 网络选择NAT![9](VMware虚拟工作站1-安装与使用Linux篇1/9.png)\n10. I/O控制器，选择logic![10](VMware虚拟工作站1-安装与使用Linux篇1/10.png)\n11. 硬盘类型，scsi![11](VMware虚拟工作站1-安装与使用Linux篇1/11.png)\n12. 创建新虚拟磁盘，20G就够了![12](VMware虚拟工作站1-安装与使用Linux篇1/12.png)\n\n拆分成多个以后创建虚拟机后，不会直接占用20GB空间，随着虚拟机内容变多后，所占内容会才会慢慢把空间扩大。\n\n![13](VMware虚拟工作站1-安装与使用Linux篇1/13.png)\n\n下一步\n![14](VMware虚拟工作站1-安装与使用Linux篇1/14.png)\n\n13. 浏览创建参数\n![15](VMware虚拟工作站1-安装与使用Linux篇1/15.png)\n14. 点击完成后\n![16](VMware虚拟工作站1-安装与使用Linux篇1/16.png)\n\n## 启动ubuntu虚拟机\n- 点击运行启动，出现弹框，点击确定。\n![17](VMware虚拟工作站1-安装与使用Linux篇1/17.png)\n- 因为没有插光驱，所以显示没有\n![18](VMware虚拟工作站1-安装与使用Linux篇1/18.png)\n- 点击停止，然后编辑虚拟机\n![19](VMware虚拟工作站1-安装与使用Linux篇1/19.png)![20](VMware虚拟工作站1-安装与使用Linux篇1/20.png)\n- 弹出对话框，然后选择CD/DVD\n![21](VMware虚拟工作站1-安装与使用Linux篇1/21.png)\n- 将iso文件导入后启动Ubuntu\n![22](VMware虚拟工作站1-安装与使用Linux篇1/22.png)![23](VMware虚拟工作站1-安装与使用Linux篇1/23.png)\n- 启动加载ubuntu\n![24](VMware虚拟工作站1-安装与使用Linux篇1/24.png)\n- 语言选择,选择english,为防止字符编码bug\n![25](VMware虚拟工作站1-安装与使用Linux篇1/25.png)![26](VMware虚拟工作站1-安装与使用Linux篇1/26.png)\n- 选择install ubuntu\n![27](VMware虚拟工作站1-安装与使用Linux篇1/27.png)\n- 网络设置这里我选择DHCP自动分配\n![28](VMware虚拟工作站1-安装与使用Linux篇1/28.png)![29](VMware虚拟工作站1-安装与使用Linux篇1/29.png)![30](VMware虚拟工作站1-安装与使用Linux篇1/30.png)\n- 选择代理,直接选DONE\n![31](VMware虚拟工作站1-安装与使用Linux篇1/31.png)\n- 选择镜像地址,这里选择阿里云镜像,后面系统会安装东西.这样会快些.\n`http://mirrors.aliyun.com/ubuntu`\n![32](VMware虚拟工作站1-安装与使用Linux篇1/32.png)\n- 磁盘挂载,我选择的LVM\n    - Use An entire Disk-使用整个磁盘\n    - Use An Entire Disk And Set Up LVM-使用整个磁盘并设置\n    - Manual-手动\n    - Back-返回\nLVM是磁盘扩容技术，一定要选择LVM\n    500GB C /path\n    500GB D /path\n    如果没有需那种LVM那么扩容以后无法合并挂载点\n![33](VMware虚拟工作站1-安装与使用Linux篇1/33.png)![34](VMware虚拟工作站1-安装与使用Linux篇1/34.png)\n- Filesystem setup   文件系统设置\n    - FILE SYSTEM SUMMARY    文件系统摘要\n    - No disk or partitions mounted   未安装磁盘或分区\n    - AVAILABLE DEVICES  可用设备\n    ![35](VMware虚拟工作站1-安装与使用Linux篇1/35.png)![36](VMware虚拟工作站1-安装与使用Linux篇1/36.png)\n- 设置用户名,服务器名称\n![37](VMware虚拟工作站1-安装与使用Linux篇1/37.png)![38](VMware虚拟工作站1-安装与使用Linux篇1/38.png)\n- 默认安装openssh\n![39](VMware虚拟工作站1-安装与使用Linux篇1/39.png)\n- 默认安装插件,不安装\n![40](VMware虚拟工作站1-安装与使用Linux篇1/40.PNG)\n- 选择重启\n接着是一个安装过程，请耐心等待，安装完成后会在 [View full log] 按钮下多出一个 [Reboot Now] 按钮。\n![41](VMware虚拟工作站1-安装与使用Linux篇1/41.png)![42](VMware虚拟工作站1-安装与使用Linux篇1/42.png)\n\n## 成功启动\n![43](VMware虚拟工作站1-安装与使用Linux篇1/43.png)\n\n## Ubuntu server 设置 root 密码\nubuntu server 安装的时候要你新建一个用户，安装完成后，你需要手动开启 root。\n`sudo passwd root`\n根据提示依次输入:\n1. 输入你当前用户的密码\n2. 输入你希望的 root 用户的密码\n3. 确认密码\n\n设置完成。\n\n## 安装ssh\n### 检查软件是否安装\n~~~\napt-cache policy openssh-client openssh-server\n~~~\n### 安装服务端\n~~~\napt-get install openssh-server\n~~~\n### 安装客户端\n~~~\napt-get install openssh-client\n~~~\n\n应该是sshd的设置不允许root用户用密码远程登录\n\n1. 修改 vim /etc/ssh/sshd_config\n\n找到# Authentication:\n~~~\nLoginGraceTime 120\nPermitRootLogin without passwd\nStrictModes yes\n~~~\n改成\n~~~\n# Authentication:\nLoginGraceTime 120\nPermitRootLogin yes\nStrictModes yes\n~~~\n2. 重启ssh\n\n`systemctl restart sshd`\n## 安装zsh 和 oh-my-zsh\n1. 安装 zsh\n`apt install zsh -y`\nzsh 设为默认 shell\nchsh -s /bin/zsh\n\n2. 安装 oh-my-zsh\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n或\nsh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n3. 插件\n安装 incr 自动补全插件推荐\n\ncd ~/.oh-my-zsh/plugins/\nmkdir incr && cd incr\nwget http://mimosa-pudica.net/src/incr-0.2.zsh\nvi ~/.zshrc\n插入下面这条\n~~~\nsource ~/.oh-my-zsh/plugins/incr/incr*.zsh\n~~~\nsource ~/.zshrc\n\n## 参考资料\n> https://blog.csdn.net/ruo_62/article/details/90233501\n","source":"_posts/VMware虚拟工作站1-安装与使用Linux篇1.md","raw":"---\ntitle: \"VMware虚拟工作站1-安装与使用Linux篇1\"\ncatalog: true\ntags: []\ndate: 2019-10-24 13:48:33\nsubtitle:\nheader-img:\n---\n# VMware虚拟工作站1-安装与使用Linux篇1\n## 安装VMware\n- 下载\n    - VMwareworkstation64_15.1.0-13591040\n    - ubuntu-18.04.2-live-server-amd64.iso\n\n将VMware安装好\n## 创建虚拟机\n1. 点击创建虚拟机![1](VMware虚拟工作站1-安装与使用Linux篇1/1.png)\n2. 点击自定义高级，然后下一步![2](VMware虚拟工作站1-安装与使用Linux篇1/2.png)\n3. 硬件界面默认，点击下一步![3](VMware虚拟工作站1-安装与使用Linux篇1/3.png)\n4. 新建虚拟机向导，选择稍后安装操作系统![4](VMware虚拟工作站1-安装与使用Linux篇1/4.png)\n    如果这里选择光盘镜像会自动帮你安装，自动安装的会出问题。\n5. 选择安装系统下一步，我的是64位下载的ubuntu发行版64![5](VMware虚拟工作站1-安装与使用Linux篇1/5.png)\n6. 命名虚拟机的名字，然后在磁盘选择一个文件夹放置，然后下一步![6](VMware虚拟工作站1-安装与使用Linux篇1/6.png)\n7. 选择处理器的数量，虚拟的![7](VMware虚拟工作站1-安装与使用Linux篇1/7.png)\n8. 内存设置，虚拟的，我选的6GB![8](VMware虚拟工作站1-安装与使用Linux篇1/8.png)\n9. 网络选择NAT![9](VMware虚拟工作站1-安装与使用Linux篇1/9.png)\n10. I/O控制器，选择logic![10](VMware虚拟工作站1-安装与使用Linux篇1/10.png)\n11. 硬盘类型，scsi![11](VMware虚拟工作站1-安装与使用Linux篇1/11.png)\n12. 创建新虚拟磁盘，20G就够了![12](VMware虚拟工作站1-安装与使用Linux篇1/12.png)\n\n拆分成多个以后创建虚拟机后，不会直接占用20GB空间，随着虚拟机内容变多后，所占内容会才会慢慢把空间扩大。\n\n![13](VMware虚拟工作站1-安装与使用Linux篇1/13.png)\n\n下一步\n![14](VMware虚拟工作站1-安装与使用Linux篇1/14.png)\n\n13. 浏览创建参数\n![15](VMware虚拟工作站1-安装与使用Linux篇1/15.png)\n14. 点击完成后\n![16](VMware虚拟工作站1-安装与使用Linux篇1/16.png)\n\n## 启动ubuntu虚拟机\n- 点击运行启动，出现弹框，点击确定。\n![17](VMware虚拟工作站1-安装与使用Linux篇1/17.png)\n- 因为没有插光驱，所以显示没有\n![18](VMware虚拟工作站1-安装与使用Linux篇1/18.png)\n- 点击停止，然后编辑虚拟机\n![19](VMware虚拟工作站1-安装与使用Linux篇1/19.png)![20](VMware虚拟工作站1-安装与使用Linux篇1/20.png)\n- 弹出对话框，然后选择CD/DVD\n![21](VMware虚拟工作站1-安装与使用Linux篇1/21.png)\n- 将iso文件导入后启动Ubuntu\n![22](VMware虚拟工作站1-安装与使用Linux篇1/22.png)![23](VMware虚拟工作站1-安装与使用Linux篇1/23.png)\n- 启动加载ubuntu\n![24](VMware虚拟工作站1-安装与使用Linux篇1/24.png)\n- 语言选择,选择english,为防止字符编码bug\n![25](VMware虚拟工作站1-安装与使用Linux篇1/25.png)![26](VMware虚拟工作站1-安装与使用Linux篇1/26.png)\n- 选择install ubuntu\n![27](VMware虚拟工作站1-安装与使用Linux篇1/27.png)\n- 网络设置这里我选择DHCP自动分配\n![28](VMware虚拟工作站1-安装与使用Linux篇1/28.png)![29](VMware虚拟工作站1-安装与使用Linux篇1/29.png)![30](VMware虚拟工作站1-安装与使用Linux篇1/30.png)\n- 选择代理,直接选DONE\n![31](VMware虚拟工作站1-安装与使用Linux篇1/31.png)\n- 选择镜像地址,这里选择阿里云镜像,后面系统会安装东西.这样会快些.\n`http://mirrors.aliyun.com/ubuntu`\n![32](VMware虚拟工作站1-安装与使用Linux篇1/32.png)\n- 磁盘挂载,我选择的LVM\n    - Use An entire Disk-使用整个磁盘\n    - Use An Entire Disk And Set Up LVM-使用整个磁盘并设置\n    - Manual-手动\n    - Back-返回\nLVM是磁盘扩容技术，一定要选择LVM\n    500GB C /path\n    500GB D /path\n    如果没有需那种LVM那么扩容以后无法合并挂载点\n![33](VMware虚拟工作站1-安装与使用Linux篇1/33.png)![34](VMware虚拟工作站1-安装与使用Linux篇1/34.png)\n- Filesystem setup   文件系统设置\n    - FILE SYSTEM SUMMARY    文件系统摘要\n    - No disk or partitions mounted   未安装磁盘或分区\n    - AVAILABLE DEVICES  可用设备\n    ![35](VMware虚拟工作站1-安装与使用Linux篇1/35.png)![36](VMware虚拟工作站1-安装与使用Linux篇1/36.png)\n- 设置用户名,服务器名称\n![37](VMware虚拟工作站1-安装与使用Linux篇1/37.png)![38](VMware虚拟工作站1-安装与使用Linux篇1/38.png)\n- 默认安装openssh\n![39](VMware虚拟工作站1-安装与使用Linux篇1/39.png)\n- 默认安装插件,不安装\n![40](VMware虚拟工作站1-安装与使用Linux篇1/40.PNG)\n- 选择重启\n接着是一个安装过程，请耐心等待，安装完成后会在 [View full log] 按钮下多出一个 [Reboot Now] 按钮。\n![41](VMware虚拟工作站1-安装与使用Linux篇1/41.png)![42](VMware虚拟工作站1-安装与使用Linux篇1/42.png)\n\n## 成功启动\n![43](VMware虚拟工作站1-安装与使用Linux篇1/43.png)\n\n## Ubuntu server 设置 root 密码\nubuntu server 安装的时候要你新建一个用户，安装完成后，你需要手动开启 root。\n`sudo passwd root`\n根据提示依次输入:\n1. 输入你当前用户的密码\n2. 输入你希望的 root 用户的密码\n3. 确认密码\n\n设置完成。\n\n## 安装ssh\n### 检查软件是否安装\n~~~\napt-cache policy openssh-client openssh-server\n~~~\n### 安装服务端\n~~~\napt-get install openssh-server\n~~~\n### 安装客户端\n~~~\napt-get install openssh-client\n~~~\n\n应该是sshd的设置不允许root用户用密码远程登录\n\n1. 修改 vim /etc/ssh/sshd_config\n\n找到# Authentication:\n~~~\nLoginGraceTime 120\nPermitRootLogin without passwd\nStrictModes yes\n~~~\n改成\n~~~\n# Authentication:\nLoginGraceTime 120\nPermitRootLogin yes\nStrictModes yes\n~~~\n2. 重启ssh\n\n`systemctl restart sshd`\n## 安装zsh 和 oh-my-zsh\n1. 安装 zsh\n`apt install zsh -y`\nzsh 设为默认 shell\nchsh -s /bin/zsh\n\n2. 安装 oh-my-zsh\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n或\nsh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n\n3. 插件\n安装 incr 自动补全插件推荐\n\ncd ~/.oh-my-zsh/plugins/\nmkdir incr && cd incr\nwget http://mimosa-pudica.net/src/incr-0.2.zsh\nvi ~/.zshrc\n插入下面这条\n~~~\nsource ~/.oh-my-zsh/plugins/incr/incr*.zsh\n~~~\nsource ~/.zshrc\n\n## 参考资料\n> https://blog.csdn.net/ruo_62/article/details/90233501\n","slug":"VMware虚拟工作站1-安装与使用Linux篇1","published":1,"updated":"2021-04-20T13:28:10.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2o0022zgl1iu8c37qd","content":"<h1><span id=\"vmware虚拟工作站1-安装与使用linux篇1\">VMware虚拟工作站1-安装与使用Linux篇1</span></h1>\n<h2><span id=\"安装vmware\">安装VMware</span></h2>\n<ul>\n<li>下载\n<ul>\n<li>VMwareworkstation64_15.1.0-13591040</li>\n<li>ubuntu-18.04.2-live-server-amd64.iso</li>\n</ul>\n</li>\n</ul>\n<p>将VMware安装好</p>\n<h2><span id=\"创建虚拟机\">创建虚拟机</span></h2>\n<ol>\n<li>点击创建虚拟机<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/1.png\" alt=\"1\"></li>\n<li>点击自定义高级，然后下一步<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/2.png\" alt=\"2\"></li>\n<li>硬件界面默认，点击下一步<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/3.png\" alt=\"3\"></li>\n<li>新建虚拟机向导，选择稍后安装操作系统<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/4.png\" alt=\"4\"><br>\n如果这里选择光盘镜像会自动帮你安装，自动安装的会出问题。</li>\n<li>选择安装系统下一步，我的是64位下载的ubuntu发行版64<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/5.png\" alt=\"5\"></li>\n<li>命名虚拟机的名字，然后在磁盘选择一个文件夹放置，然后下一步<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/6.png\" alt=\"6\"></li>\n<li>选择处理器的数量，虚拟的<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/7.png\" alt=\"7\"></li>\n<li>内存设置，虚拟的，我选的6GB<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/8.png\" alt=\"8\"></li>\n<li>网络选择NAT<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/9.png\" alt=\"9\"></li>\n<li>I/O控制器，选择logic<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/10.png\" alt=\"10\"></li>\n<li>硬盘类型，scsi<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/11.png\" alt=\"11\"></li>\n<li>创建新虚拟磁盘，20G就够了<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/12.png\" alt=\"12\"></li>\n</ol>\n<p>拆分成多个以后创建虚拟机后，不会直接占用20GB空间，随着虚拟机内容变多后，所占内容会才会慢慢把空间扩大。</p>\n<p><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/13.png\" alt=\"13\"></p>\n<p>下一步<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/14.png\" alt=\"14\"></p>\n<ol start=\"13\">\n<li>浏览创建参数<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/15.png\" alt=\"15\"></li>\n<li>点击完成后<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/16.png\" alt=\"16\"></li>\n</ol>\n<h2><span id=\"启动ubuntu虚拟机\">启动ubuntu虚拟机</span></h2>\n<ul>\n<li>点击运行启动，出现弹框，点击确定。<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/17.png\" alt=\"17\"></li>\n<li>因为没有插光驱，所以显示没有<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/18.png\" alt=\"18\"></li>\n<li>点击停止，然后编辑虚拟机<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/19.png\" alt=\"19\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/20.png\" alt=\"20\"></li>\n<li>弹出对话框，然后选择CD/DVD<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/21.png\" alt=\"21\"></li>\n<li>将iso文件导入后启动Ubuntu<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/22.png\" alt=\"22\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/23.png\" alt=\"23\"></li>\n<li>启动加载ubuntu<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/24.png\" alt=\"24\"></li>\n<li>语言选择,选择english,为防止字符编码bug<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/25.png\" alt=\"25\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/26.png\" alt=\"26\"></li>\n<li>选择install ubuntu<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/27.png\" alt=\"27\"></li>\n<li>网络设置这里我选择DHCP自动分配<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/28.png\" alt=\"28\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/29.png\" alt=\"29\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/30.png\" alt=\"30\"></li>\n<li>选择代理,直接选DONE<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/31.png\" alt=\"31\"></li>\n<li>选择镜像地址,这里选择阿里云镜像,后面系统会安装东西.这样会快些.<br>\n<code>http://mirrors.aliyun.com/ubuntu</code><br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/32.png\" alt=\"32\"></li>\n<li>磁盘挂载,我选择的LVM\n<ul>\n<li>Use An entire Disk-使用整个磁盘</li>\n<li>Use An Entire Disk And Set Up LVM-使用整个磁盘并设置</li>\n<li>Manual-手动</li>\n<li>Back-返回<br>\nLVM是磁盘扩容技术，一定要选择LVM<br>\n500GB C /path<br>\n500GB D /path<br>\n如果没有需那种LVM那么扩容以后无法合并挂载点<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/33.png\" alt=\"33\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/34.png\" alt=\"34\"></li>\n</ul>\n</li>\n<li>Filesystem setup   文件系统设置\n<ul>\n<li>FILE SYSTEM SUMMARY    文件系统摘要</li>\n<li>No disk or partitions mounted   未安装磁盘或分区</li>\n<li>AVAILABLE DEVICES  可用设备<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/35.png\" alt=\"35\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/36.png\" alt=\"36\"></li>\n</ul>\n</li>\n<li>设置用户名,服务器名称<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/37.png\" alt=\"37\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/38.png\" alt=\"38\"></li>\n<li>默认安装openssh<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/39.png\" alt=\"39\"></li>\n<li>默认安装插件,不安装<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/40.PNG\" alt=\"40\"></li>\n<li>选择重启<br>\n接着是一个安装过程，请耐心等待，安装完成后会在 [View full log] 按钮下多出一个 [Reboot Now] 按钮。<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/41.png\" alt=\"41\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/42.png\" alt=\"42\"></li>\n</ul>\n<h2><span id=\"成功启动\">成功启动</span></h2>\n<p><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/43.png\" alt=\"43\"></p>\n<h2><span id=\"ubuntu-server-设置-root-密码\">Ubuntu server 设置 root 密码</span></h2>\n<p>ubuntu server 安装的时候要你新建一个用户，安装完成后，你需要手动开启 root。<br>\n<code>sudo passwd root</code><br>\n根据提示依次输入:</p>\n<ol>\n<li>输入你当前用户的密码</li>\n<li>输入你希望的 root 用户的密码</li>\n<li>确认密码</li>\n</ol>\n<p>设置完成。</p>\n<h2><span id=\"安装ssh\">安装ssh</span></h2>\n<h3><span id=\"检查软件是否安装\">检查软件是否安装</span></h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache<span class=\"built_in\"> policy </span>openssh-client openssh-server</span><br></pre></td></tr></table></figure>\n<h3><span id=\"安装服务端\">安装服务端</span></h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"builtin-name\">get</span> install openssh-server</span><br></pre></td></tr></table></figure>\n<h3><span id=\"安装客户端\">安装客户端</span></h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"builtin-name\">get</span> install openssh-client</span><br></pre></td></tr></table></figure>\n<p>应该是sshd的设置不允许root用户用密码远程登录</p>\n<ol>\n<li>修改 vim /etc/ssh/sshd_config</li>\n</ol>\n<p>找到# Authentication:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">LoginGraceTime</span> <span class=\"number\">120</span></span><br><span class=\"line\"><span class=\"string\">PermitRootLogin</span> <span class=\"string\">without</span> <span class=\"string\">passwd</span></span><br><span class=\"line\"><span class=\"string\">StrictModes</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Authentication:</span></span><br><span class=\"line\"><span class=\"string\">LoginGraceTime</span> <span class=\"number\">120</span></span><br><span class=\"line\"><span class=\"string\">PermitRootLogin</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">StrictModes</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>重启ssh</li>\n</ol>\n<p><code>systemctl restart sshd</code></p>\n<h2><span id=\"安装zsh-和-oh-my-zsh\">安装zsh 和 oh-my-zsh</span></h2>\n<ol>\n<li>\n<p>安装 zsh<br>\n<code>apt install zsh -y</code><br>\nzsh 设为默认 shell<br>\nchsh -s /bin/zsh</p>\n</li>\n<li>\n<p>安装 oh-my-zsh<br>\nsh -c &quot;$(curl -fsSL <a href=\"https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a>)&quot;<br>\n或<br>\nsh -c “$(wget <a href=\"https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a> -O -)”</p>\n</li>\n<li>\n<p>插件<br>\n安装 incr 自动补全插件推荐</p>\n</li>\n</ol>\n<p>cd ~/.oh-my-zsh/plugins/<br>\nmkdir incr &amp;&amp; cd incr<br>\nwget <a href=\"http://mimosa-pudica.net/src/incr-0.2.zsh\" target=\"_blank\" rel=\"noopener\">http://mimosa-pudica.net/src/incr-0.2.zsh</a><br>\nvi ~/.zshrc<br>\n插入下面这条</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">source</span> ~<span class=\"regexp\">/.oh-my-zsh/</span>plugins<span class=\"regexp\">/incr/i</span>ncr*.zsh</span><br></pre></td></tr></table></figure>\n<p>source ~/.zshrc</p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/ruo_62/article/details/90233501\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ruo_62/article/details/90233501</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>VMware虚拟工作站1-安装与使用Linux篇1</h1>\n<h2>安装VMware</h2>\n<ul>\n<li>下载\n<ul>\n<li>VMwareworkstation64_15.1.0-13591040</li>\n<li>ubuntu-18.04.2-live-server-amd64.iso</li>\n</ul>\n</li>\n</ul>\n<p>将VMware安装好</p>\n<h2>创建虚拟机</h2>\n<ol>\n<li>点击创建虚拟机<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/1.png\" alt=\"1\"></li>\n<li>点击自定义高级，然后下一步<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/2.png\" alt=\"2\"></li>\n<li>硬件界面默认，点击下一步<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/3.png\" alt=\"3\"></li>\n<li>新建虚拟机向导，选择稍后安装操作系统<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/4.png\" alt=\"4\"><br>\n如果这里选择光盘镜像会自动帮你安装，自动安装的会出问题。</li>\n<li>选择安装系统下一步，我的是64位下载的ubuntu发行版64<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/5.png\" alt=\"5\"></li>\n<li>命名虚拟机的名字，然后在磁盘选择一个文件夹放置，然后下一步<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/6.png\" alt=\"6\"></li>\n<li>选择处理器的数量，虚拟的<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/7.png\" alt=\"7\"></li>\n<li>内存设置，虚拟的，我选的6GB<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/8.png\" alt=\"8\"></li>\n<li>网络选择NAT<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/9.png\" alt=\"9\"></li>\n<li>I/O控制器，选择logic<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/10.png\" alt=\"10\"></li>\n<li>硬盘类型，scsi<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/11.png\" alt=\"11\"></li>\n<li>创建新虚拟磁盘，20G就够了<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/12.png\" alt=\"12\"></li>\n</ol>\n<p>拆分成多个以后创建虚拟机后，不会直接占用20GB空间，随着虚拟机内容变多后，所占内容会才会慢慢把空间扩大。</p>\n<p><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/13.png\" alt=\"13\"></p>\n<p>下一步<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/14.png\" alt=\"14\"></p>\n<ol start=\"13\">\n<li>浏览创建参数<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/15.png\" alt=\"15\"></li>\n<li>点击完成后<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/16.png\" alt=\"16\"></li>\n</ol>\n<h2>启动ubuntu虚拟机</h2>\n<ul>\n<li>点击运行启动，出现弹框，点击确定。<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/17.png\" alt=\"17\"></li>\n<li>因为没有插光驱，所以显示没有<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/18.png\" alt=\"18\"></li>\n<li>点击停止，然后编辑虚拟机<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/19.png\" alt=\"19\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/20.png\" alt=\"20\"></li>\n<li>弹出对话框，然后选择CD/DVD<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/21.png\" alt=\"21\"></li>\n<li>将iso文件导入后启动Ubuntu<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/22.png\" alt=\"22\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/23.png\" alt=\"23\"></li>\n<li>启动加载ubuntu<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/24.png\" alt=\"24\"></li>\n<li>语言选择,选择english,为防止字符编码bug<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/25.png\" alt=\"25\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/26.png\" alt=\"26\"></li>\n<li>选择install ubuntu<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/27.png\" alt=\"27\"></li>\n<li>网络设置这里我选择DHCP自动分配<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/28.png\" alt=\"28\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/29.png\" alt=\"29\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/30.png\" alt=\"30\"></li>\n<li>选择代理,直接选DONE<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/31.png\" alt=\"31\"></li>\n<li>选择镜像地址,这里选择阿里云镜像,后面系统会安装东西.这样会快些.<br>\n<code>http://mirrors.aliyun.com/ubuntu</code><br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/32.png\" alt=\"32\"></li>\n<li>磁盘挂载,我选择的LVM\n<ul>\n<li>Use An entire Disk-使用整个磁盘</li>\n<li>Use An Entire Disk And Set Up LVM-使用整个磁盘并设置</li>\n<li>Manual-手动</li>\n<li>Back-返回<br>\nLVM是磁盘扩容技术，一定要选择LVM<br>\n500GB C /path<br>\n500GB D /path<br>\n如果没有需那种LVM那么扩容以后无法合并挂载点<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/33.png\" alt=\"33\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/34.png\" alt=\"34\"></li>\n</ul>\n</li>\n<li>Filesystem setup   文件系统设置\n<ul>\n<li>FILE SYSTEM SUMMARY    文件系统摘要</li>\n<li>No disk or partitions mounted   未安装磁盘或分区</li>\n<li>AVAILABLE DEVICES  可用设备<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/35.png\" alt=\"35\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/36.png\" alt=\"36\"></li>\n</ul>\n</li>\n<li>设置用户名,服务器名称<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/37.png\" alt=\"37\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/38.png\" alt=\"38\"></li>\n<li>默认安装openssh<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/39.png\" alt=\"39\"></li>\n<li>默认安装插件,不安装<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/40.PNG\" alt=\"40\"></li>\n<li>选择重启<br>\n接着是一个安装过程，请耐心等待，安装完成后会在 [View full log] 按钮下多出一个 [Reboot Now] 按钮。<br>\n<img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/41.png\" alt=\"41\"><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/42.png\" alt=\"42\"></li>\n</ul>\n<h2>成功启动</h2>\n<p><img src=\"/2019/10/24/VMware虚拟工作站1-安装与使用Linux篇1/43.png\" alt=\"43\"></p>\n<h2>Ubuntu server 设置 root 密码</h2>\n<p>ubuntu server 安装的时候要你新建一个用户，安装完成后，你需要手动开启 root。<br>\n<code>sudo passwd root</code><br>\n根据提示依次输入:</p>\n<ol>\n<li>输入你当前用户的密码</li>\n<li>输入你希望的 root 用户的密码</li>\n<li>确认密码</li>\n</ol>\n<p>设置完成。</p>\n<h2>安装ssh</h2>\n<h3>检查软件是否安装</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache<span class=\"built_in\"> policy </span>openssh-client openssh-server</span><br></pre></td></tr></table></figure>\n<h3>安装服务端</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"builtin-name\">get</span> install openssh-server</span><br></pre></td></tr></table></figure>\n<h3>安装客户端</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"builtin-name\">get</span> install openssh-client</span><br></pre></td></tr></table></figure>\n<p>应该是sshd的设置不允许root用户用密码远程登录</p>\n<ol>\n<li>修改 vim /etc/ssh/sshd_config</li>\n</ol>\n<p>找到# Authentication:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">LoginGraceTime</span> <span class=\"number\">120</span></span><br><span class=\"line\"><span class=\"string\">PermitRootLogin</span> <span class=\"string\">without</span> <span class=\"string\">passwd</span></span><br><span class=\"line\"><span class=\"string\">StrictModes</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Authentication:</span></span><br><span class=\"line\"><span class=\"string\">LoginGraceTime</span> <span class=\"number\">120</span></span><br><span class=\"line\"><span class=\"string\">PermitRootLogin</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">StrictModes</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>重启ssh</li>\n</ol>\n<p><code>systemctl restart sshd</code></p>\n<h2>安装zsh 和 oh-my-zsh</h2>\n<ol>\n<li>\n<p>安装 zsh<br>\n<code>apt install zsh -y</code><br>\nzsh 设为默认 shell<br>\nchsh -s /bin/zsh</p>\n</li>\n<li>\n<p>安装 oh-my-zsh<br>\nsh -c &quot;$(curl -fsSL <a href=\"https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a>)&quot;<br>\n或<br>\nsh -c “$(wget <a href=\"https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh\" target=\"_blank\" rel=\"noopener\">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a> -O -)”</p>\n</li>\n<li>\n<p>插件<br>\n安装 incr 自动补全插件推荐</p>\n</li>\n</ol>\n<p>cd ~/.oh-my-zsh/plugins/<br>\nmkdir incr &amp;&amp; cd incr<br>\nwget <a href=\"http://mimosa-pudica.net/src/incr-0.2.zsh\" target=\"_blank\" rel=\"noopener\">http://mimosa-pudica.net/src/incr-0.2.zsh</a><br>\nvi ~/.zshrc<br>\n插入下面这条</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">source</span> ~<span class=\"regexp\">/.oh-my-zsh/</span>plugins<span class=\"regexp\">/incr/i</span>ncr*.zsh</span><br></pre></td></tr></table></figure>\n<p>source ~/.zshrc</p>\n<h2>参考资料</h2>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/ruo_62/article/details/90233501\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ruo_62/article/details/90233501</a></p>\n</blockquote>\n"},{"title":"Vue学习02-Vue语法","catalog":true,"date":"2019-08-17T02:19:12.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue 语法\n- `v-if`\n~~~ vue\n    <div id=\"app\">\n      <p v-if=\"a === 'a'\">a</p>\n      <p v-if=\"a === 'b'\">b</p>\n      <p v-if=\"a === 'c'\">c</p>\n    </div>\n   <script>\n         var vm = new Vue({\n           el:\"#app\",\n           data:{\n             a: \"b\",\n           }\n         })\n   </script> \n~~~\n\n输出\n~~~ \nb\n~~~\n\n- `v-for`\n~~~ vue\n<div id=\"app\">\n      <ul>\n        <li v-for=\"item in items\">\n          {{item}}\n        </li>\n      </ul>\n    </div>\n\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          items: ['张三', '李四', '王麻子']\n        }\n      })\n    </script>\n~~~\n输出\n![v-for](Vue学习02-Vue语法/v-for.png)\n\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        methods: {\n          say: function (event){\n            alert(\"hello vue\")\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![v-on](Vue学习02-Vue语法/v-on.png)\n\n第二种\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          msg:\"hello vue[msg]\"\n        },\n        methods: {\n          say: function (event){\n            alert(this.msg)\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![v-on1](Vue学习02-Vue语法/v-on1.png)\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习02-Vue语法.md","raw":"---\ntitle: Vue学习02-Vue语法\ncatalog: true\ndate: 2019-08-17 10:19:12\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue 语法\n- `v-if`\n~~~ vue\n    <div id=\"app\">\n      <p v-if=\"a === 'a'\">a</p>\n      <p v-if=\"a === 'b'\">b</p>\n      <p v-if=\"a === 'c'\">c</p>\n    </div>\n   <script>\n         var vm = new Vue({\n           el:\"#app\",\n           data:{\n             a: \"b\",\n           }\n         })\n   </script> \n~~~\n\n输出\n~~~ \nb\n~~~\n\n- `v-for`\n~~~ vue\n<div id=\"app\">\n      <ul>\n        <li v-for=\"item in items\">\n          {{item}}\n        </li>\n      </ul>\n    </div>\n\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          items: ['张三', '李四', '王麻子']\n        }\n      })\n    </script>\n~~~\n输出\n![v-for](Vue学习02-Vue语法/v-for.png)\n\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        methods: {\n          say: function (event){\n            alert(\"hello vue\")\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![v-on](Vue学习02-Vue语法/v-on.png)\n\n第二种\n- `v-on`\n~~~ vue\n<div id=\"app\">\n      <button v-on:click=\"say()\">\n        点击弹出\n      </button>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n      var vm = new Vue({\n        el:\"#app\",\n        data:{\n          msg:\"hello vue[msg]\"\n        },\n        methods: {\n          say: function (event){\n            alert(this.msg)\n          }\n        }\n      })\n    </script>\n~~~\n输出\n![v-on1](Vue学习02-Vue语法/v-on1.png)\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习02-Vue语法","published":1,"updated":"2021-04-20T13:28:10.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2p0024zgl1js7848fv","content":"<h1><span id=\"vue学习记录\">Vue学习记录</span></h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2><span id=\"vue-语法\">Vue 语法</span></h2>\n<ul>\n<li><code>v-if</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;a&apos;&quot;&gt;a&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;b&apos;&quot;&gt;b&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;c&apos;&quot;&gt;c&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;b&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">b</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>v-for</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class=\"line\">          &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          items: [&apos;张三&apos;, &apos;李四&apos;, &apos;王麻子&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"/2019/08/17/Vue学习02-Vue语法/v-for.png\" alt=\"v-for\"></p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(&quot;hello vue&quot;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"/2019/08/17/Vue学习02-Vue语法/v-on.png\" alt=\"v-on\"></p>\n<p>第二种</p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          msg:&quot;hello vue[msg]&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(this.msg)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"/2019/08/17/Vue学习02-Vue语法/v-on1.png\" alt=\"v-on1\"></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>Vue 语法</h2>\n<ul>\n<li><code>v-if</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;a&apos;&quot;&gt;a&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;b&apos;&quot;&gt;b&lt;/p&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;a === &apos;c&apos;&quot;&gt;c&lt;/p&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          a: &quot;b&quot;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">b</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>v-for</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class=\"line\">          &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          items: [&apos;张三&apos;, &apos;李四&apos;, &apos;王麻子&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"/2019/08/17/Vue学习02-Vue语法/v-for.png\" alt=\"v-for\"></p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(&quot;hello vue&quot;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"/2019/08/17/Vue学习02-Vue语法/v-on.png\" alt=\"v-on\"></p>\n<p>第二种</p>\n<ul>\n<li><code>v-on</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">      &lt;button v-on:click=&quot;say()&quot;&gt;</span><br><span class=\"line\">        点击弹出</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var vm = new Vue(&#123;</span><br><span class=\"line\">        el:&quot;#app&quot;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          msg:&quot;hello vue[msg]&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\">          say: function (event)&#123;</span><br><span class=\"line\">            alert(this.msg)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>输出<br>\n<img src=\"/2019/08/17/Vue学习02-Vue语法/v-on1.png\" alt=\"v-on1\"></p>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"Vue学习03-生命周期函数","catalog":true,"date":"2019-08-17T02:25:22.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### Vue生命周期 \n- created: 比如钩子可以用来在一个实例被创建之后执行代码：\n- mounted\n- updated\n- destroyed \n\n每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\n![vueLifeLoop](Vue学习03-生命周期函数/vueLifeLoop.jpg)\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n~~~ vue\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n~~~\n也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。\n\n###钩子函数的触发时机\n#### beforeCreate\n在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\n\n#### created\n实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n\n#### beforeMount\n在挂载开始之前被调用：相关的 render 函数首次被调用。\n\n#### mounted\nel 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。\n\n#### beforeUpdate\n数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\n#### updated\n由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n\n当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\n\n#### beforeDestroy\n实例销毁之前调用。在这一步，实例仍然完全可用。\n\n#### destroyed\nVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习03-生命周期函数.md","raw":"---\ntitle: Vue学习03-生命周期函数\ncatalog: true\ndate: 2019-08-17 10:25:22\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n### Vue生命周期 \n- created: 比如钩子可以用来在一个实例被创建之后执行代码：\n- mounted\n- updated\n- destroyed \n\n每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\n![vueLifeLoop](Vue学习03-生命周期函数/vueLifeLoop.jpg)\n比如 created 钩子可以用来在一个实例被创建之后执行代码：\n~~~ vue\nnew Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// => \"a is: 1\"\n~~~\n也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。\n\n###钩子函数的触发时机\n#### beforeCreate\n在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\n\n#### created\n实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。\n\n#### beforeMount\n在挂载开始之前被调用：相关的 render 函数首次被调用。\n\n#### mounted\nel 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。\n\n#### beforeUpdate\n数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n\n#### updated\n由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。\n\n当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\n\n#### beforeDestroy\n实例销毁之前调用。在这一步，实例仍然完全可用。\n\n#### destroyed\nVue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习03-生命周期函数","published":1,"updated":"2021-04-20T13:28:10.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2q0027zgl1iq1erl5y","content":"<h1><span id=\"vue学习记录\">Vue学习记录</span></h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3><span id=\"vue生命周期\">Vue生命周期</span></h3>\n<ul>\n<li>created: 比如钩子可以用来在一个实例被创建之后执行代码：</li>\n<li>mounted</li>\n<li>updated</li>\n<li>destroyed</li>\n</ul>\n<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br>\n<img src=\"/2019/08/17/Vue学习03-生命周期函数/vueLifeLoop.jpg\" alt=\"vueLifeLoop\"><br>\n比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    // `this` 指向 vm 实例</span><br><span class=\"line\">    console.log(&apos;a is: &apos; + this.a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt; &quot;a is: 1&quot;</span><br></pre></td></tr></table></figure>\n<p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。<br>\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。</p>\n<p>###钩子函数的触发时机</p>\n<h4><span id=\"beforecreate\">beforeCreate</span></h4>\n<p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>\n<h4><span id=\"created\">created</span></h4>\n<p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>\n<h4><span id=\"beforemount\">beforeMount</span></h4>\n<p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>\n<h4><span id=\"mounted\">mounted</span></h4>\n<p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</p>\n<h4><span id=\"beforeupdate\">beforeUpdate</span></h4>\n<p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h4><span id=\"updated\">updated</span></h4>\n<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>\n<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p>\n<h4><span id=\"beforedestroy\">beforeDestroy</span></h4>\n<p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>\n<h4><span id=\"destroyed\">destroyed</span></h4>\n<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h3>Vue生命周期</h3>\n<ul>\n<li>created: 比如钩子可以用来在一个实例被创建之后执行代码：</li>\n<li>mounted</li>\n<li>updated</li>\n<li>destroyed</li>\n</ul>\n<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 —— 例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br>\n<img src=\"/2019/08/17/Vue学习03-生命周期函数/vueLifeLoop.jpg\" alt=\"vueLifeLoop\"><br>\n比如 created 钩子可以用来在一个实例被创建之后执行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  created: function () &#123;</span><br><span class=\"line\">    // `this` 指向 vm 实例</span><br><span class=\"line\">    console.log(&apos;a is: &apos; + this.a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// =&gt; &quot;a is: 1&quot;</span><br></pre></td></tr></table></figure>\n<p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。<br>\n生命周期钩子的 this 上下文指向调用它的 Vue 实例。</p>\n<p>###钩子函数的触发时机</p>\n<h4>beforeCreate</h4>\n<p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>\n<h4>created</h4>\n<p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>\n<h4>beforeMount</h4>\n<p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>\n<h4>mounted</h4>\n<p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</p>\n<h4>beforeUpdate</h4>\n<p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h4>updated</h4>\n<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>\n<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</p>\n<h4>beforeDestroy</h4>\n<p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>\n<h4>destroyed</h4>\n<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"Windows端口占用关闭","catalog":true,"date":"2019-09-24T12:51:43.000Z","subtitle":null,"header-img":null,"_content":"# Windows端口占用关闭\n\n~~~shell\n# 查看端口占用pid\nC:\\Users\\ziming>netstat -ano|findstr 8080\n  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       8912\n  TCP    [::]:8080              [::]:0                 LISTENING       8912\n# 杀死pid\nC:\\Users\\ziming>taskkill/pid 8912 /F\n成功: 已终止 PID 为 8912 的进程。\n# 再次查看\nC:\\Users\\ziming>netstat -ano|findstr 8080\n~~~\n","source":"_posts/Windows端口占用关闭.md","raw":"---\ntitle: Windows端口占用关闭\ncatalog: true\ndate: 2019-09-24 20:51:43\nsubtitle:\nheader-img:\ntags: [Windows, Windows端口]\n---\n# Windows端口占用关闭\n\n~~~shell\n# 查看端口占用pid\nC:\\Users\\ziming>netstat -ano|findstr 8080\n  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       8912\n  TCP    [::]:8080              [::]:0                 LISTENING       8912\n# 杀死pid\nC:\\Users\\ziming>taskkill/pid 8912 /F\n成功: 已终止 PID 为 8912 的进程。\n# 再次查看\nC:\\Users\\ziming>netstat -ano|findstr 8080\n~~~\n","slug":"Windows端口占用关闭","published":1,"updated":"2021-04-20T13:28:10.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2r0029zgl1kl6us6gh","content":"<h1><span id=\"windows端口占用关闭\">Windows端口占用关闭</span></h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看端口占用pid</span></span><br><span class=\"line\">C:\\Users\\ziming&gt;netstat -ano|findstr 8080</span><br><span class=\"line\">  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       8912</span><br><span class=\"line\">  TCP    [::]:8080              [::]:0                 LISTENING       8912</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 杀死pid</span></span><br><span class=\"line\">C:\\Users\\ziming&gt;taskkill/pid 8912 /F</span><br><span class=\"line\">成功: 已终止 PID 为 8912 的进程。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次查看</span></span><br><span class=\"line\">C:\\Users\\ziming&gt;netstat -ano|findstr 8080</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1>Windows端口占用关闭</h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看端口占用pid</span></span><br><span class=\"line\">C:\\Users\\ziming&gt;netstat -ano|findstr 8080</span><br><span class=\"line\">  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       8912</span><br><span class=\"line\">  TCP    [::]:8080              [::]:0                 LISTENING       8912</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 杀死pid</span></span><br><span class=\"line\">C:\\Users\\ziming&gt;taskkill/pid 8912 /F</span><br><span class=\"line\">成功: 已终止 PID 为 8912 的进程。</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 再次查看</span></span><br><span class=\"line\">C:\\Users\\ziming&gt;netstat -ano|findstr 8080</span><br></pre></td></tr></table></figure>\n"},{"title":"[Hexo] Theme BeanTech","catalog":true,"date":"2017-03-18T02:51:24.000Z","subtitle":"This is hexo theme Demo.","header-img":"Demo.png","catagories":["Hexo"],"_content":"> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","source":"_posts/hexo-theme-beantech.md","raw":"---\ntitle: \"[Hexo] Theme BeanTech\"\ncatalog: true\ndate: 2017-03-18 10:51:24\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"Demo.png\"\ntags:\n- Hexo\n- Blog\ncatagories:\n- Hexo\n---\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n> \n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n---\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n---\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n---\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n---\nModify `_config.yml` file with your own info.\nEspecially the section:\n### Deployment\nReplace to your own repo!\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\nand activate your personal widget you like\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\nif you want to add sidebar widget, please add at `layout/_widget`.\n### Signature Setup\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n### Go to top icon Setup\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\nYou can decide to show post tags or not.\n```yml\nhome_posts_tag: true\n```\n![home_posts_tag-true](home_posts_tag-true.png)\n```yml\nhome_posts_tag: false\n```\n![home_posts_tag-false](home_posts_tag-false.png)\n\n### Markdown render\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n```javascript\nasync(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: ℬ // this is the header anchor \"unicode\" icon\n        };\n```\n\n## Hexo Basics\n---\nSome hexo command:\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n---\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n\nPlease <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\">Follow</a> would also be appreciated!\nPeace!\n","slug":"hexo-theme-beantech","published":1,"updated":"2021-04-20T13:28:10.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2t002czgl1m5o7weqv","content":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><span id=\"live-demo\"></span></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1><span id=\"usage\">Usage</span></h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2><span id=\"init\">Init</span></h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2><span id=\"modify\">Modify</span></h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3><span id=\"deployment\">Deployment</span></h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"sidebar-settings\">Sidebar settings</span></h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3><span id=\"signature-setup\">Signature Setup</span></h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"go-to-top-icon-setup\">Go to top icon Setup</span></h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3><span id=\"post-tag\">Post tag</span></h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/03/18/hexo-theme-beantech/home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/03/18/hexo-theme-beantech/home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3><span id=\"markdown-render\">Markdown render</span></h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"hexo-basics\">Hexo Basics</span></h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"have-fun-_\">Have fun ^_^</span></h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">Live Demo</a></h1>\n<hr>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1>Usage</h1>\n<hr>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2>Init</h2>\n<hr>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<hr>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/03/18/hexo-theme-beantech/home_posts_tag-true.png\" alt=\"home_posts_tag-true\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2017/03/18/hexo-theme-beantech/home_posts_tag-false.png\" alt=\"home_posts_tag-false\"></p>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: ℬ <span class=\"comment\">// this is the header anchor \"unicode\" icon</span></span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<hr>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<hr>\n<!-- Place this tag in your head or just before your close body tag. -->\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n<!-- Place this tag where you want the button to render. -->\n<p>Please <a class=\"github-button\" href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" data-icon=\"octicon-star\" aria-label=\"Star YenYuHsuan/hexo-theme-beantech on GitHub\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a class=\"github-button\" href=\"https://github.com/YenYuHsuan\" aria-label=\"Follow @YenYuHsuan on GitHub\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"Vue学习03-生命4ue布局","catalog":true,"date":"2019-08-17T02:29:40.000Z","subtitle":null,"header-img":null,"_content":"\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","source":"_posts/Vue学习04-Vue布局.md","raw":"---\ntitle: Vue学习03-生命4ue布局\ncatalog: true\ndate: 2019-08-17 10:29:40\nsubtitle:\nheader-img:\ntags: [Vue]\n---\n\n# Vue学习记录\n这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.\n\n## Vue布局\n### 表单输出\n什么是双向数据绑定\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。\n\n### 为什么要实现数据的双向绑定\n在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。\n\n### 在表单中使用双向数据绑定\n你可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。\n\n注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。\n\n~~~ vue\n<div id=\"vue\">\n    单行文本：<input type=\"text\" v-model=\"message\" />&nbsp;&nbsp;单行文本是：{{message}}\n</div>\n\n<script type=\"text/javascript\">\n    var vm = new Vue({\n        el: '#vue',\n        data: {\n            message: \"Hello Vue\"\n        }\n    });\n</script>\n~~~\n**输出**\n\n\n## 参考资料\n\n> 李卫民的教程\n> https://www.funtl.com/zh/vue-prepare/\n> https://www.bilibili.com/video/av44230028/?p=1\n> Vue官网教程\n> https://cn.vuejs.org/v2/guide/installation.html\n","slug":"Vue学习04-Vue布局","published":1,"updated":"2021-04-20T13:28:10.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2u002ezgl13xswqxts","content":"<h1><span id=\"vue学习记录\">Vue学习记录</span></h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2><span id=\"vue布局\">Vue布局</span></h2>\n<h3><span id=\"表单输出\">表单输出</span></h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3><span id=\"为什么要实现数据的双向绑定\">为什么要实现数据的双向绑定</span></h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3><span id=\"在表单中使用双向数据绑定\">在表单中使用双向数据绑定</span></h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n<h2><span id=\"参考资料\">参考资料</span></h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vue学习记录</h1>\n<p>这边博客为自己学习vue的记录.开始篇幅较大,如果基础好的同学可以直接点击vue内容开始浏览.</p>\n<h2>Vue布局</h2>\n<h3>表单输出</h3>\n<p>什么是双向数据绑定<br>\nVue.js 是一个 MVVM 框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是 Vue.js 的精髓之处了。值得注意的是，我们所说的数据双向绑定，一定是对于 UI 控件来说的，非 UI 控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用 vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>\n<h3>为什么要实现数据的双向绑定</h3>\n<p>在 Vue.js 中，如果使用 vuex，实际上数据还是单向的，之所以说是数据双向绑定，这是用的 UI 控件来说，对于我们处理表单，Vue.js 的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>\n<h3>在表单中使用双向数据绑定</h3>\n<p>你可以用 v-model 指令在表单 <input>、<textarea> 及 </textarea><select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</select></p>\n<p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;vue&quot;&gt;</span><br><span class=\"line\">    单行文本：&lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;&amp;nbsp;&amp;nbsp;单行文本是：&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">        el: &apos;#vue&apos;,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            message: &quot;Hello Vue&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n<h2>参考资料</h2>\n<blockquote>\n<p>李卫民的教程<br>\n<a href=\"https://www.funtl.com/zh/vue-prepare/\" target=\"_blank\" rel=\"noopener\">https://www.funtl.com/zh/vue-prepare/</a><br>\n<a href=\"https://www.bilibili.com/video/av44230028/?p=1\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/av44230028/?p=1</a><br>\nVue官网教程<br>\n<a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/v2/guide/installation.html</a></p>\n</blockquote>\n"},{"title":"备忘录","catalog":true,"date":"2021-03-21T10:25:01.000Z","subtitle":null,"header-img":null,"_content":"\n## GCP\n### nginx 路径: /etc/nginx/\n配置路径: vim nginx.conf\n\n```shell\n\n\n```\n\n### hexo-blog地址 /usr/share/nginx/hexo-blog;\n\n## nginx 基本指令\n重启: sudo nginx -s reload\n","source":"_posts/备忘录.md","raw":"---\ntitle: 备忘录\ncatalog: true\ndate: 2021-03-21 18:25:01\nsubtitle:\nheader-img:\ntags:\n---\n\n## GCP\n### nginx 路径: /etc/nginx/\n配置路径: vim nginx.conf\n\n```shell\n\n\n```\n\n### hexo-blog地址 /usr/share/nginx/hexo-blog;\n\n## nginx 基本指令\n重启: sudo nginx -s reload\n","slug":"备忘录","published":1,"updated":"2021-04-20T13:28:10.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2v002hzgl1ny983gfh","content":"<h2><span id=\"gcp\">GCP</span></h2>\n<h3><span id=\"nginx-路径-etcnginx\">nginx 路径: /etc/nginx/</span></h3>\n<p>配置路径: vim nginx.conf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"hexo-blog地址-usrsharenginxhexo-blog\">hexo-blog地址 /usr/share/nginx/hexo-blog;</span></h3>\n<h2><span id=\"nginx-基本指令\">nginx 基本指令</span></h2>\n<p>重启: sudo nginx -s reload</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>GCP</h2>\n<h3>nginx 路径: /etc/nginx/</h3>\n<p>配置路径: vim nginx.conf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3>hexo-blog地址 /usr/share/nginx/hexo-blog;</h3>\n<h2>nginx 基本指令</h2>\n<p>重启: sudo nginx -s reload</p>\n"},{"title":"博客模板备注及使用方法","catalog":true,"date":"2019-06-23T02:41:27.000Z","subtitle":null,"header-img":null,"_content":"\n~~~\ntitle: \"[Hexo] Theme HuWeihuang\"\ncatalog: true\ntoc_nav_num: true\ndate: 2017-09-18 10:51:24\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"/img/article_header/article_header.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\nupdateDate: 2018-12-23 22:26:24\ntop: 1\n~~~\n\n\n# Hexo 博客搭建\n\n个人博客快速搭建模板\n\n## 版权\n\n- Beantech \n- 胡伟煌\n\n## 安装Hexo\n\nnpm install hexo-cli -g\n如果下载速度慢的可以将npm的下载源换成国内镜像,推荐阿里巴巴的镜像.\n\n## 使用博客模板\n\n### 初始化\n\n~~~ git \ngit clone 链接\ncd hexo-theme\nnpm install\n~~~\n\n### 基本的Hexo语法\n\n~~~ git\nhexo new \"postname\" 新建一篇博客\nhexo new post \"<post name>\" # 新建一篇博客\nhexo clean && hexo generate # 清理并且生成项目\nhexo server # 在本地运行hexo服务器\nhexo deploy # 部署在远端\n~~~\n\n### 博客插入图片格式\n\n`![秒速](路径)`\n`![](1.png)`\n\n如果使用了markdown编辑器需要配置编辑器的相对路径.\n\n不然部署静态路径时会报错\n\n## 原来作者README文档如下\n\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n>\n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n\nModify `_config.yml` file with your own info.\nEspecially the section:\n\n### Deployment\n\nReplace to your own repo!\n\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\n\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\n\nand activate your personal widget you like\n\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\nif you want to add sidebar widget, please add at `layout/_widget`.\n\n### Signature Setup\n\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n\n### Go to top icon Setup\n\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\n\nYou can decide to show post tags or not.\n\n```yml\nhome_posts_tag: true\n```\n\n```yml\nhome_posts_tag: false\n```\n\n### Markdown render\n\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n## Hexo Basics\n\nSome hexo command:\n\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n\nPlease [Star](https://github.com/YenYuHsuan/hexo-theme-beantech) this Project if you like it! [Follow](https://github.com/YenYuHsuan) would also be appreciated!\nPeace!","source":"_posts/博客模板备注.md","raw":"---\ntitle: 博客模板备注及使用方法\ncatalog: true\ndate: 2019-06-23 10:41:27\nsubtitle:\nheader-img:\ntags: [Hexo]\n\n---\n\n~~~\ntitle: \"[Hexo] Theme HuWeihuang\"\ncatalog: true\ntoc_nav_num: true\ndate: 2017-09-18 10:51:24\nsubtitle: \"This is hexo theme Demo.\"\nheader-img: \"/img/article_header/article_header.png\"\ntags:\n- Hexo\ncatagories:\n- Hexo\nupdateDate: 2018-12-23 22:26:24\ntop: 1\n~~~\n\n\n# Hexo 博客搭建\n\n个人博客快速搭建模板\n\n## 版权\n\n- Beantech \n- 胡伟煌\n\n## 安装Hexo\n\nnpm install hexo-cli -g\n如果下载速度慢的可以将npm的下载源换成国内镜像,推荐阿里巴巴的镜像.\n\n## 使用博客模板\n\n### 初始化\n\n~~~ git \ngit clone 链接\ncd hexo-theme\nnpm install\n~~~\n\n### 基本的Hexo语法\n\n~~~ git\nhexo new \"postname\" 新建一篇博客\nhexo new post \"<post name>\" # 新建一篇博客\nhexo clean && hexo generate # 清理并且生成项目\nhexo server # 在本地运行hexo服务器\nhexo deploy # 部署在远端\n~~~\n\n### 博客插入图片格式\n\n`![秒速](路径)`\n`![](1.png)`\n\n如果使用了markdown编辑器需要配置编辑器的相对路径.\n\n不然部署静态路径时会报错\n\n## 原来作者README文档如下\n\n> Ported Theme of [Hux Blog](https://github.com/Huxpro/huxpro.github.io), Thank [Huxpro](https://github.com/Huxpro) for designing such a flawless theme.\n>\n> This BeanTech theme created by [YuHsuan](http://beantech.org) modified from the original Porter [Kaijun](http://kaijun.rocks/hexo-theme-huxblog/)\n\n# [Live Demo](http://beantech.org)\n\n![BeanTech Desktop](http://beantech.org/img/beantech-desktop.png)\n\n# Usage\n\nI publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!\n\nLet's begin!!!\n\n## Init\n\n```bash\ngit clone https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech\ncd hexo-beantech\nnpm install\n```\n\n## Modify\n\nModify `_config.yml` file with your own info.\nEspecially the section:\n\n### Deployment\n\nReplace to your own repo!\n\n```yml\ndeploy:\n  type: git\n  repo: https://github.com/<yourAccount>/<repo>\n  branch: <your-branch>\n```\n\n### Sidebar settings\n\nCopy your avatar image to `<root>/img/` and modify the `_config.yml`:\n\n```yml\nsidebar: true    # whether or not using Sidebar.\nsidebar-about-description: \"<your description>\"\nsidebar-avatar: img/<your avatar path>\n```\n\nand activate your personal widget you like\n\n```yml\nwidgets:         # here are widget you can use, you can comment out\n- featured-tags\n- short-about\n- recent-posts\n- friends-blog\n- archive\n- category\n```\n\nif you want to add sidebar widget, please add at `layout/_widget`.\n\n### Signature Setup\n\nCopy your signature image to `<root>/img/signature` and modify the `_config.yml`:\n\n```yml\nsignature: true   # show signature\nsignature-img: img/signature/<your-signature-ID>\n```\n\n### Go to top icon Setup\n\nMy icon is using iron man, you can change to your own icon at `css/image`.\n\n### Post tag\n\nYou can decide to show post tags or not.\n\n```yml\nhome_posts_tag: true\n```\n\n```yml\nhome_posts_tag: false\n```\n\n### Markdown render\n\nMy markdown render engine plugin is [hexo-renderer-markdown-it](https://github.com/celsomiranda/hexo-renderer-markdown-it).\n\n```yml\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    html: true\n    xhtmlOut: false\n    breaks: true\n    linkify: true\n    typographer: true\n    quotes: '“”‘’'\n```\n\nand if you want to change the header anchor 'ℬ', you can go to `layout/post.ejs` to change it.\n\n```javascript\nasync(\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){\n        anchors.options = {\n          visible: 'hover',\n          placement: 'left',\n          icon: 'ℬ'\n        };\n        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');\n    })\n```\n\n## Hexo Basics\n\nSome hexo command:\n\n```bash\nhexo new post \"<post name>\" # you can change post to another layout if you want\nhexo clean && hexo generate # generate the static file\nhexo server # run hexo in local environment\nhexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo!\n```\n\n# Have fun ^_^ \n\nPlease [Star](https://github.com/YenYuHsuan/hexo-theme-beantech) this Project if you like it! [Follow](https://github.com/YenYuHsuan) would also be appreciated!\nPeace!","slug":"博客模板备注","published":1,"updated":"2021-04-20T13:28:10.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2w002jzgl1jg9qklyf","content":"<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">\"[Hexo] Theme HuWeihuang\"</span></span><br><span class=\"line\"><span class=\"attr\">catalog:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">toc_nav_num:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-18</span> <span class=\"number\">10</span><span class=\"string\">:51:24</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">\"This is hexo theme Demo.\"</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">\"/img/article_header/article_header.png\"</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"><span class=\"attr\">catagories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"><span class=\"attr\">updateDate:</span> <span class=\"number\">2018</span><span class=\"number\">-12</span><span class=\"number\">-23</span> <span class=\"number\">22</span><span class=\"string\">:26:24</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"hexo-博客搭建\">Hexo 博客搭建</span></h1>\n<p>个人博客快速搭建模板</p>\n<h2><span id=\"版权\">版权</span></h2>\n<ul>\n<li>Beantech</li>\n<li>胡伟煌</li>\n</ul>\n<h2><span id=\"安装hexo\">安装Hexo</span></h2>\n<p>npm install hexo-cli -g<br>\n如果下载速度慢的可以将npm的下载源换成国内镜像,推荐阿里巴巴的镜像.</p>\n<h2><span id=\"使用博客模板\">使用博客模板</span></h2>\n<h3><span id=\"初始化\">初始化</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 链接</span><br><span class=\"line\">cd hexo-theme</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3><span id=\"基本的hexo语法\">基本的Hexo语法</span></h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postname&quot; 新建一篇博客</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; # 新建一篇博客</span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate # 清理并且生成项目</span><br><span class=\"line\">hexo server # 在本地运行hexo服务器</span><br><span class=\"line\">hexo deploy # 部署在远端</span><br></pre></td></tr></table></figure>\n<h3><span id=\"博客插入图片格式\">博客插入图片格式</span></h3>\n<p><code>![秒速](路径)</code><br>\n<code>![](1.png)</code></p>\n<p>如果使用了markdown编辑器需要配置编辑器的相对路径.</p>\n<p>不然部署静态路径时会报错</p>\n<h2><span id=\"原来作者readme文档如下\">原来作者README文档如下</span></h2>\n<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><span id=\"live-demo\"></span></h1>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1><span id=\"usage\">Usage</span></h1>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2><span id=\"init\">Init</span></h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2><span id=\"modify\">Modify</span></h2>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3><span id=\"deployment\">Deployment</span></h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"sidebar-settings\">Sidebar settings</span></h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3><span id=\"signature-setup\">Signature Setup</span></h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"go-to-top-icon-setup\">Go to top icon Setup</span></h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3><span id=\"post-tag\">Post tag</span></h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"markdown-render\">Markdown render</span></h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">'ℬ'</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">'.intro-header h1'</span>).remove(<span class=\"string\">'.subheading'</span>).remove(<span class=\"string\">'.sidebar-container h5'</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"hexo-basics\">Hexo Basics</span></h2>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"have-fun-_\">Have fun ^_^</span></h1>\n<p>Please <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a href=\"https://github.com/YenYuHsuan\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">\"[Hexo] Theme HuWeihuang\"</span></span><br><span class=\"line\"><span class=\"attr\">catalog:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">toc_nav_num:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-18</span> <span class=\"number\">10</span><span class=\"string\">:51:24</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">\"This is hexo theme Demo.\"</span></span><br><span class=\"line\"><span class=\"attr\">header-img:</span> <span class=\"string\">\"/img/article_header/article_header.png\"</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"><span class=\"attr\">catagories:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br><span class=\"line\"><span class=\"attr\">updateDate:</span> <span class=\"number\">2018</span><span class=\"number\">-12</span><span class=\"number\">-23</span> <span class=\"number\">22</span><span class=\"string\">:26:24</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h1>Hexo 博客搭建</h1>\n<p>个人博客快速搭建模板</p>\n<h2>版权</h2>\n<ul>\n<li>Beantech</li>\n<li>胡伟煌</li>\n</ul>\n<h2>安装Hexo</h2>\n<p>npm install hexo-cli -g<br>\n如果下载速度慢的可以将npm的下载源换成国内镜像,推荐阿里巴巴的镜像.</p>\n<h2>使用博客模板</h2>\n<h3>初始化</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 链接</span><br><span class=\"line\">cd hexo-theme</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3>基本的Hexo语法</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postname&quot; 新建一篇博客</span><br><span class=\"line\">hexo new post &quot;&lt;post name&gt;&quot; # 新建一篇博客</span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate # 清理并且生成项目</span><br><span class=\"line\">hexo server # 在本地运行hexo服务器</span><br><span class=\"line\">hexo deploy # 部署在远端</span><br></pre></td></tr></table></figure>\n<h3>博客插入图片格式</h3>\n<p><code>![秒速](路径)</code><br>\n<code>![](1.png)</code></p>\n<p>如果使用了markdown编辑器需要配置编辑器的相对路径.</p>\n<p>不然部署静态路径时会报错</p>\n<h2>原来作者README文档如下</h2>\n<blockquote>\n<p>Ported Theme of <a href=\"https://github.com/Huxpro/huxpro.github.io\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>, Thank <a href=\"https://github.com/Huxpro\" target=\"_blank\" rel=\"noopener\">Huxpro</a> for designing such a flawless theme.</p>\n<p>This BeanTech theme created by <a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">YuHsuan</a> modified from the original Porter <a href=\"http://kaijun.rocks/hexo-theme-huxblog/\" target=\"_blank\" rel=\"noopener\">Kaijun</a></p>\n</blockquote>\n<h1><a href=\"http://beantech.org\" target=\"_blank\" rel=\"noopener\">Live Demo</a></h1>\n<p><img src=\"http://beantech.org/img/beantech-desktop.png\" alt=\"BeanTech Desktop\"></p>\n<h1>Usage</h1>\n<p>I publish the whole project for your convenience, so you can just follow the instruction down below, then you can easily customiz your own blog!</p>\n<p>Let’s begin!!!</p>\n<h2>Init</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/YenYuHsuan/hexo-theme-beantech.git ./hexo-beantech</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo-beantech</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h2>Modify</h2>\n<p>Modify <code>_config.yml</code> file with your own info.<br>\nEspecially the section:</p>\n<h3>Deployment</h3>\n<p>Replace to your own repo!</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Sidebar settings</h3>\n<p>Copy your avatar image to <code>&lt;root&gt;/img/</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sidebar:</span> <span class=\"literal\">true</span>    <span class=\"comment\"># whether or not using Sidebar.</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-about-description:</span> <span class=\"string\">\"&lt;your description&gt;\"</span></span><br><span class=\"line\"><span class=\"attr\">sidebar-avatar:</span> <span class=\"string\">img/&lt;your</span> <span class=\"string\">avatar</span> <span class=\"string\">path&gt;</span></span><br></pre></td></tr></table></figure>\n<p>and activate your personal widget you like</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">widgets:</span>         <span class=\"comment\"># here are widget you can use, you can comment out</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">featured-tags</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">short-about</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">recent-posts</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">friends-blog</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">archive</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">category</span></span><br></pre></td></tr></table></figure>\n<p>if you want to add sidebar widget, please add at <code>layout/_widget</code>.</p>\n<h3>Signature Setup</h3>\n<p>Copy your signature image to <code>&lt;root&gt;/img/signature</code> and modify the <code>_config.yml</code>:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">signature:</span> <span class=\"literal\">true</span>   <span class=\"comment\"># show signature</span></span><br><span class=\"line\"><span class=\"attr\">signature-img:</span> <span class=\"string\">img/signature/&lt;your-signature-ID&gt;</span></span><br></pre></td></tr></table></figure>\n<h3>Go to top icon Setup</h3>\n<p>My icon is using iron man, you can change to your own icon at <code>css/image</code>.</p>\n<h3>Post tag</h3>\n<p>You can decide to show post tags or not.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">home_posts_tag:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3>Markdown render</h3>\n<p>My markdown render engine plugin is <a href=\"https://github.com/celsomiranda/hexo-renderer-markdown-it\" target=\"_blank\" rel=\"noopener\">hexo-renderer-markdown-it</a>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Markdown-it config</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\"><span class=\"attr\">markdown:</span></span><br><span class=\"line\">  <span class=\"attr\">render:</span></span><br><span class=\"line\">    <span class=\"attr\">html:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">xhtmlOut:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">breaks:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">linkify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">typographer:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">quotes:</span> <span class=\"string\">'“”‘’'</span></span><br></pre></td></tr></table></figure>\n<p>and if you want to change the header anchor ‘ℬ’, you can go to <code>layout/post.ejs</code> to change it.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span>(<span class=\"string\">\"//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        anchors.options = &#123;</span><br><span class=\"line\">          visible: <span class=\"string\">'hover'</span>,</span><br><span class=\"line\">          placement: <span class=\"string\">'left'</span>,</span><br><span class=\"line\">          icon: <span class=\"string\">'ℬ'</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        anchors.add().remove(<span class=\"string\">'.intro-header h1'</span>).remove(<span class=\"string\">'.subheading'</span>).remove(<span class=\"string\">'.sidebar-container h5'</span>);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h2>Hexo Basics</h2>\n<p>Some hexo command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post <span class=\"string\">\"&lt;post name&gt;\"</span> <span class=\"comment\"># you can change post to another layout if you want</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate <span class=\"comment\"># generate the static file</span></span><br><span class=\"line\">hexo server <span class=\"comment\"># run hexo in local environment</span></span><br><span class=\"line\">hexo deploy <span class=\"comment\"># hexo will push the static files automatically into the specific branch(gh-pages) of your repo!</span></span><br></pre></td></tr></table></figure>\n<h1>Have fun ^_^</h1>\n<p>Please <a href=\"https://github.com/YenYuHsuan/hexo-theme-beantech\" target=\"_blank\" rel=\"noopener\">Star</a> this Project if you like it! <a href=\"https://github.com/YenYuHsuan\" target=\"_blank\" rel=\"noopener\">Follow</a> would also be appreciated!<br>\nPeace!</p>\n"},{"title":"Vue学习05-Vuex安装及使用","catalog":true,"date":"2019-08-17T02:30:35.000Z","subtitle":null,"header-img":null,"_content":"# Vuex安装及使用\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。\n## Vuex 安装\n\n","source":"_posts/Vue学习05-Vuex安装及使用.md","raw":"---\ntitle: Vue学习05-Vuex安装及使用\ncatalog: true\ndate: 2019-08-17 10:30:35\nsubtitle:\nheader-img:\ntags: [Vuex, Vue]\n---\n# Vuex安装及使用\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。\n## Vuex 安装\n\n","slug":"Vue学习05-Vuex安装及使用","published":1,"updated":"2021-04-20T13:28:10.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2x002lzgl1iieyu09a","content":"<h1><span id=\"vuex安装及使用\">Vuex安装及使用</span></h1>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p>\n<h2><span id=\"vuex-安装\">Vuex 安装</span></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1>Vuex安装及使用</h1>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p>\n<h2>Vuex 安装</h2>\n"},{"title":"并发的原子性,可见性,有序性","catalog":true,"date":"2019-09-23T01:50:37.000Z","subtitle":null,"header-img":null,"_content":"\n# 并发的原子性,可见性,有序性\nvolatile 这个关键字可能很多朋友都听说过，或许也都用过。在 Java 5 之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在 Java 5 之后，volatile 关键字才得以重获生机。\n\nvolatile 关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于 volatile 关键字是与 Java 的内存模型有关的，因此在讲述 volatile 关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了 volatile 关键字的实现原理，最后给出了几个使用 volatile 关键字的场景。\n\n## 目录大纲\n- 内存模型的相关概念\n- 并发编程中的三个概念\n- Java 内存模型\n- 深入剖析 volatile 关键字\n- 使用 volatile 关键字的场景\n\n## 内存模型的相关概念\n大家都知道，计算机在执行程序时，每条指令都是在 CPU 中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于 CPU 执行速度很快，而从内存读取数据和向内存写入数据的过程跟 CPU 执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在 CPU 里面就有了高速缓存。\n\n也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到 CPU 的高速缓存当中，那么 CPU 进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：\n\n~~~ c\ni = i + 1;\n~~~\n当线程执行这个语句时，会先从主存当中读取 i 的值，然后复制一份到高速缓存当中，然后 CPU 执行指令对 i 进行加 1 操作，然后将数据写入高速缓存，最后将高速缓存中 i 最新的值刷新到主存当中。\n\n这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核 CPU 中，每条线程可能运行于不同的 CPU 中，因此每个线程运行时有自己的高速缓存（对单核 CPU 来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核 CPU 为例。\n\n比如同时有 2 个线程执行这段代码，假如初始时 i 的值为 0，那么我们希望两个线程执行完之后 i 的值变为 2。但是事实会是这样吗？\n\n可能存在下面一种情况：初始时，两个线程分别读取 i 的值存入各自所在的 CPU 的高速缓存当中，然后线程 1 进行加 1 操作，然后把 i 的最新值 1 写入到内存。此时线程 2 的高速缓存当中 i 的值还是 0，进行加 1 操作之后，i 的值为 1，然后线程 2 把 i 的值写入内存。\n\n　　最终结果 i 的值是 1，而不是 2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。\n\n　　也就是说，如果一个变量在多个 CPU 中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。\n\n　　为了解决缓存不一致性问题，通常来说有以下 2 种解决方法：\n\n　　1）通过在总线加 LOCK# 锁的方式\n\n　　2）通过缓存一致性协议\n\n　　这 2 种方式都是硬件层面上提供的方式。\n\n　　在早期的 CPU 当中，是通过在总线上加 LOCK# 锁的形式来解决缓存不一致的问题。因为 CPU 和其他部件进行通信都是通过总线来进行的，如果对总线加 LOCK# 锁的话，也就是说阻塞了其他 CPU 对其他部件访问（如内存），从而使得只能有一个 CPU 能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了 LCOK# 锁的信号，那么只有等待这段代码完全执行完毕之后，其他 CPU 才能从变量 i 所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。\n\n　　但是上面的方式会有一个问题，由于在锁住总线期间，其他 CPU 无法访问内存，导致效率低下。\n\n　　所以就出现了缓存一致性协议。最出名的就是 Intel 的 MESI 协议，MESI 协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当 CPU 写数据时，如果发现操作的变量是共享变量，即在其他 CPU 中也存在该变量的副本，会发出信号通知其他 CPU 将该变量的缓存行置为无效状态，因此当其他 CPU 需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。\n\n![1](并发的原子性-可见性-有序性/1.jpg)\n\n## 并发编程中的三个概念\n　　在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：\n\n1. 原子性\n\n　　原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。\n\n　　一个很经典的例子就是银行账户转账问题：\n\n　　比如从账户 A 向账户 B 转 1000 元，那么必然包括 2 个操作：从账户 A 减去 1000 元，往账户 B 加上 1000 元。\n\n　　试想一下，如果这 2 个操作不具备原子性，会造成什么样的后果。假如从账户 A 减去 1000 元之后，操作突然中止。然后又从 B 取出了 500 元，取出 500 元之后，再执行 往账户 B 加上 1000 元 的操作。这样就会导致账户 A 虽然减去了 1000 元，但是账户 B 没有收到这个转过来的 1000 元。\n\n　　所以这 2 个操作必须要具备原子性才能保证不出现一些意外的问题。\n\n　　同样地反映到并发编程中会出现什么结果呢？\n\n　　举个最简单的例子，大家想一下假如为一个 32 位的变量赋值过程不具备原子性的话，会发生什么后果？\n~~~ java\ni = 9;\n~~~\n 　　假若一个线程执行到这个语句时，我暂且假设为一个 32 位的变量赋值包括两个过程：为低 16 位赋值，为高 16 位赋值。\n\n　　那么就可能发生一种情况：当将低 16 位数值写入之后，突然被中断，而此时又有一个线程去读取 i 的值，那么读取到的就是错误的数据。\n\n2. 可见性\n\n　　可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。\n\n　　举个简单的例子，看下面这段代码：\n~~~ java\n//线程1执行的代码\nint i = 0;\ni = 10;\n \n//线程2执行的代码\nj = i;\n~~~\n 　　假若执行线程 1 的是 CPU1，执行线程 2 的是 CPU2。由上面的分析可知，当线程 1 执行 i =10 这句时，会先把 i 的初始值加载到 CPU1 的高速缓存中，然后赋值为 10，那么在 CPU1 的高速缓存当中 i 的值变为 10 了，却没有立即写入到主存当中。\n\n　　此时线程 2 执行 j = i，它会先去主存读取 i 的值并加载到 CPU2 的缓存当中，注意此时内存当中 i 的值还是 0，那么就会使得 j 的值为 0，而不是 10.\n\n　　这就是可见性问题，线程 1 对变量 i 修改了之后，线程 2 没有立即看到线程 1 修改的值。\n\n3. 有序性\n\n　　有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：\n~~~ java\nint i = 0;              \nboolean flag = false;\ni = 1;                //语句1  \nflag = true;          //语句2\n~~~\n上面代码定义了一个 int 型变量，定义了一个 boolean 类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句 1 是在语句 2 前面的，那么 JVM 在真正执行这段代码的时候会保证语句 1 一定会在语句 2 前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。\n\n下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。\n\n比如上面的代码中，语句 1 和语句 2 谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句 2 先执行而语句 1 后执行。\n\n但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：\n~~~ java\nint a = 10;    //语句1\nint r = 2;    //语句2\na = a + 3;    //语句3\nr = a*a;     //语句4\n~~~\n这段代码有 4 个语句，那么可能的一个执行顺序是：\n![2](并发的原子性-可见性-有序性/2.png)\n那么可不可能是这个执行顺序呢： 语句 2   语句 1    语句 4   语句 3\n\n不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令 Instruction 2 必须用到 Instruction 1 的结果，那么处理器会保证 Instruction 1 会在 Instruction 2 之前执行。\n\n虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：\n\n~~~ java\n//线程1:\ncontext = loadContext();   //语句1\ninited = true;             //语句2\n \n//线程2:\nwhile(!inited ){\n  sleep()\n}\ndoSomethingwithconfig(context);\n~~~\n上面代码中，由于语句 1 和语句 2 没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程 1 执行过程中先执行语句 2，而此是线程 2 会以为初始化工作已经完成，那么就会跳出 while 循环，去执行 doSomethingwithconfig (context) 方法，而此时 context 并没有被初始化，就会导致程序出错。\n\n从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。\n\n也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。\n\n## Java 内存模型\n　　在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下 Java 内存模型，研究一下 Java 内存模型为我们提供了哪些保证以及在 java 中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。\n\n　　在 Java 虚拟机规范中试图定义一种 Java 内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。那么 Java 内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java 内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在 java 内存模型中，也会存在缓存一致性问题和指令重排序的问题。\n\n　　Java 内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。\n\n　　举个简单的例子：在 java 中，执行下面这个语句：\n\n~~~ java\ni  = 10;\n~~~\n 　　执行线程必须先在自己的工作线程中对变量 i 所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值 10 写入主存当中。\n\n　　那么 Java 语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？\n\n1. 原子性\n\n　　在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。\n\n　　上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子 i：\n\n　　请分析以下哪些操作是原子性操作：\n\n~~~ java\nx = 10;         //语句1\ny = x;         //语句2\nx++;           //语句3\nx = x + 1;     //语句4\n~~~\n 　　咋一看，有些朋友可能会说上面的 4 个语句中的操作都是原子性操作。其实只有语句 1 是原子性操作，其他三个语句都不是原子性操作。\n\n　　语句 1 是直接将数值 10 赋值给 x，也就是说线程执行这个语句的会直接将数值 10 写入到工作内存中。\n\n　　语句 2 实际上包含 2 个操作，它先要去读取 x 的值，再将 x 的值写入工作内存，虽然读取 x 的值以及 将 x 的值写入工作内存 这 2 个操作都是原子性操作，但是合起来就不是原子性操作了。\n\n　　同样的，x++ 和 x = x+1 包括 3 个操作：读取 x 的值，进行加 1 操作，写入新的值。\n\n 　　所以上面 4 个语句只有语句 1 的操作具备原子性。\n\n　　也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。\n\n　　不过这里有一点需要注意：在 32 位平台下，对 64 位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的 JDK 中，JVM 已经保证对 64 位数据的读取和赋值也是原子性操作了。\n\n　　从上面可以看出，Java 内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过 synchronized 和 Lock 来实现。由于 synchronized 和 Lock 能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。\n\n2. 可见性\n\n　　对于可见性，Java 提供了 volatile 关键字来保证可见性。\n\n　　当一个共享变量被 volatile 修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。\n\n　　而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。\n\n　　另外，通过 synchronized 和 Lock 也能够保证可见性，synchronized 和 Lock 能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。\n\n3. 有序性\n\n　　在 Java 内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。\n\n　　在 Java 里面，可以通过 volatile 关键字来保证一定的 “有序性”（具体原理在下一节讲述）。另外可以通过 synchronized 和 Lock 来保证有序性，很显然，synchronized 和 Lock 保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。\n\n　　另外，Java 内存模型具备一些先天的 “有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从 happens-before 原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。\n\n　　下面就来具体介绍下 happens-before 原则（先行发生原则）：\n\n程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作\n锁定规则：一个 unLock 操作先行发生于后面对同一个锁额 lock 操作\nvolatile 变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作\n传递规则：如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C\n线程启动规则：Thread 对象的 start () 方法先行发生于此线程的每个一个动作\n线程中断规则：对线程 interrupt () 方法的调用先行发生于被中断线程的代码检测到中断事件的发生\n线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过 Thread.join () 方法结束、Thread.isAlive () 的返回值手段检测到线程已经终止执行\n对象终结规则：一个对象的初始化完成先行发生于他的 finalize () 方法的开始\n　　这 8 条原则摘自《深入理解 Java 虚拟机》。\n\n　　这 8 条规则中，前 4 条规则是比较重要的，后 4 条规则都是显而易见的。\n\n　　下面我们来解释一下前 4 条规则：\n\n　　对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到 “书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。\n\n　　第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行 lock 操作。\n\n　　第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。\n\n　　第四条规则实际上就是体现 happens-before 原则具备传递性。\n\n\n\n## 参考文档\n> 并发之原子性、可见性、有序性\n> https://www.cnblogs.com/guanghe/p/9206635.html\n","source":"_posts/并发的原子性-可见性-有序性.md","raw":"---\ntitle: '并发的原子性,可见性,有序性'\ncatalog: true\ndate: 2019-09-23 09:50:37\nsubtitle:\nheader-img:\ntags: [计算机理论]\n---\n\n# 并发的原子性,可见性,有序性\nvolatile 这个关键字可能很多朋友都听说过，或许也都用过。在 Java 5 之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在 Java 5 之后，volatile 关键字才得以重获生机。\n\nvolatile 关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于 volatile 关键字是与 Java 的内存模型有关的，因此在讲述 volatile 关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了 volatile 关键字的实现原理，最后给出了几个使用 volatile 关键字的场景。\n\n## 目录大纲\n- 内存模型的相关概念\n- 并发编程中的三个概念\n- Java 内存模型\n- 深入剖析 volatile 关键字\n- 使用 volatile 关键字的场景\n\n## 内存模型的相关概念\n大家都知道，计算机在执行程序时，每条指令都是在 CPU 中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于 CPU 执行速度很快，而从内存读取数据和向内存写入数据的过程跟 CPU 执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在 CPU 里面就有了高速缓存。\n\n也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到 CPU 的高速缓存当中，那么 CPU 进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：\n\n~~~ c\ni = i + 1;\n~~~\n当线程执行这个语句时，会先从主存当中读取 i 的值，然后复制一份到高速缓存当中，然后 CPU 执行指令对 i 进行加 1 操作，然后将数据写入高速缓存，最后将高速缓存中 i 最新的值刷新到主存当中。\n\n这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核 CPU 中，每条线程可能运行于不同的 CPU 中，因此每个线程运行时有自己的高速缓存（对单核 CPU 来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核 CPU 为例。\n\n比如同时有 2 个线程执行这段代码，假如初始时 i 的值为 0，那么我们希望两个线程执行完之后 i 的值变为 2。但是事实会是这样吗？\n\n可能存在下面一种情况：初始时，两个线程分别读取 i 的值存入各自所在的 CPU 的高速缓存当中，然后线程 1 进行加 1 操作，然后把 i 的最新值 1 写入到内存。此时线程 2 的高速缓存当中 i 的值还是 0，进行加 1 操作之后，i 的值为 1，然后线程 2 把 i 的值写入内存。\n\n　　最终结果 i 的值是 1，而不是 2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。\n\n　　也就是说，如果一个变量在多个 CPU 中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。\n\n　　为了解决缓存不一致性问题，通常来说有以下 2 种解决方法：\n\n　　1）通过在总线加 LOCK# 锁的方式\n\n　　2）通过缓存一致性协议\n\n　　这 2 种方式都是硬件层面上提供的方式。\n\n　　在早期的 CPU 当中，是通过在总线上加 LOCK# 锁的形式来解决缓存不一致的问题。因为 CPU 和其他部件进行通信都是通过总线来进行的，如果对总线加 LOCK# 锁的话，也就是说阻塞了其他 CPU 对其他部件访问（如内存），从而使得只能有一个 CPU 能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了 LCOK# 锁的信号，那么只有等待这段代码完全执行完毕之后，其他 CPU 才能从变量 i 所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。\n\n　　但是上面的方式会有一个问题，由于在锁住总线期间，其他 CPU 无法访问内存，导致效率低下。\n\n　　所以就出现了缓存一致性协议。最出名的就是 Intel 的 MESI 协议，MESI 协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当 CPU 写数据时，如果发现操作的变量是共享变量，即在其他 CPU 中也存在该变量的副本，会发出信号通知其他 CPU 将该变量的缓存行置为无效状态，因此当其他 CPU 需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。\n\n![1](并发的原子性-可见性-有序性/1.jpg)\n\n## 并发编程中的三个概念\n　　在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：\n\n1. 原子性\n\n　　原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。\n\n　　一个很经典的例子就是银行账户转账问题：\n\n　　比如从账户 A 向账户 B 转 1000 元，那么必然包括 2 个操作：从账户 A 减去 1000 元，往账户 B 加上 1000 元。\n\n　　试想一下，如果这 2 个操作不具备原子性，会造成什么样的后果。假如从账户 A 减去 1000 元之后，操作突然中止。然后又从 B 取出了 500 元，取出 500 元之后，再执行 往账户 B 加上 1000 元 的操作。这样就会导致账户 A 虽然减去了 1000 元，但是账户 B 没有收到这个转过来的 1000 元。\n\n　　所以这 2 个操作必须要具备原子性才能保证不出现一些意外的问题。\n\n　　同样地反映到并发编程中会出现什么结果呢？\n\n　　举个最简单的例子，大家想一下假如为一个 32 位的变量赋值过程不具备原子性的话，会发生什么后果？\n~~~ java\ni = 9;\n~~~\n 　　假若一个线程执行到这个语句时，我暂且假设为一个 32 位的变量赋值包括两个过程：为低 16 位赋值，为高 16 位赋值。\n\n　　那么就可能发生一种情况：当将低 16 位数值写入之后，突然被中断，而此时又有一个线程去读取 i 的值，那么读取到的就是错误的数据。\n\n2. 可见性\n\n　　可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。\n\n　　举个简单的例子，看下面这段代码：\n~~~ java\n//线程1执行的代码\nint i = 0;\ni = 10;\n \n//线程2执行的代码\nj = i;\n~~~\n 　　假若执行线程 1 的是 CPU1，执行线程 2 的是 CPU2。由上面的分析可知，当线程 1 执行 i =10 这句时，会先把 i 的初始值加载到 CPU1 的高速缓存中，然后赋值为 10，那么在 CPU1 的高速缓存当中 i 的值变为 10 了，却没有立即写入到主存当中。\n\n　　此时线程 2 执行 j = i，它会先去主存读取 i 的值并加载到 CPU2 的缓存当中，注意此时内存当中 i 的值还是 0，那么就会使得 j 的值为 0，而不是 10.\n\n　　这就是可见性问题，线程 1 对变量 i 修改了之后，线程 2 没有立即看到线程 1 修改的值。\n\n3. 有序性\n\n　　有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：\n~~~ java\nint i = 0;              \nboolean flag = false;\ni = 1;                //语句1  \nflag = true;          //语句2\n~~~\n上面代码定义了一个 int 型变量，定义了一个 boolean 类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句 1 是在语句 2 前面的，那么 JVM 在真正执行这段代码的时候会保证语句 1 一定会在语句 2 前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。\n\n下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。\n\n比如上面的代码中，语句 1 和语句 2 谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句 2 先执行而语句 1 后执行。\n\n但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：\n~~~ java\nint a = 10;    //语句1\nint r = 2;    //语句2\na = a + 3;    //语句3\nr = a*a;     //语句4\n~~~\n这段代码有 4 个语句，那么可能的一个执行顺序是：\n![2](并发的原子性-可见性-有序性/2.png)\n那么可不可能是这个执行顺序呢： 语句 2   语句 1    语句 4   语句 3\n\n不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令 Instruction 2 必须用到 Instruction 1 的结果，那么处理器会保证 Instruction 1 会在 Instruction 2 之前执行。\n\n虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：\n\n~~~ java\n//线程1:\ncontext = loadContext();   //语句1\ninited = true;             //语句2\n \n//线程2:\nwhile(!inited ){\n  sleep()\n}\ndoSomethingwithconfig(context);\n~~~\n上面代码中，由于语句 1 和语句 2 没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程 1 执行过程中先执行语句 2，而此是线程 2 会以为初始化工作已经完成，那么就会跳出 while 循环，去执行 doSomethingwithconfig (context) 方法，而此时 context 并没有被初始化，就会导致程序出错。\n\n从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。\n\n也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。\n\n## Java 内存模型\n　　在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下 Java 内存模型，研究一下 Java 内存模型为我们提供了哪些保证以及在 java 中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。\n\n　　在 Java 虚拟机规范中试图定义一种 Java 内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。那么 Java 内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java 内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在 java 内存模型中，也会存在缓存一致性问题和指令重排序的问题。\n\n　　Java 内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。\n\n　　举个简单的例子：在 java 中，执行下面这个语句：\n\n~~~ java\ni  = 10;\n~~~\n 　　执行线程必须先在自己的工作线程中对变量 i 所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值 10 写入主存当中。\n\n　　那么 Java 语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？\n\n1. 原子性\n\n　　在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。\n\n　　上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子 i：\n\n　　请分析以下哪些操作是原子性操作：\n\n~~~ java\nx = 10;         //语句1\ny = x;         //语句2\nx++;           //语句3\nx = x + 1;     //语句4\n~~~\n 　　咋一看，有些朋友可能会说上面的 4 个语句中的操作都是原子性操作。其实只有语句 1 是原子性操作，其他三个语句都不是原子性操作。\n\n　　语句 1 是直接将数值 10 赋值给 x，也就是说线程执行这个语句的会直接将数值 10 写入到工作内存中。\n\n　　语句 2 实际上包含 2 个操作，它先要去读取 x 的值，再将 x 的值写入工作内存，虽然读取 x 的值以及 将 x 的值写入工作内存 这 2 个操作都是原子性操作，但是合起来就不是原子性操作了。\n\n　　同样的，x++ 和 x = x+1 包括 3 个操作：读取 x 的值，进行加 1 操作，写入新的值。\n\n 　　所以上面 4 个语句只有语句 1 的操作具备原子性。\n\n　　也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。\n\n　　不过这里有一点需要注意：在 32 位平台下，对 64 位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的 JDK 中，JVM 已经保证对 64 位数据的读取和赋值也是原子性操作了。\n\n　　从上面可以看出，Java 内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过 synchronized 和 Lock 来实现。由于 synchronized 和 Lock 能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。\n\n2. 可见性\n\n　　对于可见性，Java 提供了 volatile 关键字来保证可见性。\n\n　　当一个共享变量被 volatile 修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。\n\n　　而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。\n\n　　另外，通过 synchronized 和 Lock 也能够保证可见性，synchronized 和 Lock 能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。\n\n3. 有序性\n\n　　在 Java 内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。\n\n　　在 Java 里面，可以通过 volatile 关键字来保证一定的 “有序性”（具体原理在下一节讲述）。另外可以通过 synchronized 和 Lock 来保证有序性，很显然，synchronized 和 Lock 保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。\n\n　　另外，Java 内存模型具备一些先天的 “有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从 happens-before 原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。\n\n　　下面就来具体介绍下 happens-before 原则（先行发生原则）：\n\n程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作\n锁定规则：一个 unLock 操作先行发生于后面对同一个锁额 lock 操作\nvolatile 变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作\n传递规则：如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C\n线程启动规则：Thread 对象的 start () 方法先行发生于此线程的每个一个动作\n线程中断规则：对线程 interrupt () 方法的调用先行发生于被中断线程的代码检测到中断事件的发生\n线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过 Thread.join () 方法结束、Thread.isAlive () 的返回值手段检测到线程已经终止执行\n对象终结规则：一个对象的初始化完成先行发生于他的 finalize () 方法的开始\n　　这 8 条原则摘自《深入理解 Java 虚拟机》。\n\n　　这 8 条规则中，前 4 条规则是比较重要的，后 4 条规则都是显而易见的。\n\n　　下面我们来解释一下前 4 条规则：\n\n　　对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到 “书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。\n\n　　第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行 lock 操作。\n\n　　第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。\n\n　　第四条规则实际上就是体现 happens-before 原则具备传递性。\n\n\n\n## 参考文档\n> 并发之原子性、可见性、有序性\n> https://www.cnblogs.com/guanghe/p/9206635.html\n","slug":"并发的原子性-可见性-有序性","published":1,"updated":"2021-04-20T13:28:10.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknq2qd2y002nzgl1e2nv2aq9","content":"<h1><span id=\"并发的原子性可见性有序性\">并发的原子性,可见性,有序性</span></h1>\n<p>volatile 这个关键字可能很多朋友都听说过，或许也都用过。在 Java 5 之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在 Java 5 之后，volatile 关键字才得以重获生机。</p>\n<p>volatile 关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于 volatile 关键字是与 Java 的内存模型有关的，因此在讲述 volatile 关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了 volatile 关键字的实现原理，最后给出了几个使用 volatile 关键字的场景。</p>\n<h2><span id=\"目录大纲\">目录大纲</span></h2>\n<ul>\n<li>内存模型的相关概念</li>\n<li>并发编程中的三个概念</li>\n<li>Java 内存模型</li>\n<li>深入剖析 volatile 关键字</li>\n<li>使用 volatile 关键字的场景</li>\n</ul>\n<h2><span id=\"内存模型的相关概念\">内存模型的相关概念</span></h2>\n<p>大家都知道，计算机在执行程序时，每条指令都是在 CPU 中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于 CPU 执行速度很快，而从内存读取数据和向内存写入数据的过程跟 CPU 执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在 CPU 里面就有了高速缓存。</p>\n<p>也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到 CPU 的高速缓存当中，那么 CPU 进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = i + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>当线程执行这个语句时，会先从主存当中读取 i 的值，然后复制一份到高速缓存当中，然后 CPU 执行指令对 i 进行加 1 操作，然后将数据写入高速缓存，最后将高速缓存中 i 最新的值刷新到主存当中。</p>\n<p>这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核 CPU 中，每条线程可能运行于不同的 CPU 中，因此每个线程运行时有自己的高速缓存（对单核 CPU 来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核 CPU 为例。</p>\n<p>比如同时有 2 个线程执行这段代码，假如初始时 i 的值为 0，那么我们希望两个线程执行完之后 i 的值变为 2。但是事实会是这样吗？</p>\n<p>可能存在下面一种情况：初始时，两个线程分别读取 i 的值存入各自所在的 CPU 的高速缓存当中，然后线程 1 进行加 1 操作，然后把 i 的最新值 1 写入到内存。此时线程 2 的高速缓存当中 i 的值还是 0，进行加 1 操作之后，i 的值为 1，然后线程 2 把 i 的值写入内存。</p>\n<p>最终结果 i 的值是 1，而不是 2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p>\n<p>也就是说，如果一个变量在多个 CPU 中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。</p>\n<p>为了解决缓存不一致性问题，通常来说有以下 2 种解决方法：</p>\n<p>1）通过在总线加 LOCK# 锁的方式</p>\n<p>2）通过缓存一致性协议</p>\n<p>这 2 种方式都是硬件层面上提供的方式。</p>\n<p>在早期的 CPU 当中，是通过在总线上加 LOCK# 锁的形式来解决缓存不一致的问题。因为 CPU 和其他部件进行通信都是通过总线来进行的，如果对总线加 LOCK# 锁的话，也就是说阻塞了其他 CPU 对其他部件访问（如内存），从而使得只能有一个 CPU 能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了 LCOK# 锁的信号，那么只有等待这段代码完全执行完毕之后，其他 CPU 才能从变量 i 所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p>\n<p>但是上面的方式会有一个问题，由于在锁住总线期间，其他 CPU 无法访问内存，导致效率低下。</p>\n<p>所以就出现了缓存一致性协议。最出名的就是 Intel 的 MESI 协议，MESI 协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当 CPU 写数据时，如果发现操作的变量是共享变量，即在其他 CPU 中也存在该变量的副本，会发出信号通知其他 CPU 将该变量的缓存行置为无效状态，因此当其他 CPU 需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p>\n<p><img src=\"/2019/09/23/并发的原子性-可见性-有序性/1.jpg\" alt=\"1\"></p>\n<h2><span id=\"并发编程中的三个概念\">并发编程中的三个概念</span></h2>\n<p>在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：</p>\n<ol>\n<li>原子性</li>\n</ol>\n<p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p>\n<p>一个很经典的例子就是银行账户转账问题：</p>\n<p>比如从账户 A 向账户 B 转 1000 元，那么必然包括 2 个操作：从账户 A 减去 1000 元，往账户 B 加上 1000 元。</p>\n<p>试想一下，如果这 2 个操作不具备原子性，会造成什么样的后果。假如从账户 A 减去 1000 元之后，操作突然中止。然后又从 B 取出了 500 元，取出 500 元之后，再执行 往账户 B 加上 1000 元 的操作。这样就会导致账户 A 虽然减去了 1000 元，但是账户 B 没有收到这个转过来的 1000 元。</p>\n<p>所以这 2 个操作必须要具备原子性才能保证不出现一些意外的问题。</p>\n<p>同样地反映到并发编程中会出现什么结果呢？</p>\n<p>举个最简单的例子，大家想一下假如为一个 32 位的变量赋值过程不具备原子性的话，会发生什么后果？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">9</span>;</span><br></pre></td></tr></table></figure>\n<p>假若一个线程执行到这个语句时，我暂且假设为一个 32 位的变量赋值包括两个过程：为低 16 位赋值，为高 16 位赋值。</p>\n<p>那么就可能发生一种情况：当将低 16 位数值写入之后，突然被中断，而此时又有一个线程去读取 i 的值，那么读取到的就是错误的数据。</p>\n<ol start=\"2\">\n<li>可见性</li>\n</ol>\n<p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p>\n<p>举个简单的例子，看下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程1执行的代码</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">i = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//线程2执行的代码</span></span><br><span class=\"line\">j = i;</span><br></pre></td></tr></table></figure>\n<p>假若执行线程 1 的是 CPU1，执行线程 2 的是 CPU2。由上面的分析可知，当线程 1 执行 i =10 这句时，会先把 i 的初始值加载到 CPU1 的高速缓存中，然后赋值为 10，那么在 CPU1 的高速缓存当中 i 的值变为 10 了，却没有立即写入到主存当中。</p>\n<p>此时线程 2 执行 j = i，它会先去主存读取 i 的值并加载到 CPU2 的缓存当中，注意此时内存当中 i 的值还是 0，那么就会使得 j 的值为 0，而不是 10.</p>\n<p>这就是可见性问题，线程 1 对变量 i 修改了之后，线程 2 没有立即看到线程 1 修改的值。</p>\n<ol start=\"3\">\n<li>有序性</li>\n</ol>\n<p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;              </span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">i = <span class=\"number\">1</span>;                <span class=\"comment\">//语句1  </span></span><br><span class=\"line\">flag = <span class=\"keyword\">true</span>;          <span class=\"comment\">//语句2</span></span><br></pre></td></tr></table></figure>\n<p>上面代码定义了一个 int 型变量，定义了一个 boolean 类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句 1 是在语句 2 前面的，那么 JVM 在真正执行这段代码的时候会保证语句 1 一定会在语句 2 前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p>\n<p>下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p>\n<p>比如上面的代码中，语句 1 和语句 2 谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句 2 先执行而语句 1 后执行。</p>\n<p>但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;    <span class=\"comment\">//语句1</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> r = <span class=\"number\">2</span>;    <span class=\"comment\">//语句2</span></span><br><span class=\"line\">a = a + <span class=\"number\">3</span>;    <span class=\"comment\">//语句3</span></span><br><span class=\"line\">r = a*a;     <span class=\"comment\">//语句4</span></span><br></pre></td></tr></table></figure>\n<p>这段代码有 4 个语句，那么可能的一个执行顺序是：<br>\n<img src=\"/2019/09/23/并发的原子性-可见性-有序性/2.png\" alt=\"2\"><br>\n那么可不可能是这个执行顺序呢： 语句 2   语句 1    语句 4   语句 3</p>\n<p>不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令 Instruction 2 必须用到 Instruction 1 的结果，那么处理器会保证 Instruction 1 会在 Instruction 2 之前执行。</p>\n<p>虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程1:</span></span><br><span class=\"line\">context = loadContext();   <span class=\"comment\">//语句1</span></span><br><span class=\"line\">inited = <span class=\"keyword\">true</span>;             <span class=\"comment\">//语句2</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//线程2:</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!inited )&#123;</span><br><span class=\"line\">  sleep()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，由于语句 1 和语句 2 没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程 1 执行过程中先执行语句 2，而此是线程 2 会以为初始化工作已经完成，那么就会跳出 while 循环，去执行 doSomethingwithconfig (context) 方法，而此时 context 并没有被初始化，就会导致程序出错。</p>\n<p>从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p>\n<p>也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p>\n<h2><span id=\"java-内存模型\">Java 内存模型</span></h2>\n<p>在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下 Java 内存模型，研究一下 Java 内存模型为我们提供了哪些保证以及在 java 中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。</p>\n<p>在 Java 虚拟机规范中试图定义一种 Java 内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。那么 Java 内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java 内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在 java 内存模型中，也会存在缓存一致性问题和指令重排序的问题。</p>\n<p>Java 内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p>\n<p>举个简单的例子：在 java 中，执行下面这个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>执行线程必须先在自己的工作线程中对变量 i 所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值 10 写入主存当中。</p>\n<p>那么 Java 语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？</p>\n<ol>\n<li>原子性</li>\n</ol>\n<p>在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p>\n<p>上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子 i：</p>\n<p>请分析以下哪些操作是原子性操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span>;         <span class=\"comment\">//语句1</span></span><br><span class=\"line\">y = x;         <span class=\"comment\">//语句2</span></span><br><span class=\"line\">x++;           <span class=\"comment\">//语句3</span></span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;     <span class=\"comment\">//语句4</span></span><br></pre></td></tr></table></figure>\n<p>咋一看，有些朋友可能会说上面的 4 个语句中的操作都是原子性操作。其实只有语句 1 是原子性操作，其他三个语句都不是原子性操作。</p>\n<p>语句 1 是直接将数值 10 赋值给 x，也就是说线程执行这个语句的会直接将数值 10 写入到工作内存中。</p>\n<p>语句 2 实际上包含 2 个操作，它先要去读取 x 的值，再将 x 的值写入工作内存，虽然读取 x 的值以及 将 x 的值写入工作内存 这 2 个操作都是原子性操作，但是合起来就不是原子性操作了。</p>\n<p>同样的，x++ 和 x = x+1 包括 3 个操作：读取 x 的值，进行加 1 操作，写入新的值。</p>\n<p>所以上面 4 个语句只有语句 1 的操作具备原子性。</p>\n<p>也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p>\n<p>不过这里有一点需要注意：在 32 位平台下，对 64 位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的 JDK 中，JVM 已经保证对 64 位数据的读取和赋值也是原子性操作了。</p>\n<p>从上面可以看出，Java 内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过 synchronized 和 Lock 来实现。由于 synchronized 和 Lock 能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p>\n<ol start=\"2\">\n<li>可见性</li>\n</ol>\n<p>对于可见性，Java 提供了 volatile 关键字来保证可见性。</p>\n<p>当一个共享变量被 volatile 修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p>\n<p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p>\n<p>另外，通过 synchronized 和 Lock 也能够保证可见性，synchronized 和 Lock 能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>\n<ol start=\"3\">\n<li>有序性</li>\n</ol>\n<p>在 Java 内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>\n<p>在 Java 里面，可以通过 volatile 关键字来保证一定的 “有序性”（具体原理在下一节讲述）。另外可以通过 synchronized 和 Lock 来保证有序性，很显然，synchronized 和 Lock 保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p>\n<p>另外，Java 内存模型具备一些先天的 “有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从 happens-before 原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p>\n<p>下面就来具体介绍下 happens-before 原则（先行发生原则）：</p>\n<p>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作<br>\n锁定规则：一个 unLock 操作先行发生于后面对同一个锁额 lock 操作<br>\nvolatile 变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作<br>\n传递规则：如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C<br>\n线程启动规则：Thread 对象的 start () 方法先行发生于此线程的每个一个动作<br>\n线程中断规则：对线程 interrupt () 方法的调用先行发生于被中断线程的代码检测到中断事件的发生<br>\n线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过 Thread.join () 方法结束、Thread.isAlive () 的返回值手段检测到线程已经终止执行<br>\n对象终结规则：一个对象的初始化完成先行发生于他的 finalize () 方法的开始<br>\n　　这 8 条原则摘自《深入理解 Java 虚拟机》。</p>\n<p>这 8 条规则中，前 4 条规则是比较重要的，后 4 条规则都是显而易见的。</p>\n<p>下面我们来解释一下前 4 条规则：</p>\n<p>对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到 “书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p>\n<p>第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行 lock 操作。</p>\n<p>第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p>\n<p>第四条规则实际上就是体现 happens-before 原则具备传递性。</p>\n<h2><span id=\"参考文档\">参考文档</span></h2>\n<blockquote>\n<p>并发之原子性、可见性、有序性<br>\n<a href=\"https://www.cnblogs.com/guanghe/p/9206635.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/guanghe/p/9206635.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1>并发的原子性,可见性,有序性</h1>\n<p>volatile 这个关键字可能很多朋友都听说过，或许也都用过。在 Java 5 之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在 Java 5 之后，volatile 关键字才得以重获生机。</p>\n<p>volatile 关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于 volatile 关键字是与 Java 的内存模型有关的，因此在讲述 volatile 关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了 volatile 关键字的实现原理，最后给出了几个使用 volatile 关键字的场景。</p>\n<h2>目录大纲</h2>\n<ul>\n<li>内存模型的相关概念</li>\n<li>并发编程中的三个概念</li>\n<li>Java 内存模型</li>\n<li>深入剖析 volatile 关键字</li>\n<li>使用 volatile 关键字的场景</li>\n</ul>\n<h2>内存模型的相关概念</h2>\n<p>大家都知道，计算机在执行程序时，每条指令都是在 CPU 中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于 CPU 执行速度很快，而从内存读取数据和向内存写入数据的过程跟 CPU 执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在 CPU 里面就有了高速缓存。</p>\n<p>也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到 CPU 的高速缓存当中，那么 CPU 进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = i + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>当线程执行这个语句时，会先从主存当中读取 i 的值，然后复制一份到高速缓存当中，然后 CPU 执行指令对 i 进行加 1 操作，然后将数据写入高速缓存，最后将高速缓存中 i 最新的值刷新到主存当中。</p>\n<p>这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核 CPU 中，每条线程可能运行于不同的 CPU 中，因此每个线程运行时有自己的高速缓存（对单核 CPU 来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核 CPU 为例。</p>\n<p>比如同时有 2 个线程执行这段代码，假如初始时 i 的值为 0，那么我们希望两个线程执行完之后 i 的值变为 2。但是事实会是这样吗？</p>\n<p>可能存在下面一种情况：初始时，两个线程分别读取 i 的值存入各自所在的 CPU 的高速缓存当中，然后线程 1 进行加 1 操作，然后把 i 的最新值 1 写入到内存。此时线程 2 的高速缓存当中 i 的值还是 0，进行加 1 操作之后，i 的值为 1，然后线程 2 把 i 的值写入内存。</p>\n<p>最终结果 i 的值是 1，而不是 2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p>\n<p>也就是说，如果一个变量在多个 CPU 中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。</p>\n<p>为了解决缓存不一致性问题，通常来说有以下 2 种解决方法：</p>\n<p>1）通过在总线加 LOCK# 锁的方式</p>\n<p>2）通过缓存一致性协议</p>\n<p>这 2 种方式都是硬件层面上提供的方式。</p>\n<p>在早期的 CPU 当中，是通过在总线上加 LOCK# 锁的形式来解决缓存不一致的问题。因为 CPU 和其他部件进行通信都是通过总线来进行的，如果对总线加 LOCK# 锁的话，也就是说阻塞了其他 CPU 对其他部件访问（如内存），从而使得只能有一个 CPU 能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了 LCOK# 锁的信号，那么只有等待这段代码完全执行完毕之后，其他 CPU 才能从变量 i 所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p>\n<p>但是上面的方式会有一个问题，由于在锁住总线期间，其他 CPU 无法访问内存，导致效率低下。</p>\n<p>所以就出现了缓存一致性协议。最出名的就是 Intel 的 MESI 协议，MESI 协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当 CPU 写数据时，如果发现操作的变量是共享变量，即在其他 CPU 中也存在该变量的副本，会发出信号通知其他 CPU 将该变量的缓存行置为无效状态，因此当其他 CPU 需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p>\n<p><img src=\"/2019/09/23/并发的原子性-可见性-有序性/1.jpg\" alt=\"1\"></p>\n<h2>并发编程中的三个概念</h2>\n<p>在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：</p>\n<ol>\n<li>原子性</li>\n</ol>\n<p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p>\n<p>一个很经典的例子就是银行账户转账问题：</p>\n<p>比如从账户 A 向账户 B 转 1000 元，那么必然包括 2 个操作：从账户 A 减去 1000 元，往账户 B 加上 1000 元。</p>\n<p>试想一下，如果这 2 个操作不具备原子性，会造成什么样的后果。假如从账户 A 减去 1000 元之后，操作突然中止。然后又从 B 取出了 500 元，取出 500 元之后，再执行 往账户 B 加上 1000 元 的操作。这样就会导致账户 A 虽然减去了 1000 元，但是账户 B 没有收到这个转过来的 1000 元。</p>\n<p>所以这 2 个操作必须要具备原子性才能保证不出现一些意外的问题。</p>\n<p>同样地反映到并发编程中会出现什么结果呢？</p>\n<p>举个最简单的例子，大家想一下假如为一个 32 位的变量赋值过程不具备原子性的话，会发生什么后果？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">9</span>;</span><br></pre></td></tr></table></figure>\n<p>假若一个线程执行到这个语句时，我暂且假设为一个 32 位的变量赋值包括两个过程：为低 16 位赋值，为高 16 位赋值。</p>\n<p>那么就可能发生一种情况：当将低 16 位数值写入之后，突然被中断，而此时又有一个线程去读取 i 的值，那么读取到的就是错误的数据。</p>\n<ol start=\"2\">\n<li>可见性</li>\n</ol>\n<p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p>\n<p>举个简单的例子，看下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程1执行的代码</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">i = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//线程2执行的代码</span></span><br><span class=\"line\">j = i;</span><br></pre></td></tr></table></figure>\n<p>假若执行线程 1 的是 CPU1，执行线程 2 的是 CPU2。由上面的分析可知，当线程 1 执行 i =10 这句时，会先把 i 的初始值加载到 CPU1 的高速缓存中，然后赋值为 10，那么在 CPU1 的高速缓存当中 i 的值变为 10 了，却没有立即写入到主存当中。</p>\n<p>此时线程 2 执行 j = i，它会先去主存读取 i 的值并加载到 CPU2 的缓存当中，注意此时内存当中 i 的值还是 0，那么就会使得 j 的值为 0，而不是 10.</p>\n<p>这就是可见性问题，线程 1 对变量 i 修改了之后，线程 2 没有立即看到线程 1 修改的值。</p>\n<ol start=\"3\">\n<li>有序性</li>\n</ol>\n<p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;              </span><br><span class=\"line\"><span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">i = <span class=\"number\">1</span>;                <span class=\"comment\">//语句1  </span></span><br><span class=\"line\">flag = <span class=\"keyword\">true</span>;          <span class=\"comment\">//语句2</span></span><br></pre></td></tr></table></figure>\n<p>上面代码定义了一个 int 型变量，定义了一个 boolean 类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句 1 是在语句 2 前面的，那么 JVM 在真正执行这段代码的时候会保证语句 1 一定会在语句 2 前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p>\n<p>下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p>\n<p>比如上面的代码中，语句 1 和语句 2 谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句 2 先执行而语句 1 后执行。</p>\n<p>但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;    <span class=\"comment\">//语句1</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> r = <span class=\"number\">2</span>;    <span class=\"comment\">//语句2</span></span><br><span class=\"line\">a = a + <span class=\"number\">3</span>;    <span class=\"comment\">//语句3</span></span><br><span class=\"line\">r = a*a;     <span class=\"comment\">//语句4</span></span><br></pre></td></tr></table></figure>\n<p>这段代码有 4 个语句，那么可能的一个执行顺序是：<br>\n<img src=\"/2019/09/23/并发的原子性-可见性-有序性/2.png\" alt=\"2\"><br>\n那么可不可能是这个执行顺序呢： 语句 2   语句 1    语句 4   语句 3</p>\n<p>不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令 Instruction 2 必须用到 Instruction 1 的结果，那么处理器会保证 Instruction 1 会在 Instruction 2 之前执行。</p>\n<p>虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程1:</span></span><br><span class=\"line\">context = loadContext();   <span class=\"comment\">//语句1</span></span><br><span class=\"line\">inited = <span class=\"keyword\">true</span>;             <span class=\"comment\">//语句2</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//线程2:</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!inited )&#123;</span><br><span class=\"line\">  sleep()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，由于语句 1 和语句 2 没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程 1 执行过程中先执行语句 2，而此是线程 2 会以为初始化工作已经完成，那么就会跳出 while 循环，去执行 doSomethingwithconfig (context) 方法，而此时 context 并没有被初始化，就会导致程序出错。</p>\n<p>从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p>\n<p>也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p>\n<h2>Java 内存模型</h2>\n<p>在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下 Java 内存模型，研究一下 Java 内存模型为我们提供了哪些保证以及在 java 中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。</p>\n<p>在 Java 虚拟机规范中试图定义一种 Java 内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。那么 Java 内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java 内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在 java 内存模型中，也会存在缓存一致性问题和指令重排序的问题。</p>\n<p>Java 内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p>\n<p>举个简单的例子：在 java 中，执行下面这个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>执行线程必须先在自己的工作线程中对变量 i 所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值 10 写入主存当中。</p>\n<p>那么 Java 语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？</p>\n<ol>\n<li>原子性</li>\n</ol>\n<p>在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p>\n<p>上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子 i：</p>\n<p>请分析以下哪些操作是原子性操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span>;         <span class=\"comment\">//语句1</span></span><br><span class=\"line\">y = x;         <span class=\"comment\">//语句2</span></span><br><span class=\"line\">x++;           <span class=\"comment\">//语句3</span></span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;     <span class=\"comment\">//语句4</span></span><br></pre></td></tr></table></figure>\n<p>咋一看，有些朋友可能会说上面的 4 个语句中的操作都是原子性操作。其实只有语句 1 是原子性操作，其他三个语句都不是原子性操作。</p>\n<p>语句 1 是直接将数值 10 赋值给 x，也就是说线程执行这个语句的会直接将数值 10 写入到工作内存中。</p>\n<p>语句 2 实际上包含 2 个操作，它先要去读取 x 的值，再将 x 的值写入工作内存，虽然读取 x 的值以及 将 x 的值写入工作内存 这 2 个操作都是原子性操作，但是合起来就不是原子性操作了。</p>\n<p>同样的，x++ 和 x = x+1 包括 3 个操作：读取 x 的值，进行加 1 操作，写入新的值。</p>\n<p>所以上面 4 个语句只有语句 1 的操作具备原子性。</p>\n<p>也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p>\n<p>不过这里有一点需要注意：在 32 位平台下，对 64 位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的 JDK 中，JVM 已经保证对 64 位数据的读取和赋值也是原子性操作了。</p>\n<p>从上面可以看出，Java 内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过 synchronized 和 Lock 来实现。由于 synchronized 和 Lock 能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p>\n<ol start=\"2\">\n<li>可见性</li>\n</ol>\n<p>对于可见性，Java 提供了 volatile 关键字来保证可见性。</p>\n<p>当一个共享变量被 volatile 修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p>\n<p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p>\n<p>另外，通过 synchronized 和 Lock 也能够保证可见性，synchronized 和 Lock 能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>\n<ol start=\"3\">\n<li>有序性</li>\n</ol>\n<p>在 Java 内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>\n<p>在 Java 里面，可以通过 volatile 关键字来保证一定的 “有序性”（具体原理在下一节讲述）。另外可以通过 synchronized 和 Lock 来保证有序性，很显然，synchronized 和 Lock 保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p>\n<p>另外，Java 内存模型具备一些先天的 “有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从 happens-before 原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p>\n<p>下面就来具体介绍下 happens-before 原则（先行发生原则）：</p>\n<p>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作<br>\n锁定规则：一个 unLock 操作先行发生于后面对同一个锁额 lock 操作<br>\nvolatile 变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作<br>\n传递规则：如果操作 A 先行发生于操作 B，而操作 B 又先行发生于操作 C，则可以得出操作 A 先行发生于操作 C<br>\n线程启动规则：Thread 对象的 start () 方法先行发生于此线程的每个一个动作<br>\n线程中断规则：对线程 interrupt () 方法的调用先行发生于被中断线程的代码检测到中断事件的发生<br>\n线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过 Thread.join () 方法结束、Thread.isAlive () 的返回值手段检测到线程已经终止执行<br>\n对象终结规则：一个对象的初始化完成先行发生于他的 finalize () 方法的开始<br>\n　　这 8 条原则摘自《深入理解 Java 虚拟机》。</p>\n<p>这 8 条规则中，前 4 条规则是比较重要的，后 4 条规则都是显而易见的。</p>\n<p>下面我们来解释一下前 4 条规则：</p>\n<p>对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到 “书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p>\n<p>第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行 lock 操作。</p>\n<p>第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p>\n<p>第四条规则实际上就是体现 happens-before 原则具备传递性。</p>\n<h2>参考文档</h2>\n<blockquote>\n<p>并发之原子性、可见性、有序性<br>\n<a href=\"https://www.cnblogs.com/guanghe/p/9206635.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/guanghe/p/9206635.html</a></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-false.png","slug":"home_posts_tag-false.png","post":"cknq2qd2t002czgl1m5o7weqv","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/home_posts_tag-true.png","slug":"home_posts_tag-true.png","post":"cknq2qd2t002czgl1m5o7weqv","modified":0,"renderable":0},{"_id":"source/_posts/Axios学习1-实现异步通信/axios.png","slug":"axios.png","post":"cknq2qd1d0001zgl1se4d3bhx","modified":0,"renderable":0},{"_id":"source/_posts/Axios学习2-跨域通信/Access.png","slug":"Access.png","post":"cknq2qd1h0003zgl14vyk5x77","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Registry学习2-简介与安装/1.png","slug":"1.png","post":"cknq2qd1n0008zgl1p34zc2m0","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习14-Docker-Compose-的使用/1.png","slug":"1.png","post":"cknq2qd1y000ozgl1lvyblr01","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像2/mydocker.png","slug":"mydocker.png","post":"cknq2qd2c001hzgl1hct8g5l8","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习2-Maven仓库介绍/1.png","slug":"1.png","post":"cknq2qd2f001pzgl1805fei8t","modified":0,"renderable":0},{"_id":"source/_posts/GitLab学习1-使用git托管代码/1.png","slug":"1.png","post":"cknq2qd2e001mzgl1xoj64tim","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习01-安装及使用/dataDriver.png","slug":"dataDriver.png","post":"cknq2qd2i001vzgl1cqnvuice","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习03-生命周期函数/vueLifeLoop.jpg","slug":"vueLifeLoop.jpg","post":"cknq2qd2q0027zgl1iq1erl5y","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Registry学习1-Docker部署镜像/1.png","slug":"1.png","post":"cknq2qd1u000gzgl10jno5xmj","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Registry学习1-Docker部署镜像/2.png","slug":"2.png","post":"cknq2qd1u000gzgl10jno5xmj","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习5-Docker基本指令/1.png","slug":"1.png","post":"cknq2qd22000wzgl15txjnlsc","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习5-Docker基本指令/2.png","slug":"2.png","post":"cknq2qd22000wzgl15txjnlsc","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/1.png","slug":"1.png","post":"cknq2qd270016zgl1250a7czn","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像4-Dockerfile指令详解/2.png","slug":"2.png","post":"cknq2qd270016zgl1250a7czn","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习7-Docker容器/1.png","slug":"1.png","post":"cknq2qd280018zgl14dfbbbtp","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习7-Docker容器/2.png","slug":"2.png","post":"cknq2qd280018zgl14dfbbbtp","modified":0,"renderable":0},{"_id":"source/_posts/并发的原子性-可见性-有序性/1.jpg","slug":"1.jpg","post":"cknq2qd2y002nzgl1e2nv2aq9","modified":0,"renderable":0},{"_id":"source/_posts/并发的原子性-可见性-有序性/2.png","slug":"2.png","post":"cknq2qd2y002nzgl1e2nv2aq9","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习10-部署数据库/1.png","slug":"1.png","post":"cknq2qd1r000czgl1lpe05o4v","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习10-部署数据库/2.png","slug":"2.png","post":"cknq2qd1r000czgl1lpe05o4v","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习10-部署数据库/3.png","slug":"3.png","post":"cknq2qd1r000czgl1lpe05o4v","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习17-Docker-Compose-部署项目到容器/1.png","slug":"1.png","post":"cknq2qd21000uzgl1u2ysaw1q","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习17-Docker-Compose-部署项目到容器/2.png","slug":"2.png","post":"cknq2qd21000uzgl1u2ysaw1q","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习17-Docker-Compose-部署项目到容器/3.png","slug":"3.png","post":"cknq2qd21000uzgl1u2ysaw1q","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像1/8080.png","slug":"8080.png","post":"cknq2qd250011zgl1qc08x4so","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像1/8081.png","slug":"8081.png","post":"cknq2qd250011zgl1qc08x4so","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习6-Dockerfile定制镜像1/hellodocker.png","slug":"hellodocker.png","post":"cknq2qd250011zgl1qc08x4so","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习9-Docker数据卷/1.png","slug":"1.png","post":"cknq2qd2a001czgl1ntvwnrec","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习9-Docker数据卷/2.png","slug":"2.png","post":"cknq2qd2a001czgl1ntvwnrec","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习9-Docker数据卷/3.png","slug":"3.png","post":"cknq2qd2a001czgl1ntvwnrec","modified":0,"renderable":0},{"_id":"source/_posts/GitLab学习2-GitLab的使用/1.png","slug":"1.png","post":"cknq2qd2h001tzgl1ek1n2ydk","modified":0,"renderable":0},{"_id":"source/_posts/GitLab学习2-GitLab的使用/2.png","slug":"2.png","post":"cknq2qd2h001tzgl1ek1n2ydk","modified":0,"renderable":0},{"_id":"source/_posts/GitLab学习2-GitLab的使用/3.png","slug":"3.png","post":"cknq2qd2h001tzgl1ek1n2ydk","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习02-Vue语法/v-for.png","slug":"v-for.png","post":"cknq2qd2p0024zgl1js7848fv","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习02-Vue语法/v-on.png","slug":"v-on.png","post":"cknq2qd2p0024zgl1js7848fv","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习02-Vue语法/v-on1.png","slug":"v-on1.png","post":"cknq2qd2p0024zgl1js7848fv","modified":0,"renderable":0},{"_id":"source/_posts/hexo-theme-beantech/Demo.png","slug":"Demo.png","post":"cknq2qd2t002czgl1m5o7weqv","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/1.png","slug":"1.png","post":"cknq2qd1o0009zgl15sg56jhh","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/2.png","slug":"2.png","post":"cknq2qd1o0009zgl15sg56jhh","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/3.png","slug":"3.png","post":"cknq2qd1o0009zgl15sg56jhh","modified":0,"renderable":0},{"_id":"source/_posts/Docker-Registry学习3-配置WebUI与客户端/4.png","slug":"4.png","post":"cknq2qd1o0009zgl15sg56jhh","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/1.png","slug":"1.png","post":"cknq2qd2g001rzgl168svr9fn","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/2.png","slug":"2.png","post":"cknq2qd2g001rzgl168svr9fn","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/3.png","slug":"3.png","post":"cknq2qd2g001rzgl168svr9fn","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习1-Nexus简介与安装/4.png","slug":"4.png","post":"cknq2qd2g001rzgl168svr9fn","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/1.png","slug":"1.png","post":"cknq2qd2m001yzgl1bbg7hfvc","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/2.png","slug":"2.png","post":"cknq2qd2m001yzgl1bbg7hfvc","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/3.png","slug":"3.png","post":"cknq2qd2m001yzgl1bbg7hfvc","modified":0,"renderable":0},{"_id":"source/_posts/Nexus学习3-在项目中使用maven私库/4.png","slug":"4.png","post":"cknq2qd2m001yzgl1bbg7hfvc","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvc.png","slug":"mvc.png","post":"cknq2qd2n0020zgl1hpvtvpg4","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvm.png","slug":"mvvm.png","post":"cknq2qd2n0020zgl1hpvtvpg4","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/mvvmVue.png","slug":"mvvmVue.png","post":"cknq2qd2n0020zgl1hpvtvpg4","modified":0,"renderable":0},{"_id":"source/_posts/Vue学习00-Vue学习之前需要了解的知识/web.png","slug":"web.png","post":"cknq2qd2n0020zgl1hpvtvpg4","modified":0,"renderable":0},{"_id":"source/_posts/Brook科学上网必备/IMG_4987.PNG","slug":"IMG_4987.PNG","post":"cknq2qd1l0006zgl12ducojw2","modified":0,"renderable":0},{"_id":"source/_posts/Brook科学上网必备/QQ截图20201226223304.png","slug":"QQ截图20201226223304.png","post":"cknq2qd1l0006zgl12ducojw2","modified":0,"renderable":0},{"_id":"source/_posts/Brook科学上网必备/QQ截图20201226223632.png","slug":"QQ截图20201226223632.png","post":"cknq2qd1l0006zgl12ducojw2","modified":0,"renderable":0},{"_id":"source/_posts/Brook科学上网必备/QQ截图20201226223743.png","slug":"QQ截图20201226223743.png","post":"cknq2qd1l0006zgl12ducojw2","modified":0,"renderable":0},{"_id":"source/_posts/Brook科学上网必备/微信图片_20201226221856.png","slug":"微信图片_20201226221856.png","post":"cknq2qd1l0006zgl12ducojw2","modified":0,"renderable":0},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320114607638.png","slug":"image-20210320114607638.png","post":"cknq2qd2d001kzgl17pxpksi4","modified":0,"renderable":0},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320114913928.png","slug":"image-20210320114913928.png","post":"cknq2qd2d001kzgl17pxpksi4","modified":0,"renderable":0},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320115328701.png","slug":"image-20210320115328701.png","post":"cknq2qd2d001kzgl17pxpksi4","modified":0,"renderable":0},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320115617696.png","slug":"image-20210320115617696.png","post":"cknq2qd2d001kzgl17pxpksi4","modified":0,"renderable":0},{"_id":"source/_posts/GCP上搭建虚拟服务器VPS/image-20210320122741827.png","slug":"image-20210320122741827.png","post":"cknq2qd2d001kzgl17pxpksi4","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/1.png","slug":"1.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/2.png","slug":"2.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/3.png","slug":"3.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/4.png","slug":"4.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/5.png","slug":"5.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/6.png","slug":"6.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/7.png","slug":"7.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/8.png","slug":"8.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/Docker学习11-部署项目到容器/9.png","slug":"9.png","post":"cknq2qd1q000bzgl1bsvjpink","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/1.png","slug":"1.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/10.png","slug":"10.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/11.png","slug":"11.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/12.png","slug":"12.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/13.png","slug":"13.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/14.png","slug":"14.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/15.png","slug":"15.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/16.png","slug":"16.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/17.png","slug":"17.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/18.png","slug":"18.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/19.png","slug":"19.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/2.png","slug":"2.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/20.png","slug":"20.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/21.png","slug":"21.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/22.png","slug":"22.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/23.png","slug":"23.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/24.png","slug":"24.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/25.png","slug":"25.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/26.png","slug":"26.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/27.png","slug":"27.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/28.png","slug":"28.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/29.png","slug":"29.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/3.png","slug":"3.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/30.png","slug":"30.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/31.png","slug":"31.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/32.png","slug":"32.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/33.png","slug":"33.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/34.png","slug":"34.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/35.png","slug":"35.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/36.png","slug":"36.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/37.png","slug":"37.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/38.png","slug":"38.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/39.png","slug":"39.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/4.png","slug":"4.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/40.PNG","slug":"40.PNG","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/41.png","slug":"41.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/42.png","slug":"42.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/43.png","slug":"43.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/5.png","slug":"5.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/6.png","slug":"6.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/7.png","slug":"7.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/8.png","slug":"8.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0},{"_id":"source/_posts/VMware虚拟工作站1-安装与使用Linux篇1/9.png","slug":"9.png","post":"cknq2qd2o0022zgl1iu8c37qd","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cknq2qd1d0001zgl1se4d3bhx","tag_id":"cknq2qd1j0005zgl1wbc8ec2d","_id":"cknq2qd1u000fzgl16cebao1o"},{"post_id":"cknq2qd1d0001zgl1se4d3bhx","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd1v000hzgl1l50dsgb7"},{"post_id":"cknq2qd1h0003zgl14vyk5x77","tag_id":"cknq2qd1j0005zgl1wbc8ec2d","_id":"cknq2qd1y000nzgl118q9fmja"},{"post_id":"cknq2qd1h0003zgl14vyk5x77","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd1z000pzgl1sr7ssidx"},{"post_id":"cknq2qd1l0006zgl12ducojw2","tag_id":"cknq2qd1x000lzgl1ebuz9ngs","_id":"cknq2qd22000vzgl18g9k0dhs"},{"post_id":"cknq2qd1l0006zgl12ducojw2","tag_id":"cknq2qd1z000qzgl161eabzcd","_id":"cknq2qd23000xzgl1w98e829l"},{"post_id":"cknq2qd22000wzgl15txjnlsc","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd250010zgl1nwlilp8v"},{"post_id":"cknq2qd1q000bzgl1bsvjpink","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd260012zgl1cjnyhqj1"},{"post_id":"cknq2qd1r000czgl1lpe05o4v","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd270015zgl1p0pg75zj"},{"post_id":"cknq2qd260013zgl18d5vlk2a","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd280017zgl11qy5d4ew"},{"post_id":"cknq2qd280018zgl14dfbbbtp","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd29001bzgl13n1scofp"},{"post_id":"cknq2qd29001azgl1ray0gh9p","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2b001ezgl10ebsrcbh"},{"post_id":"cknq2qd1t000ezgl15svgro23","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2c001gzgl1a1ts6zvj"},{"post_id":"cknq2qd1t000ezgl15svgro23","tag_id":"cknq2qd290019zgl1yjbyd8zh","_id":"cknq2qd2d001jzgl10nrcq929"},{"post_id":"cknq2qd2a001czgl1ntvwnrec","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2e001lzgl17dgvgyxt"},{"post_id":"cknq2qd2b001fzgl1xoc5el25","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2f001ozgl1fysf2brp"},{"post_id":"cknq2qd1v000jzgl17jrwc825","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2g001qzgl1aqxeuk0z"},{"post_id":"cknq2qd1w000kzgl1yumtl9gw","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2i001uzgl1dmznxlls"},{"post_id":"cknq2qd1w000kzgl1yumtl9gw","tag_id":"cknq2qd290019zgl1yjbyd8zh","_id":"cknq2qd2j001wzgl16yttnjap"},{"post_id":"cknq2qd2i001vzgl1cqnvuice","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd2n001zzgl189f6u94d"},{"post_id":"cknq2qd1x000mzgl1dqq92tti","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2p0023zgl1lojnzx48"},{"post_id":"cknq2qd1x000mzgl1dqq92tti","tag_id":"cknq2qd290019zgl1yjbyd8zh","_id":"cknq2qd2q0025zgl1jo7cv0hh"},{"post_id":"cknq2qd2p0024zgl1js7848fv","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd2r0028zgl1oxxm6bu1"},{"post_id":"cknq2qd2q0027zgl1iq1erl5y","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd2s002bzgl1w5ocyl1y"},{"post_id":"cknq2qd1y000ozgl1lvyblr01","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2u002dzgl1x76whf4u"},{"post_id":"cknq2qd1y000ozgl1lvyblr01","tag_id":"cknq2qd290019zgl1yjbyd8zh","_id":"cknq2qd2v002gzgl1r1um9qhw"},{"post_id":"cknq2qd2u002ezgl13xswqxts","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd2w002izgl1hseu0jr1"},{"post_id":"cknq2qd1z000rzgl19a9izi0x","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2y002mzgl1pgkc48f8"},{"post_id":"cknq2qd1z000rzgl19a9izi0x","tag_id":"cknq2qd290019zgl1yjbyd8zh","_id":"cknq2qd2y002ozgl10bh4s1le"},{"post_id":"cknq2qd20000szgl1eoefmc95","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd2z002qzgl19qqxv2px"},{"post_id":"cknq2qd24000yzgl1ziohxxsh","tag_id":"cknq2qd2y002pzgl17iadfn5p","_id":"cknq2qd2z002szgl1p07j679t"},{"post_id":"cknq2qd250011zgl1qc08x4so","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd30002uzgl18qi5wzs3"},{"post_id":"cknq2qd250011zgl1qc08x4so","tag_id":"cknq2qd2z002rzgl1sb98hemb","_id":"cknq2qd30002vzgl1tv1owg25"},{"post_id":"cknq2qd270016zgl1250a7czn","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd30002xzgl18faaa0vd"},{"post_id":"cknq2qd270016zgl1250a7czn","tag_id":"cknq2qd2z002rzgl1sb98hemb","_id":"cknq2qd30002yzgl1xkrzb44m"},{"post_id":"cknq2qd2c001hzgl1hct8g5l8","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd310030zgl1b2zy0eve"},{"post_id":"cknq2qd2c001hzgl1hct8g5l8","tag_id":"cknq2qd2z002rzgl1sb98hemb","_id":"cknq2qd310031zgl1nrlx61j7"},{"post_id":"cknq2qd2d001kzgl17pxpksi4","tag_id":"cknq2qd31002zzgl1ewzdysvi","_id":"cknq2qd320034zgl13exx7har"},{"post_id":"cknq2qd2d001kzgl17pxpksi4","tag_id":"cknq2qd310032zgl1vkld50hb","_id":"cknq2qd320035zgl14z0pbcnv"},{"post_id":"cknq2qd2e001mzgl1xoj64tim","tag_id":"cknq2qd310033zgl10qgk248e","_id":"cknq2qd330038zgl1cvwtyeew"},{"post_id":"cknq2qd2e001mzgl1xoj64tim","tag_id":"cknq2qd320036zgl1fuezqw5p","_id":"cknq2qd330039zgl1pphes7pn"},{"post_id":"cknq2qd2e001mzgl1xoj64tim","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd33003bzgl109c15jsm"},{"post_id":"cknq2qd2h001tzgl1ek1n2ydk","tag_id":"cknq2qd310033zgl10qgk248e","_id":"cknq2qd33003dzgl1ozejnjhi"},{"post_id":"cknq2qd2h001tzgl1ek1n2ydk","tag_id":"cknq2qd33003azgl1fqpn64s0","_id":"cknq2qd34003ezgl1xboo0kxe"},{"post_id":"cknq2qd2h001tzgl1ek1n2ydk","tag_id":"cknq2qd21000tzgl1h26vyoxw","_id":"cknq2qd34003gzgl15bsz85kh"},{"post_id":"cknq2qd2n0020zgl1hpvtvpg4","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd34003izgl1bvwldh34"},{"post_id":"cknq2qd2n0020zgl1hpvtvpg4","tag_id":"cknq2qd33003czgl1utgj4kxg","_id":"cknq2qd34003jzgl1pxqm4ifv"},{"post_id":"cknq2qd2n0020zgl1hpvtvpg4","tag_id":"cknq2qd34003fzgl1dy0m4fr8","_id":"cknq2qd35003lzgl1s2iwazhd"},{"post_id":"cknq2qd2r0029zgl1kl6us6gh","tag_id":"cknq2qd34003hzgl1991u1mve","_id":"cknq2qd35003nzgl1bu91p40t"},{"post_id":"cknq2qd2r0029zgl1kl6us6gh","tag_id":"cknq2qd34003kzgl1jlb2a5re","_id":"cknq2qd35003ozgl1hl40y75b"},{"post_id":"cknq2qd2t002czgl1m5o7weqv","tag_id":"cknq2qd35003mzgl1i1q5pucy","_id":"cknq2qd36003rzgl1d91e7kj9"},{"post_id":"cknq2qd2t002czgl1m5o7weqv","tag_id":"cknq2qd35003pzgl1oxc21hse","_id":"cknq2qd36003szgl1gi8f194o"},{"post_id":"cknq2qd2w002jzgl1jg9qklyf","tag_id":"cknq2qd35003mzgl1i1q5pucy","_id":"cknq2qd36003uzgl1609921wh"},{"post_id":"cknq2qd2x002lzgl1iieyu09a","tag_id":"cknq2qd36003tzgl1ihenl4do","_id":"cknq2qd37003wzgl1214du7fh"},{"post_id":"cknq2qd2x002lzgl1iieyu09a","tag_id":"cknq2qd1p000azgl1acnztq47","_id":"cknq2qd38003xzgl1yy2lyms6"},{"post_id":"cknq2qd2y002nzgl1e2nv2aq9","tag_id":"cknq2qd37003vzgl13uiebk0v","_id":"cknq2qd38003yzgl15nbjxhqp"}],"Tag":[{"name":"Axios","_id":"cknq2qd1j0005zgl1wbc8ec2d"},{"name":"Vue","_id":"cknq2qd1p000azgl1acnztq47"},{"name":"梯子","_id":"cknq2qd1x000lzgl1ebuz9ngs"},{"name":"Brook","_id":"cknq2qd1z000qzgl161eabzcd"},{"name":"Docker","_id":"cknq2qd21000tzgl1h26vyoxw"},{"name":"Docker Compose","_id":"cknq2qd290019zgl1yjbyd8zh"},{"name":"YAML","_id":"cknq2qd2y002pzgl17iadfn5p"},{"name":"Dockerfile","_id":"cknq2qd2z002rzgl1sb98hemb"},{"name":"GCP","_id":"cknq2qd31002zzgl1ewzdysvi"},{"name":"VPS","_id":"cknq2qd310032zgl1vkld50hb"},{"name":"GitLab","_id":"cknq2qd310033zgl10qgk248e"},{"name":"Git","_id":"cknq2qd320036zgl1fuezqw5p"},{"name":"git","_id":"cknq2qd33003azgl1fqpn64s0"},{"name":"webpack","_id":"cknq2qd33003czgl1utgj4kxg"},{"name":"npm","_id":"cknq2qd34003fzgl1dy0m4fr8"},{"name":"Windows","_id":"cknq2qd34003hzgl1991u1mve"},{"name":"Windows端口","_id":"cknq2qd34003kzgl1jlb2a5re"},{"name":"Hexo","_id":"cknq2qd35003mzgl1i1q5pucy"},{"name":"Blog","_id":"cknq2qd35003pzgl1oxc21hse"},{"name":"Vuex","_id":"cknq2qd36003tzgl1ihenl4do"},{"name":"计算机理论","_id":"cknq2qd37003vzgl13uiebk0v"}]}}